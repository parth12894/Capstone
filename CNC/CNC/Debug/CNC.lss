
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cf20  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000220  20400000  0040cf20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000306c0  20400220  0040d140  00020220  2**3
                  ALLOC
  3 .heap         00000200  204308e0  0043d800  00020220  2**0
                  ALLOC
  4 .stack        00000400  20430ae0  0043da00  00020220  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002024e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00035805  00000000  00000000  000202a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006616  00000000  00000000  00055aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015b9c  00000000  00000000  0005c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001078  00000000  00000000  00071c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001198  00000000  00000000  00072cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004d7ef  00000000  00000000  00073e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000278cd  00000000  00000000  000c165d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0015dd10  00000000  00000000  000e8f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000425c  00000000  00000000  00246c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 0e 43 20 25 15 40 00 21 15 40 00 21 15 40 00     ..C %.@.!.@.!.@.
  400010:	21 15 40 00 21 15 40 00 21 15 40 00 00 00 00 00     !.@.!.@.!.@.....
	...
  40002c:	21 15 40 00 21 15 40 00 00 00 00 00 21 15 40 00     !.@.!.@.....!.@.
  40003c:	21 15 40 00 21 15 40 00 21 15 40 00 51 49 40 00     !.@.!.@.!.@.QI@.
  40004c:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  40005c:	21 15 40 00 21 15 40 00 00 00 00 00 55 44 40 00     !.@.!.@.....UD@.
  40006c:	49 44 40 00 6d 44 40 00 21 15 40 00 21 15 40 00     ID@.mD@.!.@.!.@.
  40007c:	21 15 40 00 61 44 40 00 21 15 40 00 21 15 40 00     !.@.aD@.!.@.!.@.
  40008c:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  40009c:	4d 4b 40 00 21 15 40 00 21 15 40 00 21 15 40 00     MK@.!.@.!.@.!.@.
  4000ac:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  4000bc:	d9 45 40 00 21 15 40 00 21 15 40 00 21 15 40 00     .E@.!.@.!.@.!.@.
  4000cc:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  4000dc:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  4000ec:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  4000fc:	61 4b 40 00 21 15 40 00 21 15 40 00 21 15 40 00     aK@.!.@.!.@.!.@.
  40010c:	21 15 40 00 21 15 40 00 00 00 00 00 00 00 00 00     !.@.!.@.........
  40011c:	00 00 00 00 21 15 40 00 21 15 40 00 21 15 40 00     ....!.@.!.@.!.@.
  40012c:	21 15 40 00 ed 45 40 00 21 15 40 00 21 15 40 00     !.@..E@.!.@.!.@.
  40013c:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  40014c:	21 15 40 00 21 15 40 00 21 15 40 00 21 15 40 00     !.@.!.@.!.@.!.@.
  40015c:	21 15 40 00 21 15 40 00 21 15 40 00                 !.@.!.@.!.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400220 	.word	0x20400220
  400184:	00000000 	.word	0x00000000
  400188:	0040cf20 	.word	0x0040cf20

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040cf20 	.word	0x0040cf20
  4001c8:	20400224 	.word	0x20400224
  4001cc:	0040cf20 	.word	0x0040cf20
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b04      	ldr	r3, [pc, #16]	; (4001e8 <atmel_start_init+0x14>)
  4001d8:	4798      	blx	r3
	sd_mmc_stack_init();
  4001da:	4b04      	ldr	r3, [pc, #16]	; (4001ec <atmel_start_init+0x18>)
  4001dc:	4798      	blx	r3
	diskio_init();
  4001de:	4b04      	ldr	r3, [pc, #16]	; (4001f0 <atmel_start_init+0x1c>)
  4001e0:	4798      	blx	r3
	stdio_redirect_init();
  4001e2:	4b04      	ldr	r3, [pc, #16]	; (4001f4 <atmel_start_init+0x20>)
  4001e4:	4798      	blx	r3
  4001e6:	bd08      	pop	{r3, pc}
  4001e8:	00401b1d 	.word	0x00401b1d
  4001ec:	004058fd 	.word	0x004058fd
  4001f0:	004017a1 	.word	0x004017a1
  4001f4:	004059d1 	.word	0x004059d1

004001f8 <execute_from_sd_card>:
#include "CNC_5Axis.h"


uint8_t execute_from_sd_card(uint8_t file_num)
{
  4001f8:	b570      	push	{r4, r5, r6, lr}
  4001fa:	b0a4      	sub	sp, #144	; 0x90
	
	char line[128];
	char read_file_name[12];
	
	// Setup file.
	sprintf(read_file_name,"%d.txt", file_num);
  4001fc:	4602      	mov	r2, r0
  4001fe:	4925      	ldr	r1, [pc, #148]	; (400294 <execute_from_sd_card+0x9c>)
  400200:	a801      	add	r0, sp, #4
  400202:	4b25      	ldr	r3, [pc, #148]	; (400298 <execute_from_sd_card+0xa0>)
  400204:	4798      	blx	r3
	printf("\nReading from file '%s'", read_file_name);	
  400206:	a901      	add	r1, sp, #4
  400208:	4824      	ldr	r0, [pc, #144]	; (40029c <execute_from_sd_card+0xa4>)
  40020a:	4b25      	ldr	r3, [pc, #148]	; (4002a0 <execute_from_sd_card+0xa8>)
  40020c:	4798      	blx	r3
	
	// Wait card present and ready.
	if (SD_MMC_OK != sd_mmc_check(0))
  40020e:	2000      	movs	r0, #0
  400210:	4b24      	ldr	r3, [pc, #144]	; (4002a4 <execute_from_sd_card+0xac>)
  400212:	4798      	blx	r3
  400214:	b9e8      	cbnz	r0, 400252 <execute_from_sd_card+0x5a>
		printf("\nPlease insert a FAT system SD card . . .\n\r");
	
	while(SD_MMC_OK != sd_mmc_check(0));
  400216:	2500      	movs	r5, #0
  400218:	4c22      	ldr	r4, [pc, #136]	; (4002a4 <execute_from_sd_card+0xac>)
  40021a:	4628      	mov	r0, r5
  40021c:	47a0      	blx	r4
  40021e:	2800      	cmp	r0, #0
  400220:	d1fb      	bne.n	40021a <execute_from_sd_card+0x22>
	
	// Mount Drive.
	f_mount(&fs, "", 0);
  400222:	4c21      	ldr	r4, [pc, #132]	; (4002a8 <execute_from_sd_card+0xb0>)
  400224:	2200      	movs	r2, #0
  400226:	4921      	ldr	r1, [pc, #132]	; (4002ac <execute_from_sd_card+0xb4>)
  400228:	4620      	mov	r0, r4
  40022a:	4b21      	ldr	r3, [pc, #132]	; (4002b0 <execute_from_sd_card+0xb8>)
  40022c:	4798      	blx	r3
	delay_ms(1);
  40022e:	2001      	movs	r0, #1
  400230:	4b20      	ldr	r3, [pc, #128]	; (4002b4 <execute_from_sd_card+0xbc>)
  400232:	4798      	blx	r3
	
	// Open the text file.
	res = f_open(&file_object, (char const *)read_file_name, FA_READ);
  400234:	2201      	movs	r2, #1
  400236:	a901      	add	r1, sp, #4
  400238:	f504 700c 	add.w	r0, r4, #560	; 0x230
  40023c:	4b1e      	ldr	r3, [pc, #120]	; (4002b8 <execute_from_sd_card+0xc0>)
  40023e:	4798      	blx	r3
	if (res)
  400240:	4604      	mov	r4, r0
  400242:	b950      	cbnz	r0, 40025a <execute_from_sd_card+0x62>
		puts("Error Opening File . . .");
		puts("Returning to terminal mode . . . \n");
		return (int)res;
	}
	
	puts("\nExecuting from the SD Card . . . ");
  400244:	481d      	ldr	r0, [pc, #116]	; (4002bc <execute_from_sd_card+0xc4>)
  400246:	4b1e      	ldr	r3, [pc, #120]	; (4002c0 <execute_from_sd_card+0xc8>)
  400248:	4798      	blx	r3
	
	// Executing from the SD Card till EOF.
	while (f_gets(line, sizeof line, &file_object)) 
  40024a:	4d1e      	ldr	r5, [pc, #120]	; (4002c4 <execute_from_sd_card+0xcc>)
  40024c:	4c1e      	ldr	r4, [pc, #120]	; (4002c8 <execute_from_sd_card+0xd0>)
	{
		printf("\n>> %s", line);
  40024e:	4e1f      	ldr	r6, [pc, #124]	; (4002cc <execute_from_sd_card+0xd4>)
	while (f_gets(line, sizeof line, &file_object)) 
  400250:	e011      	b.n	400276 <execute_from_sd_card+0x7e>
		printf("\nPlease insert a FAT system SD card . . .\n\r");
  400252:	481f      	ldr	r0, [pc, #124]	; (4002d0 <execute_from_sd_card+0xd8>)
  400254:	4b12      	ldr	r3, [pc, #72]	; (4002a0 <execute_from_sd_card+0xa8>)
  400256:	4798      	blx	r3
  400258:	e7dd      	b.n	400216 <execute_from_sd_card+0x1e>
		puts("Error Opening File . . .");
  40025a:	481e      	ldr	r0, [pc, #120]	; (4002d4 <execute_from_sd_card+0xdc>)
  40025c:	4d18      	ldr	r5, [pc, #96]	; (4002c0 <execute_from_sd_card+0xc8>)
  40025e:	47a8      	blx	r5
		puts("Returning to terminal mode . . . \n");
  400260:	481d      	ldr	r0, [pc, #116]	; (4002d8 <execute_from_sd_card+0xe0>)
  400262:	47a8      	blx	r5
		return (int)res;
  400264:	4620      	mov	r0, r4
  400266:	e013      	b.n	400290 <execute_from_sd_card+0x98>
		printf("\n>> %s", line);
  400268:	a904      	add	r1, sp, #16
  40026a:	4630      	mov	r0, r6
  40026c:	4b0c      	ldr	r3, [pc, #48]	; (4002a0 <execute_from_sd_card+0xa8>)
  40026e:	4798      	blx	r3

		parse_line(line);
  400270:	a804      	add	r0, sp, #16
  400272:	4b1a      	ldr	r3, [pc, #104]	; (4002dc <execute_from_sd_card+0xe4>)
  400274:	4798      	blx	r3
	while (f_gets(line, sizeof line, &file_object)) 
  400276:	462a      	mov	r2, r5
  400278:	2180      	movs	r1, #128	; 0x80
  40027a:	a804      	add	r0, sp, #16
  40027c:	47a0      	blx	r4
  40027e:	2800      	cmp	r0, #0
  400280:	d1f2      	bne.n	400268 <execute_from_sd_card+0x70>
				parser_state.feedrate,parser_state.plane[0],parser_state.plane[1],parser_state.axis_linear);
		#endif

	}
	
	puts("\n\nFinished parsing from the SD Card, returning to terminal mode . . . \n");
  400282:	4817      	ldr	r0, [pc, #92]	; (4002e0 <execute_from_sd_card+0xe8>)
  400284:	4b0e      	ldr	r3, [pc, #56]	; (4002c0 <execute_from_sd_card+0xc8>)
  400286:	4798      	blx	r3
	
	f_close(&file_object);	
  400288:	480e      	ldr	r0, [pc, #56]	; (4002c4 <execute_from_sd_card+0xcc>)
  40028a:	4b16      	ldr	r3, [pc, #88]	; (4002e4 <execute_from_sd_card+0xec>)
  40028c:	4798      	blx	r3
	
	return 0;
  40028e:	2000      	movs	r0, #0
}
  400290:	b024      	add	sp, #144	; 0x90
  400292:	bd70      	pop	{r4, r5, r6, pc}
  400294:	0040c314 	.word	0x0040c314
  400298:	00408581 	.word	0x00408581
  40029c:	0040c31c 	.word	0x0040c31c
  4002a0:	004081d5 	.word	0x004081d5
  4002a4:	00404f35 	.word	0x00404f35
  4002a8:	2040023c 	.word	0x2040023c
  4002ac:	0040c530 	.word	0x0040c530
  4002b0:	00402c01 	.word	0x00402c01
  4002b4:	004031e5 	.word	0x004031e5
  4002b8:	00402c69 	.word	0x00402c69
  4002bc:	0040c3a0 	.word	0x0040c3a0
  4002c0:	004082bd 	.word	0x004082bd
  4002c4:	2040046c 	.word	0x2040046c
  4002c8:	00403081 	.word	0x00403081
  4002cc:	0040c3c4 	.word	0x0040c3c4
  4002d0:	0040c334 	.word	0x0040c334
  4002d4:	0040c360 	.word	0x0040c360
  4002d8:	0040c37c 	.word	0x0040c37c
  4002dc:	004009dd 	.word	0x004009dd
  4002e0:	0040c3cc 	.word	0x0040c3cc
  4002e4:	00403055 	.word	0x00403055

004002e8 <a_lim_pressed>:
	set_cord_to_zero(Z_AXIS);
	return;
}

static void a_lim_pressed()
{
  4002e8:	b508      	push	{r3, lr}
	ISR_disable();
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <a_lim_pressed+0x10>)
  4002ec:	4798      	blx	r3
	set_cord_to_zero(A_AXIS);
  4002ee:	2003      	movs	r0, #3
  4002f0:	4b02      	ldr	r3, [pc, #8]	; (4002fc <a_lim_pressed+0x14>)
  4002f2:	4798      	blx	r3
  4002f4:	bd08      	pop	{r3, pc}
  4002f6:	bf00      	nop
  4002f8:	00401279 	.word	0x00401279
  4002fc:	00400985 	.word	0x00400985

00400300 <z_lim_pressed>:
{
  400300:	b508      	push	{r3, lr}
	ISR_disable();
  400302:	4b03      	ldr	r3, [pc, #12]	; (400310 <z_lim_pressed+0x10>)
  400304:	4798      	blx	r3
	set_cord_to_zero(Z_AXIS);
  400306:	2002      	movs	r0, #2
  400308:	4b02      	ldr	r3, [pc, #8]	; (400314 <z_lim_pressed+0x14>)
  40030a:	4798      	blx	r3
  40030c:	bd08      	pop	{r3, pc}
  40030e:	bf00      	nop
  400310:	00401279 	.word	0x00401279
  400314:	00400985 	.word	0x00400985

00400318 <y_lim_pressed>:
{
  400318:	b508      	push	{r3, lr}
	ISR_disable();
  40031a:	4b03      	ldr	r3, [pc, #12]	; (400328 <y_lim_pressed+0x10>)
  40031c:	4798      	blx	r3
	set_cord_to_zero(Y_AXIS);
  40031e:	2001      	movs	r0, #1
  400320:	4b02      	ldr	r3, [pc, #8]	; (40032c <y_lim_pressed+0x14>)
  400322:	4798      	blx	r3
  400324:	bd08      	pop	{r3, pc}
  400326:	bf00      	nop
  400328:	00401279 	.word	0x00401279
  40032c:	00400985 	.word	0x00400985

00400330 <x_lim_pressed>:
{
  400330:	b508      	push	{r3, lr}
	ISR_disable();
  400332:	4b03      	ldr	r3, [pc, #12]	; (400340 <x_lim_pressed+0x10>)
  400334:	4798      	blx	r3
	set_cord_to_zero(X_AXIS);
  400336:	2000      	movs	r0, #0
  400338:	4b02      	ldr	r3, [pc, #8]	; (400344 <x_lim_pressed+0x14>)
  40033a:	4798      	blx	r3
  40033c:	bd08      	pop	{r3, pc}
  40033e:	bf00      	nop
  400340:	00401279 	.word	0x00401279
  400344:	00400985 	.word	0x00400985

00400348 <limits_init>:
}



void limits_init()
{
  400348:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_pio_write_SCDR_reg(const void *const hw, hri_pio_scdr_reg_t data)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_SCDR = data;
  40034a:	4c17      	ldr	r4, [pc, #92]	; (4003a8 <limits_init+0x60>)
  40034c:	260f      	movs	r6, #15
  40034e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	((Pio *)hw)->PIO_IFER = PIO_IFSR_P26;
  400352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400356:	6223      	str	r3, [r4, #32]
	((Pio *)hw)->PIO_IFSCER = PIO_IFSCSR_P26;
  400358:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	// Here 0x0F gives a value of 
	hri_pio_write_SCDR_reg(PIOD, 0x0F);
	hri_pio_set_IFSR_P26_bit(PIOD);
	hri_pio_set_IFSCSR_P26_bit(PIOD);
	ext_irq_register(PIO_PD26_IDX, x_lim_pressed);
  40035c:	4913      	ldr	r1, [pc, #76]	; (4003ac <limits_init+0x64>)
  40035e:	207a      	movs	r0, #122	; 0x7a
  400360:	4d13      	ldr	r5, [pc, #76]	; (4003b0 <limits_init+0x68>)
  400362:	47a8      	blx	r5
	((Pio *)hw)->PIO_SCDR = data;
  400364:	4b13      	ldr	r3, [pc, #76]	; (4003b4 <limits_init+0x6c>)
  400366:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
	((Pio *)hw)->PIO_IFER = PIO_IFSR_P31;
  40036a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40036e:	621a      	str	r2, [r3, #32]
	((Pio *)hw)->PIO_IFSCER = PIO_IFSCSR_P31;
  400370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	hri_pio_write_SCDR_reg(PIOC, 0x0F);
	hri_pio_set_IFSR_P31_bit(PIOC);
	hri_pio_set_IFSCSR_P31_bit(PIOC);
	ext_irq_register(PIO_PC31_IDX, y_lim_pressed);
  400374:	4910      	ldr	r1, [pc, #64]	; (4003b8 <limits_init+0x70>)
  400376:	205f      	movs	r0, #95	; 0x5f
  400378:	47a8      	blx	r5
	((Pio *)hw)->PIO_SCDR = data;
  40037a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	((Pio *)hw)->PIO_IFER = PIO_IFSR_P30;
  40037e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400382:	6223      	str	r3, [r4, #32]
	((Pio *)hw)->PIO_IFSCER = PIO_IFSCSR_P30;
  400384:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	hri_pio_write_SCDR_reg(PIOD, 0x0F);
	hri_pio_set_IFSR_P30_bit(PIOD);
	hri_pio_set_IFSCSR_P30_bit(PIOD);
	ext_irq_register(PIO_PD30_IDX, z_lim_pressed);
  400388:	490c      	ldr	r1, [pc, #48]	; (4003bc <limits_init+0x74>)
  40038a:	207e      	movs	r0, #126	; 0x7e
  40038c:	47a8      	blx	r5
	((Pio *)hw)->PIO_SCDR = data;
  40038e:	4b0c      	ldr	r3, [pc, #48]	; (4003c0 <limits_init+0x78>)
  400390:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
	((Pio *)hw)->PIO_IFER = PIO_IFSR_P19;
  400394:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400398:	621a      	str	r2, [r3, #32]
	((Pio *)hw)->PIO_IFSCER = PIO_IFSCSR_P19;
  40039a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	hri_pio_write_SCDR_reg(PIOA, 0x0F);
	hri_pio_set_IFSR_P19_bit(PIOA);
	hri_pio_set_IFSCSR_P19_bit(PIOA);
	ext_irq_register(PIO_PA19_IDX, a_lim_pressed);
  40039e:	4909      	ldr	r1, [pc, #36]	; (4003c4 <limits_init+0x7c>)
  4003a0:	2013      	movs	r0, #19
  4003a2:	47a8      	blx	r5
  4003a4:	bd70      	pop	{r4, r5, r6, pc}
  4003a6:	bf00      	nop
  4003a8:	400e1400 	.word	0x400e1400
  4003ac:	00400331 	.word	0x00400331
  4003b0:	00403281 	.word	0x00403281
  4003b4:	400e1200 	.word	0x400e1200
  4003b8:	00400319 	.word	0x00400319
  4003bc:	00400301 	.word	0x00400301
  4003c0:	400e0e00 	.word	0x400e0e00
  4003c4:	004002e9 	.word	0x004002e9

004003c8 <main>:
#include "CNC_5AXIS/CNC_5Axis.h"


int main()
{
  4003c8:	b500      	push	{lr}
  4003ca:	b0a1      	sub	sp, #132	; 0x84
	// Initialize all the individual components
	atmel_start_init();
  4003cc:	4b11      	ldr	r3, [pc, #68]	; (400414 <main+0x4c>)
  4003ce:	4798      	blx	r3
	spindle_init();
  4003d0:	4b11      	ldr	r3, [pc, #68]	; (400418 <main+0x50>)
  4003d2:	4798      	blx	r3
	parser_init();
  4003d4:	4b11      	ldr	r3, [pc, #68]	; (40041c <main+0x54>)
  4003d6:	4798      	blx	r3
	stepper_init();
  4003d8:	4b11      	ldr	r3, [pc, #68]	; (400420 <main+0x58>)
  4003da:	4798      	blx	r3
	limits_init();
  4003dc:	4b11      	ldr	r3, [pc, #68]	; (400424 <main+0x5c>)
  4003de:	4798      	blx	r3
	

	printf("\n\t\t--  PP01 - 5 Axis CNC Controller  --\n");
  4003e0:	4811      	ldr	r0, [pc, #68]	; (400428 <main+0x60>)
  4003e2:	4b12      	ldr	r3, [pc, #72]	; (40042c <main+0x64>)
  4003e4:	4798      	blx	r3
	printf("\t\t-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  4003e6:	4a12      	ldr	r2, [pc, #72]	; (400430 <main+0x68>)
  4003e8:	4912      	ldr	r1, [pc, #72]	; (400434 <main+0x6c>)
  4003ea:	4813      	ldr	r0, [pc, #76]	; (400438 <main+0x70>)
  4003ec:	4b13      	ldr	r3, [pc, #76]	; (40043c <main+0x74>)
  4003ee:	4798      	blx	r3
	
	// Start the main loop
	char input[128];
	while(1)
	{
		printf("\n>>");
  4003f0:	4e13      	ldr	r6, [pc, #76]	; (400440 <main+0x78>)
  4003f2:	4c12      	ldr	r4, [pc, #72]	; (40043c <main+0x74>)
		fgets(input, sizeof(input), stdin);
  4003f4:	4d13      	ldr	r5, [pc, #76]	; (400444 <main+0x7c>)
		printf("\n>>");
  4003f6:	4630      	mov	r0, r6
  4003f8:	47a0      	blx	r4
		fgets(input, sizeof(input), stdin);
  4003fa:	682b      	ldr	r3, [r5, #0]
  4003fc:	685a      	ldr	r2, [r3, #4]
  4003fe:	2180      	movs	r1, #128	; 0x80
  400400:	4668      	mov	r0, sp
  400402:	4b11      	ldr	r3, [pc, #68]	; (400448 <main+0x80>)
  400404:	4798      	blx	r3
		printf("%s",input);
  400406:	4669      	mov	r1, sp
  400408:	4810      	ldr	r0, [pc, #64]	; (40044c <main+0x84>)
  40040a:	47a0      	blx	r4
		parse_line(input);
  40040c:	4668      	mov	r0, sp
  40040e:	4b10      	ldr	r3, [pc, #64]	; (400450 <main+0x88>)
  400410:	4798      	blx	r3
  400412:	e7f0      	b.n	4003f6 <main+0x2e>
  400414:	004001d5 	.word	0x004001d5
  400418:	004010cd 	.word	0x004010cd
  40041c:	00400949 	.word	0x00400949
  400420:	00401231 	.word	0x00401231
  400424:	00400349 	.word	0x00400349
  400428:	0040c414 	.word	0x0040c414
  40042c:	004082bd 	.word	0x004082bd
  400430:	0040c43c 	.word	0x0040c43c
  400434:	0040c448 	.word	0x0040c448
  400438:	0040c454 	.word	0x0040c454
  40043c:	004081d5 	.word	0x004081d5
  400440:	0040c470 	.word	0x0040c470
  400444:	20400050 	.word	0x20400050
  400448:	00407569 	.word	0x00407569
  40044c:	0040c3c8 	.word	0x0040c3c8
  400450:	004009dd 	.word	0x004009dd
  400454:	00000000 	.word	0x00000000

00400458 <update_motion_buffer>:
static volatile uint32_t motion_buffer_head;
static volatile uint32_t motion_buffer_tail;

/*Adds a linear motion block to the head of the motion buffer*/
void update_motion_buffer(float* target_pos, float* curr_pos, float feedrate)
{
  400458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40045c:	b087      	sub	sp, #28
  40045e:	ee06 2a90 	vmov	s13, r2
  400462:	4603      	mov	r3, r0
  400464:	aa01      	add	r2, sp, #4
  400466:	3014      	adds	r0, #20
    uint8_t i;
    uint32_t target_steps[N_AXIS];
	float target_joints[N_AXIS];
	
	for(i=0;i<N_AXIS;i++)
		target_joints[i] = target_pos[i] - curr_pos[i];
  400468:	ecf3 7a01 	vldmia	r3!, {s15}
  40046c:	ecb1 7a01 	vldmia	r1!, {s14}
  400470:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400474:	ece2 7a01 	vstmia	r2!, {s15}
	for(i=0;i<N_AXIS;i++)
  400478:	4283      	cmp	r3, r0
  40047a:	d1f5      	bne.n	400468 <update_motion_buffer+0x10>
	
	
	uint32_t next_buffer_head = (motion_buffer_head + 1) % MOTION_BUFFER_SIZE;
  40047c:	4b3e      	ldr	r3, [pc, #248]	; (400578 <update_motion_buffer+0x120>)
  40047e:	681c      	ldr	r4, [r3, #0]
  400480:	3401      	adds	r4, #1
  400482:	f3c4 040b 	ubfx	r4, r4, #0, #12

	// If the buffer is full; rest here until there is room in the buffer.
	while(motion_buffer_tail == next_buffer_head){};
  400486:	461a      	mov	r2, r3
  400488:	6853      	ldr	r3, [r2, #4]
  40048a:	429c      	cmp	r4, r3
  40048c:	d0fc      	beq.n	400488 <update_motion_buffer+0x30>
	
    motion_block_t *block = &motion_buffer[motion_buffer_head];
  40048e:	4e3a      	ldr	r6, [pc, #232]	; (400578 <update_motion_buffer+0x120>)
  400490:	6835      	ldr	r5, [r6, #0]
	block->is_Mcode = 0;
  400492:	ea4f 0845 	mov.w	r8, r5, lsl #1
  400496:	eb08 0705 	add.w	r7, r8, r5
  40049a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  40049e:	2300      	movs	r3, #0
  4004a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    block->max_step_count = 0;
  4004a4:	61fb      	str	r3, [r7, #28]
	
	// Convert feedrate to clock cycles.
	block->feedrate = (int) (FEED_RATE_PARAMETER / feedrate);
  4004a6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 40057c <update_motion_buffer+0x124>
  4004aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
  4004ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4004b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4004b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	
	// Calculate steps for each axis.
	block->steps[X_AXIS] = lround(target_joints[X_AXIS]*STEPS_PER_MM_X);
  4004ba:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 400590 <update_motion_buffer+0x138>
  4004be:	9801      	ldr	r0, [sp, #4]
  4004c0:	47d8      	blx	fp
  4004c2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 400594 <update_motion_buffer+0x13c>
  4004c6:	2200      	movs	r2, #0
  4004c8:	4b2d      	ldr	r3, [pc, #180]	; (400580 <update_motion_buffer+0x128>)
  4004ca:	47d0      	blx	sl
  4004cc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 400598 <update_motion_buffer+0x140>
  4004d0:	47c8      	blx	r9
  4004d2:	60b8      	str	r0, [r7, #8]
	block->steps[Y_AXIS] = lround(target_joints[Y_AXIS]*STEPS_PER_MM_Y);
  4004d4:	9802      	ldr	r0, [sp, #8]
  4004d6:	47d8      	blx	fp
  4004d8:	2200      	movs	r2, #0
  4004da:	4b29      	ldr	r3, [pc, #164]	; (400580 <update_motion_buffer+0x128>)
  4004dc:	47d0      	blx	sl
  4004de:	47c8      	blx	r9
  4004e0:	60f8      	str	r0, [r7, #12]
	block->steps[Z_AXIS] = lround(target_joints[Z_AXIS]*STEPS_PER_MM_Z);
  4004e2:	9803      	ldr	r0, [sp, #12]
  4004e4:	47d8      	blx	fp
  4004e6:	2200      	movs	r2, #0
  4004e8:	4b26      	ldr	r3, [pc, #152]	; (400584 <update_motion_buffer+0x12c>)
  4004ea:	47d0      	blx	sl
  4004ec:	47c8      	blx	r9
  4004ee:	6138      	str	r0, [r7, #16]
	block->steps[A_AXIS] = lround(target_joints[A_AXIS]*STEPS_PER_DEGREE); 	
  4004f0:	9804      	ldr	r0, [sp, #16]
  4004f2:	47d8      	blx	fp
  4004f4:	a31e      	add	r3, pc, #120	; (adr r3, 400570 <update_motion_buffer+0x118>)
  4004f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004fa:	47d0      	blx	sl
  4004fc:	47c8      	blx	r9
  4004fe:	6178      	str	r0, [r7, #20]
	block->steps[C_AXIS] = lround(target_joints[C_AXIS]*STEPS_PER_DEGREE);	
  400500:	9805      	ldr	r0, [sp, #20]
  400502:	47d8      	blx	fp
  400504:	a31a      	add	r3, pc, #104	; (adr r3, 400570 <update_motion_buffer+0x118>)
  400506:	e9d3 2300 	ldrd	r2, r3, [r3]
  40050a:	47d0      	blx	sl
  40050c:	47c8      	blx	r9
  40050e:	61b8      	str	r0, [r7, #24]
  400510:	69ff      	ldr	r7, [r7, #28]
  400512:	eb08 0005 	add.w	r0, r8, r5
  400516:	0100      	lsls	r0, r0, #4
  400518:	3608      	adds	r6, #8
  40051a:	1f02      	subs	r2, r0, #4
  40051c:	4432      	add	r2, r6
  40051e:	f100 0118 	add.w	r1, r0, #24
  400522:	4431      	add	r1, r6
  400524:	3010      	adds	r0, #16
  400526:	4430      	add	r0, r6
	for(i=0;i<N_AXIS;i++)
	{
		if((int)(block->steps[i]) < 0)
			block->dir[i] = 0;
		else
			block->dir[i] = 1;
  400528:	2601      	movs	r6, #1
			block->dir[i] = 0;
  40052a:	f04f 0e00 	mov.w	lr, #0
		if((int)(block->steps[i]) < 0)
  40052e:	6853      	ldr	r3, [r2, #4]
  400530:	2b00      	cmp	r3, #0
			block->dir[i] = 0;
  400532:	bfb4      	ite	lt
  400534:	f881 e000 	strblt.w	lr, [r1]
			block->dir[i] = 1;
  400538:	700e      	strbge	r6, [r1, #0]
		block->steps[i] = abs(block->steps[i]);		
  40053a:	2b00      	cmp	r3, #0
  40053c:	bfb8      	it	lt
  40053e:	425b      	neglt	r3, r3
  400540:	f842 3f04 	str.w	r3, [r2, #4]!
		block->max_step_count = max(block->max_step_count,block->steps[i]);
  400544:	429f      	cmp	r7, r3
  400546:	bf38      	it	cc
  400548:	461f      	movcc	r7, r3
  40054a:	3101      	adds	r1, #1
	for(i=0;i<N_AXIS;i++)
  40054c:	4282      	cmp	r2, r0
  40054e:	d1ee      	bne.n	40052e <update_motion_buffer+0xd6>
  400550:	4b09      	ldr	r3, [pc, #36]	; (400578 <update_motion_buffer+0x120>)
  400552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  400556:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  40055a:	61ef      	str	r7, [r5, #28]
		block->radians = sqrt(block->radians);
		
		printf("Steps: %d %d %d %d %d \nFeedrate: %f\nBufferHead: %d\nMillimeters: %.4f\nRadians: %.4f\n\n",block->steps[X_AXIS],block->steps[Y_AXIS],block->steps[Z_AXIS],block->steps[A_AXIS],block->steps[C_AXIS],feedrate,motion_buffer_head,block->millimeters,block->radians);
	#endif
	
	motion_buffer_head = next_buffer_head;
  40055c:	601c      	str	r4, [r3, #0]
	
	#if RUN_MOTORS
		ISR_EN();
  40055e:	480a      	ldr	r0, [pc, #40]	; (400588 <update_motion_buffer+0x130>)
  400560:	4b0a      	ldr	r3, [pc, #40]	; (40058c <update_motion_buffer+0x134>)
  400562:	4798      	blx	r3
	#endif
	return;
}
  400564:	b007      	add	sp, #28
  400566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40056a:	bf00      	nop
  40056c:	f3af 8000 	nop.w
  400570:	71c6fde7 	.word	0x71c6fde7
  400574:	4051c71c 	.word	0x4051c71c
  400578:	20400690 	.word	0x20400690
  40057c:	49572620 	.word	0x49572620
  400580:	40940000 	.word	0x40940000
  400584:	40990000 	.word	0x40990000
  400588:	20430850 	.word	0x20430850
  40058c:	00403835 	.word	0x00403835
  400590:	0040bbdd 	.word	0x0040bbdd
  400594:	0040bc85 	.word	0x0040bc85
  400598:	00405ba5 	.word	0x00405ba5

0040059c <add_M_block>:


void add_M_block(uint8_t code, uint32_t speed, uint32_t parameter)
{
  40059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int next_buffer_head = (motion_buffer_head + 1) % MOTION_BUFFER_SIZE;
  40059e:	4b0e      	ldr	r3, [pc, #56]	; (4005d8 <add_M_block+0x3c>)
  4005a0:	681c      	ldr	r4, [r3, #0]
  4005a2:	3401      	adds	r4, #1
  4005a4:	f3c4 040b 	ubfx	r4, r4, #0, #12

	// If the buffer is full; rest here until there is room in the buffer.
	while(motion_buffer_tail == next_buffer_head){};
  4005a8:	461d      	mov	r5, r3
  4005aa:	4627      	mov	r7, r4
  4005ac:	686b      	ldr	r3, [r5, #4]
  4005ae:	42a3      	cmp	r3, r4
  4005b0:	d0fc      	beq.n	4005ac <add_M_block+0x10>
	
	motion_block_t *block = &motion_buffer[motion_buffer_head];
  4005b2:	4d09      	ldr	r5, [pc, #36]	; (4005d8 <add_M_block+0x3c>)
  4005b4:	682e      	ldr	r6, [r5, #0]
	
	//add m parameters to the motion block
	block->is_Mcode = 1;
  4005b6:	0073      	lsls	r3, r6, #1
  4005b8:	199c      	adds	r4, r3, r6
  4005ba:	eb05 1404 	add.w	r4, r5, r4, lsl #4
  4005be:	f04f 0e01 	mov.w	lr, #1
  4005c2:	f884 e02c 	strb.w	lr, [r4, #44]	; 0x2c
	block->code = code;
  4005c6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
	block->speed = speed;
  4005ca:	6321      	str	r1, [r4, #48]	; 0x30
	block->parameter = parameter;
  4005cc:	6362      	str	r2, [r4, #52]	; 0x34
	
	motion_buffer_head = next_buffer_head;
  4005ce:	602f      	str	r7, [r5, #0]
	
	#if DEBUG
		printf("M Code: %d\nSpeed: %f\nBufferHead: %d\Parameter: %d\n\n",code,speed,motion_buffer_head,parameter);
	#endif
	#if RUN_MOTORS
		ISR_EN();
  4005d0:	4802      	ldr	r0, [pc, #8]	; (4005dc <add_M_block+0x40>)
  4005d2:	4b03      	ldr	r3, [pc, #12]	; (4005e0 <add_M_block+0x44>)
  4005d4:	4798      	blx	r3
  4005d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005d8:	20400690 	.word	0x20400690
  4005dc:	20430850 	.word	0x20430850
  4005e0:	00403835 	.word	0x00403835

004005e4 <get_motion_block>:
	
	return;
}

motion_block_t *get_motion_block(){
    if (motion_buffer_head == motion_buffer_tail) { return(NULL); }
  4005e4:	4b07      	ldr	r3, [pc, #28]	; (400604 <get_motion_block+0x20>)
  4005e6:	681a      	ldr	r2, [r3, #0]
  4005e8:	685b      	ldr	r3, [r3, #4]
  4005ea:	429a      	cmp	r2, r3
  4005ec:	d007      	beq.n	4005fe <get_motion_block+0x1a>
    return(&motion_buffer[motion_buffer_tail]);
  4005ee:	4805      	ldr	r0, [pc, #20]	; (400604 <get_motion_block+0x20>)
  4005f0:	6843      	ldr	r3, [r0, #4]
  4005f2:	3008      	adds	r0, #8
  4005f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4005f8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4005fc:	4770      	bx	lr
    if (motion_buffer_head == motion_buffer_tail) { return(NULL); }
  4005fe:	2000      	movs	r0, #0
}
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	20400690 	.word	0x20400690

00400608 <increment_current_block>:

inline void increment_current_block() {
	if (motion_buffer_head != motion_buffer_tail)
  400608:	4b05      	ldr	r3, [pc, #20]	; (400620 <increment_current_block+0x18>)
  40060a:	681a      	ldr	r2, [r3, #0]
  40060c:	685b      	ldr	r3, [r3, #4]
  40060e:	429a      	cmp	r2, r3
  400610:	d005      	beq.n	40061e <increment_current_block+0x16>
		motion_buffer_tail = (motion_buffer_tail + 1) % MOTION_BUFFER_SIZE;
  400612:	4a03      	ldr	r2, [pc, #12]	; (400620 <increment_current_block+0x18>)
  400614:	6853      	ldr	r3, [r2, #4]
  400616:	3301      	adds	r3, #1
  400618:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40061c:	6053      	str	r3, [r2, #4]
  40061e:	4770      	bx	lr
  400620:	20400690 	.word	0x20400690

00400624 <add_linear_motion>:
#include "CNC_5Axis.h"


void add_linear_motion(float *target_pos, float *curr_pos, float feedrate)
{
  400624:	b508      	push	{r3, lr}
	#if DEBUG
		printf("Current Position: %f %f %f %f %f\n",curr_pos[X_AXIS],curr_pos[Y_AXIS],curr_pos[Z_AXIS],curr_pos[A_AXIS],curr_pos[C_AXIS]);
		printf("Next Position: %f %f %f %f %f\n",target_pos[X_AXIS],target_pos[Y_AXIS],target_pos[Z_AXIS],target_pos[A_AXIS],target_pos[C_AXIS]);
	#endif
	
	update_motion_buffer(target_pos,curr_pos,feedrate);
  400626:	4b01      	ldr	r3, [pc, #4]	; (40062c <add_linear_motion+0x8>)
  400628:	4798      	blx	r3
  40062a:	bd08      	pop	{r3, pc}
  40062c:	00400459 	.word	0x00400459

00400630 <add_arc_motion>:
}

void add_arc_motion(float *position, float *target, float *offset, uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_CW, float feedrate)
{
  400630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400634:	ed2d 8b0a 	vpush	{d8-d12}
  400638:	b091      	sub	sp, #68	; 0x44
  40063a:	4604      	mov	r4, r0
  40063c:	4689      	mov	r9, r1
  40063e:	f89d b098 	ldrb.w	fp, [sp, #152]	; 0x98
	// Details: target and offset is wrt position to origin

	/* set up vectors */
	float center_axis0 = position[axis_0] + offset[axis_0];
  400642:	009b      	lsls	r3, r3, #2
  400644:	18c1      	adds	r1, r0, r3
  400646:	9101      	str	r1, [sp, #4]
  400648:	18d0      	adds	r0, r2, r3
  40064a:	9002      	str	r0, [sp, #8]
  40064c:	ed90 7a00 	vldr	s14, [r0]
  400650:	edd1 9a00 	vldr	s19, [r1]
  400654:	ee77 9a29 	vadd.f32	s19, s14, s19
	float center_axis1 = position[axis_1] + offset[axis_1];
  400658:	f89d 1090 	ldrb.w	r1, [sp, #144]	; 0x90
  40065c:	0089      	lsls	r1, r1, #2
  40065e:	1865      	adds	r5, r4, r1
  400660:	eb02 0801 	add.w	r8, r2, r1
  400664:	edd8 7a00 	vldr	s15, [r8]
  400668:	ed95 aa00 	vldr	s20, [r5]
  40066c:	ee37 aa8a 	vadd.f32	s20, s15, s20
	/* radius vector from center to current position */
	float r_axis0 = -offset[axis_0];
  400670:	eeb1 ca47 	vneg.f32	s24, s14
	float r_axis1 = -offset[axis_1];
  400674:	eeb1 8a67 	vneg.f32	s16, s15
	/* radius vector from center to target position */
	float rt_axis0 = target[axis_0] - offset[axis_0];
  400678:	444b      	add	r3, r9
  40067a:	edd3 8a00 	vldr	s17, [r3]
  40067e:	ee78 8ac7 	vsub.f32	s17, s17, s14
	float rt_axis1 = target[axis_1] - offset[axis_1];
  400682:	4449      	add	r1, r9
  400684:	ed91 9a00 	vldr	s18, [r1]
  400688:	ee39 9a67 	vsub.f32	s18, s18, s15
  40068c:	4623      	mov	r3, r4
  40068e:	4649      	mov	r1, r9
  400690:	aa0b      	add	r2, sp, #44	; 0x2c
  400692:	f104 0014 	add.w	r0, r4, #20
	
	// used for final buffer update
	uint16_t i;
	float absolute_target[N_AXIS];
	for(i=0;i<N_AXIS;i++)
		absolute_target[i] = position[i] + target[i];
  400696:	ecb3 7a01 	vldmia	r3!, {s14}
  40069a:	ecf1 7a01 	vldmia	r1!, {s15}
  40069e:	ee77 7a27 	vadd.f32	s15, s14, s15
  4006a2:	ece2 7a01 	vstmia	r2!, {s15}
	for(i=0;i<N_AXIS;i++)
  4006a6:	4283      	cmp	r3, r0
  4006a8:	d1f5      	bne.n	400696 <add_arc_motion+0x66>
	
	
	/* find angular travel and direction */	
	/* We use atan2 for full angular range support. r_axis is considered to be the positive x-axis.
	We need to interpret ang_travel to fit this fact.*/
	float ang_travel = atan2(r_axis0*rt_axis1 - r_axis1*rt_axis0,r_axis0*rt_axis0 + r_axis1*rt_axis1);
  4006aa:	ee2c 7a28 	vmul.f32	s14, s24, s17
  4006ae:	ee68 7a09 	vmul.f32	s15, s16, s18
  4006b2:	4e97      	ldr	r6, [pc, #604]	; (400910 <add_arc_motion+0x2e0>)
  4006b4:	ee77 7a27 	vadd.f32	s15, s14, s15
  4006b8:	ee17 0a90 	vmov	r0, s15
  4006bc:	47b0      	blx	r6
  4006be:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4006c2:	ee2c 9a09 	vmul.f32	s18, s24, s18
  4006c6:	ee68 8a28 	vmul.f32	s17, s16, s17
  4006ca:	ee79 7a68 	vsub.f32	s15, s18, s17
  4006ce:	ee17 0a90 	vmov	r0, s15
  4006d2:	47b0      	blx	r6
  4006d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4006d8:	4e8e      	ldr	r6, [pc, #568]	; (400914 <add_arc_motion+0x2e4>)
  4006da:	47b0      	blx	r6
  4006dc:	4b8e      	ldr	r3, [pc, #568]	; (400918 <add_arc_motion+0x2e8>)
  4006de:	4798      	blx	r3
  4006e0:	ee08 0a90 	vmov	s17, r0
	switch(is_CW)
  4006e4:	f1bb 0f00 	cmp.w	fp, #0
  4006e8:	d06c      	beq.n	4007c4 <add_arc_motion+0x194>
  4006ea:	f1bb 0f01 	cmp.w	fp, #1
  4006ee:	d10b      	bne.n	400708 <add_arc_motion+0xd8>
	{
		case 1: 
			if(sign(ang_travel)==1)
  4006f0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
  4006f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4006f8:	bf4c      	ite	mi
  4006fa:	2301      	movmi	r3, #1
  4006fc:	2300      	movpl	r3, #0
  4006fe:	bfb4      	ite	lt
  400700:	2201      	movlt	r2, #1
  400702:	2200      	movge	r2, #0
  400704:	42d3      	cmn	r3, r2
  400706:	d04d      	beq.n	4007a4 <add_arc_motion+0x174>
	#if DEBUG
		printf("ang_travel %f\n", ang_travel);
	#endif

	/* get segments based on pre-defined total secant error */
    uint16_t segments = ceil((square(ang_travel))/(32*TOTAL_SECANT_ERROR));
  400708:	4e81      	ldr	r6, [pc, #516]	; (400910 <add_arc_motion+0x2e0>)
  40070a:	ee68 7aa8 	vmul.f32	s15, s17, s17
  40070e:	ee17 0a90 	vmov	r0, s15
  400712:	47b0      	blx	r6
  400714:	4f81      	ldr	r7, [pc, #516]	; (40091c <add_arc_motion+0x2ec>)
  400716:	a37a      	add	r3, pc, #488	; (adr r3, 400900 <add_arc_motion+0x2d0>)
  400718:	e9d3 2300 	ldrd	r2, r3, [r3]
  40071c:	47b8      	blx	r7
  40071e:	4b80      	ldr	r3, [pc, #512]	; (400920 <add_arc_motion+0x2f0>)
  400720:	4798      	blx	r3
  400722:	4b80      	ldr	r3, [pc, #512]	; (400924 <add_arc_motion+0x2f4>)
  400724:	4798      	blx	r3
  400726:	fa1f fa80 	uxth.w	sl, r0
  40072a:	f1ba 0f20 	cmp.w	sl, #32
  40072e:	bf38      	it	cc
  400730:	f04f 0a20 	movcc.w	sl, #32
	
	#if DEBUG
		printf("Number of segments: %d\n",segments);
	#endif
	
	float theta_per_segment = ang_travel/segments;
  400734:	ee07 aa90 	vmov	s15, sl
  400738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40073c:	eec8 baa7 	vdiv.f32	s23, s17, s15
	float linear_per_segment = target[axis_linear]/segments;
  400740:	f89d b094 	ldrb.w	fp, [sp, #148]	; 0x94
  400744:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  400748:	44d9      	add	r9, fp
  40074a:	ed99 7a00 	vldr	s14, [r9]
  40074e:	ee87 ba27 	vdiv.f32	s22, s14, s15
	// variables for incremental cos and sin
	float cos_T = 2.0-theta_per_segment*theta_per_segment;
  400752:	ee6b 7aab 	vmul.f32	s15, s23, s23
  400756:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
  40075a:	ee39 9a67 	vsub.f32	s18, s18, s15
	float sin_T = theta_per_segment*(cos_T + 4.0)/6.0;
  40075e:	ee19 0a10 	vmov	r0, s18
  400762:	47b0      	blx	r6
  400764:	2200      	movs	r2, #0
  400766:	4b70      	ldr	r3, [pc, #448]	; (400928 <add_arc_motion+0x2f8>)
  400768:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 400938 <add_arc_motion+0x308>
  40076c:	47c8      	blx	r9
  40076e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400772:	ee1b 0a90 	vmov	r0, s23
  400776:	47b0      	blx	r6
  400778:	4602      	mov	r2, r0
  40077a:	460b      	mov	r3, r1
  40077c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400780:	4e6a      	ldr	r6, [pc, #424]	; (40092c <add_arc_motion+0x2fc>)
  400782:	47b0      	blx	r6
  400784:	2200      	movs	r2, #0
  400786:	4b6a      	ldr	r3, [pc, #424]	; (400930 <add_arc_motion+0x300>)
  400788:	47b8      	blx	r7
  40078a:	4b63      	ldr	r3, [pc, #396]	; (400918 <add_arc_motion+0x2e8>)
  40078c:	4798      	blx	r3
  40078e:	ee0a 0a90 	vmov	s21, r0
	cos_T = cos_T/2;
  400792:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400796:	ee29 9a27 	vmul.f32	s18, s18, s15
  40079a:	f04f 0901 	mov.w	r9, #1
  40079e:	2600      	movs	r6, #0
			r_axis_temp = r_axis0*sin_T + r_axis1*cos_T;
			r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
			r_axis1 = r_axis_temp;
			count++;
		}else{
			cos_Ti = cos(i*theta_per_segment);
  4007a0:	9f02      	ldr	r7, [sp, #8]
  4007a2:	e088      	b.n	4008b6 <add_arc_motion+0x286>
				ang_travel = -(2*PI - ang_travel);
  4007a4:	4b5a      	ldr	r3, [pc, #360]	; (400910 <add_arc_motion+0x2e0>)
  4007a6:	4798      	blx	r3
  4007a8:	4602      	mov	r2, r0
  4007aa:	460b      	mov	r3, r1
  4007ac:	a156      	add	r1, pc, #344	; (adr r1, 400908 <add_arc_motion+0x2d8>)
  4007ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4007b2:	4e60      	ldr	r6, [pc, #384]	; (400934 <add_arc_motion+0x304>)
  4007b4:	47b0      	blx	r6
  4007b6:	4b58      	ldr	r3, [pc, #352]	; (400918 <add_arc_motion+0x2e8>)
  4007b8:	4798      	blx	r3
  4007ba:	ee07 0a90 	vmov	s15, r0
  4007be:	eef1 8a67 	vneg.f32	s17, s15
  4007c2:	e7a1      	b.n	400708 <add_arc_motion+0xd8>
			if(sign(ang_travel)==-1)
  4007c4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
  4007c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4007cc:	bfac      	ite	ge
  4007ce:	2301      	movge	r3, #1
  4007d0:	2300      	movlt	r3, #0
  4007d2:	bf4c      	ite	mi
  4007d4:	2201      	movmi	r2, #1
  4007d6:	2200      	movpl	r2, #0
  4007d8:	1a9b      	subs	r3, r3, r2
  4007da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007de:	d193      	bne.n	400708 <add_arc_motion+0xd8>
				ang_travel = 2*PI + ang_travel;
  4007e0:	4b4b      	ldr	r3, [pc, #300]	; (400910 <add_arc_motion+0x2e0>)
  4007e2:	4798      	blx	r3
  4007e4:	a348      	add	r3, pc, #288	; (adr r3, 400908 <add_arc_motion+0x2d8>)
  4007e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4007ea:	4e53      	ldr	r6, [pc, #332]	; (400938 <add_arc_motion+0x308>)
  4007ec:	47b0      	blx	r6
  4007ee:	4b4a      	ldr	r3, [pc, #296]	; (400918 <add_arc_motion+0x2e8>)
  4007f0:	4798      	blx	r3
  4007f2:	ee08 0a90 	vmov	s17, r0
  4007f6:	e787      	b.n	400708 <add_arc_motion+0xd8>
			cos_Ti = cos(i*theta_per_segment);
  4007f8:	ee07 9a90 	vmov	s15, r9
  4007fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400800:	ee67 7aab 	vmul.f32	s15, s15, s23
  400804:	ee17 0a90 	vmov	r0, s15
  400808:	4b41      	ldr	r3, [pc, #260]	; (400910 <add_arc_motion+0x2e0>)
  40080a:	4798      	blx	r3
  40080c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400810:	4b4a      	ldr	r3, [pc, #296]	; (40093c <add_arc_motion+0x30c>)
  400812:	4798      	blx	r3
  400814:	4b40      	ldr	r3, [pc, #256]	; (400918 <add_arc_motion+0x2e8>)
  400816:	4798      	blx	r3
  400818:	ee08 0a90 	vmov	s17, r0
			sin_Ti = sin(i*theta_per_segment);
  40081c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400820:	4b47      	ldr	r3, [pc, #284]	; (400940 <add_arc_motion+0x310>)
  400822:	4798      	blx	r3
  400824:	4b3c      	ldr	r3, [pc, #240]	; (400918 <add_arc_motion+0x2e8>)
  400826:	4798      	blx	r3
  400828:	ee07 0a10 	vmov	s14, r0
			r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
  40082c:	edd7 7a00 	vldr	s15, [r7]
  400830:	eef1 7a67 	vneg.f32	s15, s15
  400834:	ed98 8a00 	vldr	s16, [r8]
  400838:	ee28 caa7 	vmul.f32	s24, s17, s15
  40083c:	ee67 6a08 	vmul.f32	s13, s14, s16
  400840:	ee3c ca26 	vadd.f32	s24, s24, s13
			r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
  400844:	ee67 7a27 	vmul.f32	s15, s14, s15
  400848:	ee28 8a88 	vmul.f32	s16, s17, s16
  40084c:	ee37 8ac8 	vsub.f32	s16, s15, s16
			count=0;	   	   	   
  400850:	2600      	movs	r6, #0
		}
		
		memcpy(current_position,position,N_AXIS*sizeof(float));
  400852:	f10d 0e18 	add.w	lr, sp, #24
  400856:	6820      	ldr	r0, [r4, #0]
  400858:	6861      	ldr	r1, [r4, #4]
  40085a:	68a2      	ldr	r2, [r4, #8]
  40085c:	68e3      	ldr	r3, [r4, #12]
  40085e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400862:	6920      	ldr	r0, [r4, #16]
  400864:	f8ce 0000 	str.w	r0, [lr]
		
		/* update arc location */
		position[axis_0] = center_axis0 + r_axis0;
  400868:	ee7c 7a29 	vadd.f32	s15, s24, s19
  40086c:	9b01      	ldr	r3, [sp, #4]
  40086e:	edc3 7a00 	vstr	s15, [r3]
		position[axis_1] = center_axis1 + r_axis1;
  400872:	ee78 7a0a 	vadd.f32	s15, s16, s20
  400876:	edc5 7a00 	vstr	s15, [r5]
		/* for helical motion */
		position[axis_linear] += linear_per_segment;
  40087a:	eb04 030b 	add.w	r3, r4, fp
  40087e:	edd3 7a00 	vldr	s15, [r3]
  400882:	ee77 7a8b 	vadd.f32	s15, s15, s22
  400886:	edc3 7a00 	vstr	s15, [r3]
		#if DEBUG
			printf("Current Position: %f %f %f %f %f\n",current_position[X_AXIS],current_position[Y_AXIS],current_position[Z_AXIS],current_position[A_AXIS],current_position[C_AXIS]);
			printf("Next Position: %f %f %f %f %f\n",position[X_AXIS],position[Y_AXIS],position[Z_AXIS],position[A_AXIS],position[C_AXIS]);
		#endif

		update_motion_buffer(position,current_position,feedrate);
  40088a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40088c:	a906      	add	r1, sp, #24
  40088e:	4620      	mov	r0, r4
  400890:	4b2c      	ldr	r3, [pc, #176]	; (400944 <add_arc_motion+0x314>)
  400892:	4798      	blx	r3
		memcpy(current_position,position,N_AXIS*sizeof(float));
  400894:	f10d 0e18 	add.w	lr, sp, #24
  400898:	6820      	ldr	r0, [r4, #0]
  40089a:	6861      	ldr	r1, [r4, #4]
  40089c:	68a2      	ldr	r2, [r4, #8]
  40089e:	68e3      	ldr	r3, [r4, #12]
  4008a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4008a4:	6920      	ldr	r0, [r4, #16]
  4008a6:	f8ce 0000 	str.w	r0, [lr]
  4008aa:	f109 0901 	add.w	r9, r9, #1
	for(i=1;i<segments;i++){
  4008ae:	fa1f f389 	uxth.w	r3, r9
  4008b2:	4553      	cmp	r3, sl
  4008b4:	d210      	bcs.n	4008d8 <add_arc_motion+0x2a8>
		if (count<ERROR_CORRECTION_COUNT){
  4008b6:	2e04      	cmp	r6, #4
  4008b8:	d89e      	bhi.n	4007f8 <add_arc_motion+0x1c8>
			r_axis_temp = r_axis0*sin_T + r_axis1*cos_T;
  4008ba:	ee2a 7a8c 	vmul.f32	s14, s21, s24
  4008be:	ee69 7a08 	vmul.f32	s15, s18, s16
			r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
  4008c2:	ee29 ca0c 	vmul.f32	s24, s18, s24
  4008c6:	ee2a 8a88 	vmul.f32	s16, s21, s16
  4008ca:	ee3c ca48 	vsub.f32	s24, s24, s16
			count++;
  4008ce:	3601      	adds	r6, #1
  4008d0:	b2f6      	uxtb	r6, r6
			r_axis1 = r_axis_temp;
  4008d2:	ee37 8a27 	vadd.f32	s16, s14, s15
  4008d6:	e7bc      	b.n	400852 <add_arc_motion+0x222>
	}
	
	/*make sure final position is at target*/
	memcpy(position,absolute_target,N_AXIS*sizeof(float));
  4008d8:	ad0b      	add	r5, sp, #44	; 0x2c
  4008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4008dc:	6020      	str	r0, [r4, #0]
  4008de:	6061      	str	r1, [r4, #4]
  4008e0:	60a2      	str	r2, [r4, #8]
  4008e2:	60e3      	str	r3, [r4, #12]
  4008e4:	6828      	ldr	r0, [r5, #0]
  4008e6:	6120      	str	r0, [r4, #16]
	#if DEBUG
		printf("Current Position: %f %f %f %f %f\n",current_position[X_AXIS],current_position[Y_AXIS],current_position[Z_AXIS],current_position[A_AXIS],current_position[C_AXIS]);
		printf("Next Position: %f %f %f %f %f\n",position[X_AXIS],position[Y_AXIS],position[Z_AXIS],position[A_AXIS],position[C_AXIS]);
	#endif
	update_motion_buffer(absolute_target,current_position,feedrate);
  4008e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4008ea:	a906      	add	r1, sp, #24
  4008ec:	a80b      	add	r0, sp, #44	; 0x2c
  4008ee:	4b15      	ldr	r3, [pc, #84]	; (400944 <add_arc_motion+0x314>)
  4008f0:	4798      	blx	r3
}
  4008f2:	b011      	add	sp, #68	; 0x44
  4008f4:	ecbd 8b0a 	vpop	{d8-d12}
  4008f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008fc:	f3af 8000 	nop.w
  400900:	bc6a7efa 	.word	0xbc6a7efa
  400904:	3fb89374 	.word	0x3fb89374
  400908:	1616cadf 	.word	0x1616cadf
  40090c:	401921f6 	.word	0x401921f6
  400910:	0040bbdd 	.word	0x0040bbdd
  400914:	00405cbd 	.word	0x00405cbd
  400918:	0040c275 	.word	0x0040c275
  40091c:	0040bed9 	.word	0x0040bed9
  400920:	004059f1 	.word	0x004059f1
  400924:	0040c235 	.word	0x0040c235
  400928:	40100000 	.word	0x40100000
  40092c:	0040bc85 	.word	0x0040bc85
  400930:	40180000 	.word	0x40180000
  400934:	0040b91d 	.word	0x0040b91d
  400938:	0040b921 	.word	0x0040b921
  40093c:	00405b11 	.word	0x00405b11
  400940:	00405c35 	.word	0x00405c35
  400944:	00400459 	.word	0x00400459

00400948 <parser_init>:

parser_input_t parser_input;
parser_state_t parser_state;

void parser_init()
{
  400948:	b538      	push	{r3, r4, r5, lr}
	// Initialize the parser with default parameters. 
    memset(&parser_state,0,sizeof(parser_state_t));
  40094a:	4c0a      	ldr	r4, [pc, #40]	; (400974 <parser_init+0x2c>)
  40094c:	2228      	movs	r2, #40	; 0x28
  40094e:	2100      	movs	r1, #0
  400950:	4620      	mov	r0, r4
  400952:	4d09      	ldr	r5, [pc, #36]	; (400978 <parser_init+0x30>)
  400954:	47a8      	blx	r5
	memset(&parser_input,0,sizeof(parser_input_t));
  400956:	2230      	movs	r2, #48	; 0x30
  400958:	2100      	movs	r1, #0
  40095a:	4808      	ldr	r0, [pc, #32]	; (40097c <parser_init+0x34>)
  40095c:	47a8      	blx	r5
	
    parser_state.plane[0] = X_AXIS;
    parser_state.plane[1] = Y_AXIS; // Default XY Plane
  40095e:	2301      	movs	r3, #1
  400960:	7663      	strb	r3, [r4, #25]
    parser_state.axis_linear = Z_AXIS; 
  400962:	2302      	movs	r3, #2
  400964:	76a3      	strb	r3, [r4, #26]
	
	parser_state.multiplier = 1;
  400966:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  40096a:	61e3      	str	r3, [r4, #28]
	parser_state.abs_or_inc = ABS_MODE;
	parser_state.feedrate = 500;
  40096c:	4b04      	ldr	r3, [pc, #16]	; (400980 <parser_init+0x38>)
  40096e:	6023      	str	r3, [r4, #0]
  400970:	bd38      	pop	{r3, r4, r5, pc}
  400972:	bf00      	nop
  400974:	2043079c 	.word	0x2043079c
  400978:	00407847 	.word	0x00407847
  40097c:	2043076c 	.word	0x2043076c
  400980:	43fa0000 	.word	0x43fa0000

00400984 <set_cord_to_zero>:
	}
}

void set_cord_to_zero(uint axis)
{
	parser_state.position[axis] = 0.0;
  400984:	4b02      	ldr	r3, [pc, #8]	; (400990 <set_cord_to_zero+0xc>)
  400986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40098a:	2300      	movs	r3, #0
  40098c:	6043      	str	r3, [r0, #4]
  40098e:	4770      	bx	lr
  400990:	2043079c 	.word	0x2043079c

00400994 <get_float_after_letter>:
	return;
}

float get_float_after_letter(char * str,uint8_t *char_counter)
{
  400994:	b530      	push	{r4, r5, lr}
  400996:	b085      	sub	sp, #20
	char float_str[9] = {0};
  400998:	2300      	movs	r3, #0
  40099a:	9301      	str	r3, [sp, #4]
  40099c:	9302      	str	r3, [sp, #8]
  40099e:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t float_ctr = 0;
	
	while(str[*char_counter]!=' '&&str[*char_counter]!=0){
  4009a2:	780d      	ldrb	r5, [r1, #0]
  4009a4:	5d42      	ldrb	r2, [r0, r5]
  4009a6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
  4009aa:	d00c      	beq.n	4009c6 <get_float_after_letter+0x32>
		float_str[float_ctr] = str[*char_counter];
  4009ac:	ac04      	add	r4, sp, #16
  4009ae:	441c      	add	r4, r3
  4009b0:	f804 2c0c 	strb.w	r2, [r4, #-12]
		float_ctr++;
  4009b4:	3301      	adds	r3, #1
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	195a      	adds	r2, r3, r5
  4009ba:	b2d2      	uxtb	r2, r2
		*char_counter = *char_counter + 1;
  4009bc:	700a      	strb	r2, [r1, #0]
	while(str[*char_counter]!=' '&&str[*char_counter]!=0){
  4009be:	5c82      	ldrb	r2, [r0, r2]
  4009c0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
  4009c4:	d1f2      	bne.n	4009ac <get_float_after_letter+0x18>
	}
	
	return atof(float_str);
  4009c6:	a801      	add	r0, sp, #4
  4009c8:	4b02      	ldr	r3, [pc, #8]	; (4009d4 <get_float_after_letter+0x40>)
  4009ca:	4798      	blx	r3
  4009cc:	4b02      	ldr	r3, [pc, #8]	; (4009d8 <get_float_after_letter+0x44>)
  4009ce:	4798      	blx	r3
}
  4009d0:	b005      	add	sp, #20
  4009d2:	bd30      	pop	{r4, r5, pc}
  4009d4:	0040749d 	.word	0x0040749d
  4009d8:	0040c275 	.word	0x0040c275

004009dc <parse_line>:
{
  4009dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4009e0:	ed2d 8b02 	vpush	{d8}
  4009e4:	b095      	sub	sp, #84	; 0x54
  4009e6:	4604      	mov	r4, r0
	char_counter = 1;
  4009e8:	a914      	add	r1, sp, #80	; 0x50
  4009ea:	2301      	movs	r3, #1
  4009ec:	f801 3d01 	strb.w	r3, [r1, #-1]!
	command = (int)get_float_after_letter(line,&char_counter);
  4009f0:	4bb8      	ldr	r3, [pc, #736]	; (400cd4 <parse_line+0x2f8>)
  4009f2:	4798      	blx	r3
  4009f4:	ee07 0a90 	vmov	s15, r0
  4009f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4009fc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
  400a00:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
	char_counter = 0;
  400a04:	2300      	movs	r3, #0
  400a06:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
	if(line[0] == ';')
  400a0a:	7823      	ldrb	r3, [r4, #0]
  400a0c:	2b3b      	cmp	r3, #59	; 0x3b
  400a0e:	d00b      	beq.n	400a28 <parse_line+0x4c>
	else if(line[0] =='G')
  400a10:	2b47      	cmp	r3, #71	; 0x47
  400a12:	d00e      	beq.n	400a32 <parse_line+0x56>
	else if(line[0] =='M')
  400a14:	2b4d      	cmp	r3, #77	; 0x4d
  400a16:	d013      	beq.n	400a40 <parse_line+0x64>
	else if(line[0] =='$')
  400a18:	2b24      	cmp	r3, #36	; 0x24
  400a1a:	d014      	beq.n	400a46 <parse_line+0x6a>
	else if(line[0] =='*')
  400a1c:	2b2a      	cmp	r3, #42	; 0x2a
  400a1e:	d016      	beq.n	400a4e <parse_line+0x72>
		printf("ERROR: Not a G or M Command\n%s \n",line); 
  400a20:	4621      	mov	r1, r4
  400a22:	48ad      	ldr	r0, [pc, #692]	; (400cd8 <parse_line+0x2fc>)
  400a24:	4bad      	ldr	r3, [pc, #692]	; (400cdc <parse_line+0x300>)
  400a26:	4798      	blx	r3
}
  400a28:	b015      	add	sp, #84	; 0x54
  400a2a:	ecbd 8b02 	vpop	{d8}
  400a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		is_G_or_M_code = GCODE;
  400a32:	f04f 0800 	mov.w	r8, #0
  400a36:	2501      	movs	r5, #1
				parser_input.s = get_float_after_letter(line,&char_counter);
  400a38:	4ea6      	ldr	r6, [pc, #664]	; (400cd4 <parse_line+0x2f8>)
				if(parser_input.feedrate < MAX_FEEDRATE)
  400a3a:	eddf 8aa9 	vldr	s17, [pc, #676]	; 400ce0 <parse_line+0x304>
  400a3e:	e0e0      	b.n	400c02 <parse_line+0x226>
		is_G_or_M_code = MCODE;
  400a40:	f04f 0801 	mov.w	r8, #1
  400a44:	e7f7      	b.n	400a36 <parse_line+0x5a>
		execute_from_sd_card(command);
  400a46:	4638      	mov	r0, r7
  400a48:	4ba6      	ldr	r3, [pc, #664]	; (400ce4 <parse_line+0x308>)
  400a4a:	4798      	blx	r3
		return;
  400a4c:	e7ec      	b.n	400a28 <parse_line+0x4c>
		printf("State:\nPosition: X%f Y%f Z%f A%f C%f\nPlane: %d %d\nVertical: %d",parser_state.position[0],parser_state.position[1],parser_state.position[2],parser_state.position[3],parser_state.position[4],parser_state.plane[0],parser_state.plane[1],parser_state.axis_linear);
  400a4e:	4ca6      	ldr	r4, [pc, #664]	; (400ce8 <parse_line+0x30c>)
  400a50:	4da6      	ldr	r5, [pc, #664]	; (400cec <parse_line+0x310>)
  400a52:	6860      	ldr	r0, [r4, #4]
  400a54:	47a8      	blx	r5
  400a56:	4606      	mov	r6, r0
  400a58:	460f      	mov	r7, r1
  400a5a:	7ea3      	ldrb	r3, [r4, #26]
  400a5c:	930a      	str	r3, [sp, #40]	; 0x28
  400a5e:	7e63      	ldrb	r3, [r4, #25]
  400a60:	9309      	str	r3, [sp, #36]	; 0x24
  400a62:	7e23      	ldrb	r3, [r4, #24]
  400a64:	9308      	str	r3, [sp, #32]
  400a66:	6960      	ldr	r0, [r4, #20]
  400a68:	47a8      	blx	r5
  400a6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  400a6e:	6920      	ldr	r0, [r4, #16]
  400a70:	47a8      	blx	r5
  400a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400a76:	68e0      	ldr	r0, [r4, #12]
  400a78:	47a8      	blx	r5
  400a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a7e:	68a0      	ldr	r0, [r4, #8]
  400a80:	47a8      	blx	r5
  400a82:	e9cd 0100 	strd	r0, r1, [sp]
  400a86:	4632      	mov	r2, r6
  400a88:	463b      	mov	r3, r7
  400a8a:	4899      	ldr	r0, [pc, #612]	; (400cf0 <parse_line+0x314>)
  400a8c:	4e93      	ldr	r6, [pc, #588]	; (400cdc <parse_line+0x300>)
  400a8e:	47b0      	blx	r6
		printf("\n Feedrate: %.2f", parser_state.feedrate);
  400a90:	6820      	ldr	r0, [r4, #0]
  400a92:	47a8      	blx	r5
  400a94:	4602      	mov	r2, r0
  400a96:	460b      	mov	r3, r1
  400a98:	4896      	ldr	r0, [pc, #600]	; (400cf4 <parse_line+0x318>)
  400a9a:	47b0      	blx	r6
		if(parser_state.multiplier == 1)
  400a9c:	ed94 7a07 	vldr	s14, [r4, #28]
  400aa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400aa4:	eeb4 7a67 	vcmp.f32	s14, s15
  400aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aac:	d109      	bne.n	400ac2 <parse_line+0xe6>
			printf("\n Millimeter Mode");
  400aae:	4892      	ldr	r0, [pc, #584]	; (400cf8 <parse_line+0x31c>)
  400ab0:	47b0      	blx	r6
		if(parser_state.abs_or_inc == ABS_MODE)
  400ab2:	4b8d      	ldr	r3, [pc, #564]	; (400ce8 <parse_line+0x30c>)
  400ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
  400ab8:	b93b      	cbnz	r3, 400aca <parse_line+0xee>
			printf("\n Absolute Mode");
  400aba:	4890      	ldr	r0, [pc, #576]	; (400cfc <parse_line+0x320>)
  400abc:	4b87      	ldr	r3, [pc, #540]	; (400cdc <parse_line+0x300>)
  400abe:	4798      	blx	r3
  400ac0:	e7b2      	b.n	400a28 <parse_line+0x4c>
			printf("\n Inches Mode");
  400ac2:	488f      	ldr	r0, [pc, #572]	; (400d00 <parse_line+0x324>)
  400ac4:	4b85      	ldr	r3, [pc, #532]	; (400cdc <parse_line+0x300>)
  400ac6:	4798      	blx	r3
  400ac8:	e7f3      	b.n	400ab2 <parse_line+0xd6>
			printf("\n Incremental Mode \n");
  400aca:	488e      	ldr	r0, [pc, #568]	; (400d04 <parse_line+0x328>)
  400acc:	4b8e      	ldr	r3, [pc, #568]	; (400d08 <parse_line+0x32c>)
  400ace:	4798      	blx	r3
  400ad0:	e7aa      	b.n	400a28 <parse_line+0x4c>
                char_counter++;
  400ad2:	3302      	adds	r3, #2
  400ad4:	a914      	add	r1, sp, #80	; 0x50
  400ad6:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.xyzac[X_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400ada:	f8df 920c 	ldr.w	r9, [pc, #524]	; 400ce8 <parse_line+0x30c>
  400ade:	ed99 8a07 	vldr	s16, [r9, #28]
  400ae2:	4620      	mov	r0, r4
  400ae4:	47b0      	blx	r6
  400ae6:	ee07 0a90 	vmov	s15, r0
  400aea:	ee68 7a27 	vmul.f32	s15, s16, s15
  400aee:	4b87      	ldr	r3, [pc, #540]	; (400d0c <parse_line+0x330>)
  400af0:	edc3 7a04 	vstr	s15, [r3, #16]
				if(parser_state.abs_or_inc == INC_MODE) parser_input.xyzac[X_AXIS] = parser_state.position[X_AXIS] + parser_input.xyzac[X_AXIS];
  400af4:	f899 3020 	ldrb.w	r3, [r9, #32]
  400af8:	2b01      	cmp	r3, #1
  400afa:	f040 8082 	bne.w	400c02 <parse_line+0x226>
  400afe:	ed99 7a01 	vldr	s14, [r9, #4]
  400b02:	ee77 7a27 	vadd.f32	s15, s14, s15
  400b06:	4b81      	ldr	r3, [pc, #516]	; (400d0c <parse_line+0x330>)
  400b08:	edc3 7a04 	vstr	s15, [r3, #16]
  400b0c:	e079      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400b0e:	3302      	adds	r3, #2
  400b10:	a914      	add	r1, sp, #80	; 0x50
  400b12:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.xyzac[Y_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400b16:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 400ce8 <parse_line+0x30c>
  400b1a:	ed99 8a07 	vldr	s16, [r9, #28]
  400b1e:	4620      	mov	r0, r4
  400b20:	47b0      	blx	r6
  400b22:	ee07 0a90 	vmov	s15, r0
  400b26:	ee68 7a27 	vmul.f32	s15, s16, s15
  400b2a:	4b78      	ldr	r3, [pc, #480]	; (400d0c <parse_line+0x330>)
  400b2c:	edc3 7a05 	vstr	s15, [r3, #20]
				if(parser_state.abs_or_inc == INC_MODE) parser_input.xyzac[Y_AXIS] = parser_state.position[Y_AXIS] + parser_input.xyzac[Y_AXIS];
  400b30:	f899 3020 	ldrb.w	r3, [r9, #32]
  400b34:	2b01      	cmp	r3, #1
  400b36:	d164      	bne.n	400c02 <parse_line+0x226>
  400b38:	ed99 7a02 	vldr	s14, [r9, #8]
  400b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
  400b40:	4b72      	ldr	r3, [pc, #456]	; (400d0c <parse_line+0x330>)
  400b42:	edc3 7a05 	vstr	s15, [r3, #20]
  400b46:	e05c      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400b48:	3302      	adds	r3, #2
  400b4a:	a914      	add	r1, sp, #80	; 0x50
  400b4c:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.xyzac[Z_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400b50:	f8df 9194 	ldr.w	r9, [pc, #404]	; 400ce8 <parse_line+0x30c>
  400b54:	ed99 8a07 	vldr	s16, [r9, #28]
  400b58:	4620      	mov	r0, r4
  400b5a:	47b0      	blx	r6
  400b5c:	ee07 0a90 	vmov	s15, r0
  400b60:	ee68 7a27 	vmul.f32	s15, s16, s15
  400b64:	4b69      	ldr	r3, [pc, #420]	; (400d0c <parse_line+0x330>)
  400b66:	edc3 7a06 	vstr	s15, [r3, #24]
				if(parser_state.abs_or_inc == INC_MODE) parser_input.xyzac[Z_AXIS] = parser_state.position[Z_AXIS] + parser_input.xyzac[Z_AXIS];
  400b6a:	f899 3020 	ldrb.w	r3, [r9, #32]
  400b6e:	2b01      	cmp	r3, #1
  400b70:	d147      	bne.n	400c02 <parse_line+0x226>
  400b72:	ed99 7a03 	vldr	s14, [r9, #12]
  400b76:	ee77 7a27 	vadd.f32	s15, s14, s15
  400b7a:	4b64      	ldr	r3, [pc, #400]	; (400d0c <parse_line+0x330>)
  400b7c:	edc3 7a06 	vstr	s15, [r3, #24]
  400b80:	e03f      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400b82:	3302      	adds	r3, #2
  400b84:	a914      	add	r1, sp, #80	; 0x50
  400b86:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.xyzac[A_AXIS] = get_float_after_letter(line,&char_counter);
  400b8a:	4620      	mov	r0, r4
  400b8c:	47b0      	blx	r6
  400b8e:	ee07 0a90 	vmov	s15, r0
  400b92:	4b5e      	ldr	r3, [pc, #376]	; (400d0c <parse_line+0x330>)
  400b94:	61d8      	str	r0, [r3, #28]
				if(parser_state.abs_or_inc == INC_MODE) parser_input.xyzac[A_AXIS] = parser_state.position[A_AXIS] + parser_input.xyzac[A_AXIS];
  400b96:	4b54      	ldr	r3, [pc, #336]	; (400ce8 <parse_line+0x30c>)
  400b98:	f893 3020 	ldrb.w	r3, [r3, #32]
  400b9c:	2b01      	cmp	r3, #1
  400b9e:	d130      	bne.n	400c02 <parse_line+0x226>
  400ba0:	4b51      	ldr	r3, [pc, #324]	; (400ce8 <parse_line+0x30c>)
  400ba2:	ed93 7a04 	vldr	s14, [r3, #16]
  400ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
  400baa:	4b58      	ldr	r3, [pc, #352]	; (400d0c <parse_line+0x330>)
  400bac:	edc3 7a07 	vstr	s15, [r3, #28]
  400bb0:	e027      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400bb2:	3302      	adds	r3, #2
  400bb4:	a914      	add	r1, sp, #80	; 0x50
  400bb6:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.xyzac[C_AXIS] = get_float_after_letter(line,&char_counter);
  400bba:	4620      	mov	r0, r4
  400bbc:	47b0      	blx	r6
  400bbe:	ee07 0a90 	vmov	s15, r0
  400bc2:	4b52      	ldr	r3, [pc, #328]	; (400d0c <parse_line+0x330>)
  400bc4:	6218      	str	r0, [r3, #32]
				if(parser_state.abs_or_inc == INC_MODE) parser_input.xyzac[C_AXIS] = parser_state.position[C_AXIS] + parser_input.xyzac[C_AXIS];
  400bc6:	4b48      	ldr	r3, [pc, #288]	; (400ce8 <parse_line+0x30c>)
  400bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
  400bcc:	2b01      	cmp	r3, #1
  400bce:	d118      	bne.n	400c02 <parse_line+0x226>
  400bd0:	4b45      	ldr	r3, [pc, #276]	; (400ce8 <parse_line+0x30c>)
  400bd2:	ed93 7a05 	vldr	s14, [r3, #20]
  400bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
  400bda:	4b4c      	ldr	r3, [pc, #304]	; (400d0c <parse_line+0x330>)
  400bdc:	edc3 7a08 	vstr	s15, [r3, #32]
  400be0:	e00f      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400be2:	3302      	adds	r3, #2
  400be4:	a914      	add	r1, sp, #80	; 0x50
  400be6:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.ijk[X_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400bea:	4b3f      	ldr	r3, [pc, #252]	; (400ce8 <parse_line+0x30c>)
  400bec:	ed93 8a07 	vldr	s16, [r3, #28]
  400bf0:	4620      	mov	r0, r4
  400bf2:	47b0      	blx	r6
  400bf4:	ee07 0a90 	vmov	s15, r0
  400bf8:	ee28 8a27 	vmul.f32	s16, s16, s15
  400bfc:	4b43      	ldr	r3, [pc, #268]	; (400d0c <parse_line+0x330>)
  400bfe:	ed83 8a01 	vstr	s16, [r3, #4]
  400c02:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
		is_G_or_M_code = MCODE;
  400c06:	2000      	movs	r0, #0
    while(line[char_counter] != 0)				
  400c08:	5ce2      	ldrb	r2, [r4, r3]
  400c0a:	2a00      	cmp	r2, #0
  400c0c:	f000 80b9 	beq.w	400d82 <parse_line+0x3a6>
        char_counter++;
  400c10:	1c59      	adds	r1, r3, #1
  400c12:	b2c9      	uxtb	r1, r1
        letter = line[char_counter];
  400c14:	5c62      	ldrb	r2, [r4, r1]
  400c16:	4628      	mov	r0, r5
        switch(letter)
  400c18:	3a41      	subs	r2, #65	; 0x41
  400c1a:	2a19      	cmp	r2, #25
  400c1c:	f200 80af 	bhi.w	400d7e <parse_line+0x3a2>
  400c20:	f20f 0e04 	addw	lr, pc, #4
  400c24:	f85e f022 	ldr.w	pc, [lr, r2, lsl #2]
  400c28:	00400b83 	.word	0x00400b83
  400c2c:	00400d7f 	.word	0x00400d7f
  400c30:	00400bb3 	.word	0x00400bb3
  400c34:	00400d7f 	.word	0x00400d7f
  400c38:	00400d7f 	.word	0x00400d7f
  400c3c:	00400d11 	.word	0x00400d11
  400c40:	00400d7f 	.word	0x00400d7f
  400c44:	00400d7f 	.word	0x00400d7f
  400c48:	00400be3 	.word	0x00400be3
  400c4c:	00400c91 	.word	0x00400c91
  400c50:	00400cb3 	.word	0x00400cb3
  400c54:	00400d7f 	.word	0x00400d7f
  400c58:	00400d7f 	.word	0x00400d7f
  400c5c:	00400d7f 	.word	0x00400d7f
  400c60:	00400d7f 	.word	0x00400d7f
  400c64:	00400d47 	.word	0x00400d47
  400c68:	00400d7f 	.word	0x00400d7f
  400c6c:	00400d7f 	.word	0x00400d7f
  400c70:	00400d63 	.word	0x00400d63
  400c74:	00400d7f 	.word	0x00400d7f
  400c78:	00400d7f 	.word	0x00400d7f
  400c7c:	00400d7f 	.word	0x00400d7f
  400c80:	00400d7f 	.word	0x00400d7f
  400c84:	00400ad3 	.word	0x00400ad3
  400c88:	00400b0f 	.word	0x00400b0f
  400c8c:	00400b49 	.word	0x00400b49
                char_counter++;
  400c90:	3302      	adds	r3, #2
  400c92:	a914      	add	r1, sp, #80	; 0x50
  400c94:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.ijk[Y_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400c98:	4b13      	ldr	r3, [pc, #76]	; (400ce8 <parse_line+0x30c>)
  400c9a:	ed93 8a07 	vldr	s16, [r3, #28]
  400c9e:	4620      	mov	r0, r4
  400ca0:	47b0      	blx	r6
  400ca2:	ee07 0a90 	vmov	s15, r0
  400ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
  400caa:	4b18      	ldr	r3, [pc, #96]	; (400d0c <parse_line+0x330>)
  400cac:	ed83 8a02 	vstr	s16, [r3, #8]
				break;
  400cb0:	e7a7      	b.n	400c02 <parse_line+0x226>
                char_counter++;
  400cb2:	3302      	adds	r3, #2
  400cb4:	a914      	add	r1, sp, #80	; 0x50
  400cb6:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.ijk[Z_AXIS] = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400cba:	4b0b      	ldr	r3, [pc, #44]	; (400ce8 <parse_line+0x30c>)
  400cbc:	ed93 8a07 	vldr	s16, [r3, #28]
  400cc0:	4620      	mov	r0, r4
  400cc2:	47b0      	blx	r6
  400cc4:	ee07 0a90 	vmov	s15, r0
  400cc8:	ee28 8a27 	vmul.f32	s16, s16, s15
  400ccc:	4b0f      	ldr	r3, [pc, #60]	; (400d0c <parse_line+0x330>)
  400cce:	ed83 8a03 	vstr	s16, [r3, #12]
				break;
  400cd2:	e796      	b.n	400c02 <parse_line+0x226>
  400cd4:	00400995 	.word	0x00400995
  400cd8:	0040c510 	.word	0x0040c510
  400cdc:	004081d5 	.word	0x004081d5
  400ce0:	448fc000 	.word	0x448fc000
  400ce4:	004001f9 	.word	0x004001f9
  400ce8:	2043079c 	.word	0x2043079c
  400cec:	0040bbdd 	.word	0x0040bbdd
  400cf0:	0040c474 	.word	0x0040c474
  400cf4:	0040c4b4 	.word	0x0040c4b4
  400cf8:	0040c4c8 	.word	0x0040c4c8
  400cfc:	0040c4ec 	.word	0x0040c4ec
  400d00:	0040c4dc 	.word	0x0040c4dc
  400d04:	0040c4fc 	.word	0x0040c4fc
  400d08:	004082bd 	.word	0x004082bd
  400d0c:	2043076c 	.word	0x2043076c
                char_counter++;
  400d10:	3302      	adds	r3, #2
  400d12:	a914      	add	r1, sp, #80	; 0x50
  400d14:	f801 3d01 	strb.w	r3, [r1, #-1]!
                parser_input.feedrate = parser_state.multiplier * get_float_after_letter(line,&char_counter);
  400d18:	4bc7      	ldr	r3, [pc, #796]	; (401038 <parse_line+0x65c>)
  400d1a:	ed93 8a07 	vldr	s16, [r3, #28]
  400d1e:	4620      	mov	r0, r4
  400d20:	47b0      	blx	r6
  400d22:	ee07 0a90 	vmov	s15, r0
  400d26:	ee68 7a27 	vmul.f32	s15, s16, s15
  400d2a:	4bc4      	ldr	r3, [pc, #784]	; (40103c <parse_line+0x660>)
  400d2c:	edc3 7a00 	vstr	s15, [r3]
				if(parser_input.feedrate < MAX_FEEDRATE)
  400d30:	eef4 7ae8 	vcmpe.f32	s15, s17
  400d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					parser_state.feedrate = parser_input.feedrate;
  400d38:	4bbf      	ldr	r3, [pc, #764]	; (401038 <parse_line+0x65c>)
  400d3a:	bf4c      	ite	mi
  400d3c:	edc3 7a00 	vstrmi	s15, [r3]
					parser_state.feedrate = MAX_FEEDRATE;
  400d40:	edc3 8a00 	vstrpl	s17, [r3]
  400d44:	e75d      	b.n	400c02 <parse_line+0x226>
				char_counter++;
  400d46:	3302      	adds	r3, #2
  400d48:	a914      	add	r1, sp, #80	; 0x50
  400d4a:	f801 3d01 	strb.w	r3, [r1, #-1]!
				parser_input.p = get_float_after_letter(line,&char_counter);
  400d4e:	4620      	mov	r0, r4
  400d50:	47b0      	blx	r6
  400d52:	ee07 0a90 	vmov	s15, r0
  400d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400d5a:	4bb8      	ldr	r3, [pc, #736]	; (40103c <parse_line+0x660>)
  400d5c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				break;
  400d60:	e74f      	b.n	400c02 <parse_line+0x226>
				char_counter++;
  400d62:	3302      	adds	r3, #2
  400d64:	a914      	add	r1, sp, #80	; 0x50
  400d66:	f801 3d01 	strb.w	r3, [r1, #-1]!
				parser_input.s = get_float_after_letter(line,&char_counter);
  400d6a:	4620      	mov	r0, r4
  400d6c:	47b0      	blx	r6
  400d6e:	ee07 0a90 	vmov	s15, r0
  400d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  400d76:	4bb1      	ldr	r3, [pc, #708]	; (40103c <parse_line+0x660>)
  400d78:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				break;
  400d7c:	e741      	b.n	400c02 <parse_line+0x226>
        char_counter++;
  400d7e:	460b      	mov	r3, r1
  400d80:	e742      	b.n	400c08 <parse_line+0x22c>
  400d82:	2800      	cmp	r0, #0
  400d84:	f040 80c6 	bne.w	400f14 <parse_line+0x538>
    if (is_G_or_M_code == GCODE)
  400d88:	f1b8 0f00 	cmp.w	r8, #0
  400d8c:	f040 8179 	bne.w	401082 <parse_line+0x6a6>
		switch(command)
  400d90:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  400d94:	2b5c      	cmp	r3, #92	; 0x5c
  400d96:	f200 8170 	bhi.w	40107a <parse_line+0x69e>
  400d9a:	a201      	add	r2, pc, #4	; (adr r2, 400da0 <parse_line+0x3c4>)
  400d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400da0:	00400f1b 	.word	0x00400f1b
  400da4:	00400f33 	.word	0x00400f33
  400da8:	00400f4d 	.word	0x00400f4d
  400dac:	00400f89 	.word	0x00400f89
  400db0:	00400a29 	.word	0x00400a29
  400db4:	0040107b 	.word	0x0040107b
  400db8:	0040107b 	.word	0x0040107b
  400dbc:	0040107b 	.word	0x0040107b
  400dc0:	0040107b 	.word	0x0040107b
  400dc4:	0040107b 	.word	0x0040107b
  400dc8:	0040107b 	.word	0x0040107b
  400dcc:	0040107b 	.word	0x0040107b
  400dd0:	0040107b 	.word	0x0040107b
  400dd4:	0040107b 	.word	0x0040107b
  400dd8:	0040107b 	.word	0x0040107b
  400ddc:	0040107b 	.word	0x0040107b
  400de0:	0040107b 	.word	0x0040107b
  400de4:	00400fc5 	.word	0x00400fc5
  400de8:	00400fd5 	.word	0x00400fd5
  400dec:	00400fe5 	.word	0x00400fe5
  400df0:	00400ff5 	.word	0x00400ff5
  400df4:	00400ffd 	.word	0x00400ffd
  400df8:	0040107b 	.word	0x0040107b
  400dfc:	0040107b 	.word	0x0040107b
  400e00:	0040107b 	.word	0x0040107b
  400e04:	0040107b 	.word	0x0040107b
  400e08:	0040107b 	.word	0x0040107b
  400e0c:	0040107b 	.word	0x0040107b
  400e10:	00401007 	.word	0x00401007
  400e14:	0040107b 	.word	0x0040107b
  400e18:	0040107b 	.word	0x0040107b
  400e1c:	0040107b 	.word	0x0040107b
  400e20:	0040107b 	.word	0x0040107b
  400e24:	0040107b 	.word	0x0040107b
  400e28:	0040107b 	.word	0x0040107b
  400e2c:	0040107b 	.word	0x0040107b
  400e30:	0040107b 	.word	0x0040107b
  400e34:	0040107b 	.word	0x0040107b
  400e38:	0040107b 	.word	0x0040107b
  400e3c:	0040107b 	.word	0x0040107b
  400e40:	0040107b 	.word	0x0040107b
  400e44:	0040107b 	.word	0x0040107b
  400e48:	0040107b 	.word	0x0040107b
  400e4c:	0040107b 	.word	0x0040107b
  400e50:	0040107b 	.word	0x0040107b
  400e54:	0040107b 	.word	0x0040107b
  400e58:	0040107b 	.word	0x0040107b
  400e5c:	0040107b 	.word	0x0040107b
  400e60:	0040107b 	.word	0x0040107b
  400e64:	0040107b 	.word	0x0040107b
  400e68:	0040107b 	.word	0x0040107b
  400e6c:	0040107b 	.word	0x0040107b
  400e70:	0040107b 	.word	0x0040107b
  400e74:	0040107b 	.word	0x0040107b
  400e78:	0040107b 	.word	0x0040107b
  400e7c:	0040107b 	.word	0x0040107b
  400e80:	0040107b 	.word	0x0040107b
  400e84:	0040107b 	.word	0x0040107b
  400e88:	0040107b 	.word	0x0040107b
  400e8c:	0040107b 	.word	0x0040107b
  400e90:	0040107b 	.word	0x0040107b
  400e94:	0040107b 	.word	0x0040107b
  400e98:	0040107b 	.word	0x0040107b
  400e9c:	0040107b 	.word	0x0040107b
  400ea0:	0040107b 	.word	0x0040107b
  400ea4:	0040107b 	.word	0x0040107b
  400ea8:	0040107b 	.word	0x0040107b
  400eac:	0040107b 	.word	0x0040107b
  400eb0:	0040107b 	.word	0x0040107b
  400eb4:	0040107b 	.word	0x0040107b
  400eb8:	0040107b 	.word	0x0040107b
  400ebc:	0040107b 	.word	0x0040107b
  400ec0:	0040107b 	.word	0x0040107b
  400ec4:	0040107b 	.word	0x0040107b
  400ec8:	0040107b 	.word	0x0040107b
  400ecc:	0040107b 	.word	0x0040107b
  400ed0:	0040107b 	.word	0x0040107b
  400ed4:	0040107b 	.word	0x0040107b
  400ed8:	0040107b 	.word	0x0040107b
  400edc:	0040107b 	.word	0x0040107b
  400ee0:	0040107b 	.word	0x0040107b
  400ee4:	0040107b 	.word	0x0040107b
  400ee8:	0040107b 	.word	0x0040107b
  400eec:	0040107b 	.word	0x0040107b
  400ef0:	0040107b 	.word	0x0040107b
  400ef4:	0040107b 	.word	0x0040107b
  400ef8:	0040107b 	.word	0x0040107b
  400efc:	0040107b 	.word	0x0040107b
  400f00:	0040107b 	.word	0x0040107b
  400f04:	0040107b 	.word	0x0040107b
  400f08:	00401023 	.word	0x00401023
  400f0c:	0040102d 	.word	0x0040102d
  400f10:	00401061 	.word	0x00401061
  400f14:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
  400f18:	e736      	b.n	400d88 <parse_line+0x3ac>
				add_linear_motion(parser_input.xyzac, parser_state.position,800);
  400f1a:	4c49      	ldr	r4, [pc, #292]	; (401040 <parse_line+0x664>)
  400f1c:	4d49      	ldr	r5, [pc, #292]	; (401044 <parse_line+0x668>)
  400f1e:	4a4a      	ldr	r2, [pc, #296]	; (401048 <parse_line+0x66c>)
  400f20:	4621      	mov	r1, r4
  400f22:	4628      	mov	r0, r5
  400f24:	4b49      	ldr	r3, [pc, #292]	; (40104c <parse_line+0x670>)
  400f26:	4798      	blx	r3
				memcpy(parser_state.position,parser_input.xyzac,N_AXIS*sizeof(float));
  400f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400f2c:	682b      	ldr	r3, [r5, #0]
  400f2e:	6023      	str	r3, [r4, #0]
				break;
  400f30:	e57a      	b.n	400a28 <parse_line+0x4c>
				add_linear_motion(parser_input.xyzac, parser_state.position,parser_state.feedrate);
  400f32:	4c41      	ldr	r4, [pc, #260]	; (401038 <parse_line+0x65c>)
  400f34:	4d43      	ldr	r5, [pc, #268]	; (401044 <parse_line+0x668>)
  400f36:	f854 2b04 	ldr.w	r2, [r4], #4
  400f3a:	4621      	mov	r1, r4
  400f3c:	4628      	mov	r0, r5
  400f3e:	4b43      	ldr	r3, [pc, #268]	; (40104c <parse_line+0x670>)
  400f40:	4798      	blx	r3
				memcpy(parser_state.position,parser_input.xyzac,N_AXIS*sizeof(float));
  400f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400f46:	682b      	ldr	r3, [r5, #0]
  400f48:	6023      	str	r3, [r4, #0]
				break;
  400f4a:	e56d      	b.n	400a28 <parse_line+0x4c>
  400f4c:	493d      	ldr	r1, [pc, #244]	; (401044 <parse_line+0x668>)
  400f4e:	4a3c      	ldr	r2, [pc, #240]	; (401040 <parse_line+0x664>)
  400f50:	ab0e      	add	r3, sp, #56	; 0x38
  400f52:	a813      	add	r0, sp, #76	; 0x4c
					input_relative[i] = parser_input.xyzac[i] - parser_state.position[i];
  400f54:	ecf1 7a01 	vldmia	r1!, {s15}
  400f58:	ecb2 7a01 	vldmia	r2!, {s14}
  400f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400f60:	ece3 7a01 	vstmia	r3!, {s15}
				for (i=0;i<N_AXIS;i++)
  400f64:	4283      	cmp	r3, r0
  400f66:	d1f5      	bne.n	400f54 <parse_line+0x578>
				add_arc_motion(parser_state.position,input_relative,parser_input.ijk,parser_state.plane[0],parser_state.plane[1],parser_state.axis_linear,1,parser_state.feedrate);
  400f68:	4833      	ldr	r0, [pc, #204]	; (401038 <parse_line+0x65c>)
  400f6a:	7e03      	ldrb	r3, [r0, #24]
  400f6c:	6802      	ldr	r2, [r0, #0]
  400f6e:	9203      	str	r2, [sp, #12]
  400f70:	2201      	movs	r2, #1
  400f72:	9202      	str	r2, [sp, #8]
  400f74:	7e82      	ldrb	r2, [r0, #26]
  400f76:	9201      	str	r2, [sp, #4]
  400f78:	7e42      	ldrb	r2, [r0, #25]
  400f7a:	9200      	str	r2, [sp, #0]
  400f7c:	4a34      	ldr	r2, [pc, #208]	; (401050 <parse_line+0x674>)
  400f7e:	a90e      	add	r1, sp, #56	; 0x38
  400f80:	3004      	adds	r0, #4
  400f82:	4c34      	ldr	r4, [pc, #208]	; (401054 <parse_line+0x678>)
  400f84:	47a0      	blx	r4
				break;
  400f86:	e54f      	b.n	400a28 <parse_line+0x4c>
  400f88:	492e      	ldr	r1, [pc, #184]	; (401044 <parse_line+0x668>)
  400f8a:	4a2d      	ldr	r2, [pc, #180]	; (401040 <parse_line+0x664>)
  400f8c:	ab0e      	add	r3, sp, #56	; 0x38
  400f8e:	a813      	add	r0, sp, #76	; 0x4c
					input_relative[i] = parser_input.xyzac[i] - parser_state.position[i];
  400f90:	ecf1 7a01 	vldmia	r1!, {s15}
  400f94:	ecb2 7a01 	vldmia	r2!, {s14}
  400f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
  400f9c:	ece3 7a01 	vstmia	r3!, {s15}
				for (i=0;i<N_AXIS;i++)
  400fa0:	4283      	cmp	r3, r0
  400fa2:	d1f5      	bne.n	400f90 <parse_line+0x5b4>
				add_arc_motion(parser_state.position,input_relative,parser_input.ijk,parser_state.plane[0],parser_state.plane[1],parser_state.axis_linear,0,parser_state.feedrate);
  400fa4:	4824      	ldr	r0, [pc, #144]	; (401038 <parse_line+0x65c>)
  400fa6:	7e03      	ldrb	r3, [r0, #24]
  400fa8:	6802      	ldr	r2, [r0, #0]
  400faa:	9203      	str	r2, [sp, #12]
  400fac:	2200      	movs	r2, #0
  400fae:	9202      	str	r2, [sp, #8]
  400fb0:	7e82      	ldrb	r2, [r0, #26]
  400fb2:	9201      	str	r2, [sp, #4]
  400fb4:	7e42      	ldrb	r2, [r0, #25]
  400fb6:	9200      	str	r2, [sp, #0]
  400fb8:	4a25      	ldr	r2, [pc, #148]	; (401050 <parse_line+0x674>)
  400fba:	a90e      	add	r1, sp, #56	; 0x38
  400fbc:	3004      	adds	r0, #4
  400fbe:	4c25      	ldr	r4, [pc, #148]	; (401054 <parse_line+0x678>)
  400fc0:	47a0      	blx	r4
				break;
  400fc2:	e531      	b.n	400a28 <parse_line+0x4c>
				parser_state.plane[0] = X_AXIS;
  400fc4:	4b1c      	ldr	r3, [pc, #112]	; (401038 <parse_line+0x65c>)
  400fc6:	2200      	movs	r2, #0
  400fc8:	761a      	strb	r2, [r3, #24]
				parser_state.plane[1] = Y_AXIS;
  400fca:	2201      	movs	r2, #1
  400fcc:	765a      	strb	r2, [r3, #25]
				parser_state.axis_linear = Z_AXIS;
  400fce:	2202      	movs	r2, #2
  400fd0:	769a      	strb	r2, [r3, #26]
				break;
  400fd2:	e529      	b.n	400a28 <parse_line+0x4c>
				parser_state.plane[0] = X_AXIS;
  400fd4:	4b18      	ldr	r3, [pc, #96]	; (401038 <parse_line+0x65c>)
  400fd6:	2200      	movs	r2, #0
  400fd8:	761a      	strb	r2, [r3, #24]
				parser_state.plane[1] = Z_AXIS;
  400fda:	2202      	movs	r2, #2
  400fdc:	765a      	strb	r2, [r3, #25]
				parser_state.axis_linear = Y_AXIS;
  400fde:	2201      	movs	r2, #1
  400fe0:	769a      	strb	r2, [r3, #26]
				break;
  400fe2:	e521      	b.n	400a28 <parse_line+0x4c>
				parser_state.plane[0] = Y_AXIS;
  400fe4:	4b14      	ldr	r3, [pc, #80]	; (401038 <parse_line+0x65c>)
  400fe6:	2201      	movs	r2, #1
  400fe8:	761a      	strb	r2, [r3, #24]
				parser_state.plane[1] = Z_AXIS;
  400fea:	2202      	movs	r2, #2
  400fec:	765a      	strb	r2, [r3, #25]
				parser_state.axis_linear = X_AXIS;
  400fee:	2200      	movs	r2, #0
  400ff0:	769a      	strb	r2, [r3, #26]
				break;
  400ff2:	e519      	b.n	400a28 <parse_line+0x4c>
				parser_state.multiplier = INCHES_PER_MM;
  400ff4:	4a18      	ldr	r2, [pc, #96]	; (401058 <parse_line+0x67c>)
  400ff6:	4b10      	ldr	r3, [pc, #64]	; (401038 <parse_line+0x65c>)
  400ff8:	61da      	str	r2, [r3, #28]
				break;
  400ffa:	e515      	b.n	400a28 <parse_line+0x4c>
				parser_state.multiplier = 1;
  400ffc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  401000:	4b0d      	ldr	r3, [pc, #52]	; (401038 <parse_line+0x65c>)
  401002:	61da      	str	r2, [r3, #28]
				break;
  401004:	e510      	b.n	400a28 <parse_line+0x4c>
				num1 = parser_state.abs_or_inc;
  401006:	4c0c      	ldr	r4, [pc, #48]	; (401038 <parse_line+0x65c>)
  401008:	f894 6020 	ldrb.w	r6, [r4, #32]
				num2 = parser_state.feedrate;
  40100c:	6825      	ldr	r5, [r4, #0]
				parser_state.abs_or_inc = ABS_MODE;
  40100e:	2300      	movs	r3, #0
  401010:	f884 3020 	strb.w	r3, [r4, #32]
				parse_line("G1 X0 Y0 Z0 A0 C0 F500");
  401014:	4811      	ldr	r0, [pc, #68]	; (40105c <parse_line+0x680>)
  401016:	f7ff fce1 	bl	4009dc <parse_line>
				parser_state.abs_or_inc = num1;
  40101a:	f884 6020 	strb.w	r6, [r4, #32]
				parser_state.feedrate = num2;
  40101e:	6025      	str	r5, [r4, #0]
				break;
  401020:	e502      	b.n	400a28 <parse_line+0x4c>
				parser_state.abs_or_inc = ABS_MODE;
  401022:	2200      	movs	r2, #0
  401024:	4b04      	ldr	r3, [pc, #16]	; (401038 <parse_line+0x65c>)
  401026:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  40102a:	e4fd      	b.n	400a28 <parse_line+0x4c>
				parser_state.abs_or_inc = INC_MODE;
  40102c:	2201      	movs	r2, #1
  40102e:	4b02      	ldr	r3, [pc, #8]	; (401038 <parse_line+0x65c>)
  401030:	f883 2020 	strb.w	r2, [r3, #32]
				break;	
  401034:	e4f8      	b.n	400a28 <parse_line+0x4c>
  401036:	bf00      	nop
  401038:	2043079c 	.word	0x2043079c
  40103c:	2043076c 	.word	0x2043076c
  401040:	204307a0 	.word	0x204307a0
  401044:	2043077c 	.word	0x2043077c
  401048:	44480000 	.word	0x44480000
  40104c:	00400625 	.word	0x00400625
  401050:	20430770 	.word	0x20430770
  401054:	00400631 	.word	0x00400631
  401058:	41cb3333 	.word	0x41cb3333
  40105c:	0040c534 	.word	0x0040c534
				memset(&parser_input,0,sizeof(parser_input_t));
  401060:	4c13      	ldr	r4, [pc, #76]	; (4010b0 <parse_line+0x6d4>)
  401062:	2230      	movs	r2, #48	; 0x30
  401064:	2100      	movs	r1, #0
  401066:	4620      	mov	r0, r4
  401068:	4b12      	ldr	r3, [pc, #72]	; (4010b4 <parse_line+0x6d8>)
  40106a:	4798      	blx	r3
				memcpy(parser_state.position,parser_input.xyzac,N_AXIS*sizeof(float));
  40106c:	4d12      	ldr	r5, [pc, #72]	; (4010b8 <parse_line+0x6dc>)
  40106e:	3410      	adds	r4, #16
  401070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401074:	6823      	ldr	r3, [r4, #0]
  401076:	602b      	str	r3, [r5, #0]
				break;
  401078:	e4d6      	b.n	400a28 <parse_line+0x4c>
				printf("This G-code not supported!\n");
  40107a:	4810      	ldr	r0, [pc, #64]	; (4010bc <parse_line+0x6e0>)
  40107c:	4b10      	ldr	r3, [pc, #64]	; (4010c0 <parse_line+0x6e4>)
  40107e:	4798      	blx	r3
				return;
  401080:	e4d2      	b.n	400a28 <parse_line+0x4c>
		switch(command)
  401082:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  401086:	3b03      	subs	r3, #3
  401088:	2b06      	cmp	r3, #6
  40108a:	d805      	bhi.n	401098 <parse_line+0x6bc>
  40108c:	e8df f003 	tbb	[pc, r3]
  401090:	04080808 	.word	0x04080808
  401094:	0808      	.short	0x0808
  401096:	08          	.byte	0x08
  401097:	00          	.byte	0x00
				printf("This code not supported!\n");
  401098:	480a      	ldr	r0, [pc, #40]	; (4010c4 <parse_line+0x6e8>)
  40109a:	4b09      	ldr	r3, [pc, #36]	; (4010c0 <parse_line+0x6e4>)
  40109c:	4798      	blx	r3
				return;
  40109e:	e4c3      	b.n	400a28 <parse_line+0x4c>
		add_M_block(command,parser_input.s,parser_input.p);
  4010a0:	4b03      	ldr	r3, [pc, #12]	; (4010b0 <parse_line+0x6d4>)
  4010a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  4010a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  4010a6:	4638      	mov	r0, r7
  4010a8:	4b07      	ldr	r3, [pc, #28]	; (4010c8 <parse_line+0x6ec>)
  4010aa:	4798      	blx	r3
		return;
  4010ac:	e4bc      	b.n	400a28 <parse_line+0x4c>
  4010ae:	bf00      	nop
  4010b0:	2043076c 	.word	0x2043076c
  4010b4:	00407847 	.word	0x00407847
  4010b8:	204307a0 	.word	0x204307a0
  4010bc:	0040c54c 	.word	0x0040c54c
  4010c0:	004082bd 	.word	0x004082bd
  4010c4:	0040c568 	.word	0x0040c568
  4010c8:	0040059d 	.word	0x0040059d

004010cc <spindle_init>:
	((Pio *)hw)->PIO_OER = mask;
  4010cc:	4b0b      	ldr	r3, [pc, #44]	; (4010fc <spindle_init+0x30>)
  4010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4010d2:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4010d4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4010d6:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4010d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4010e0:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4010e2:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4010e4:	6319      	str	r1, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4010e6:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4010e8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4010ea:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  4010ec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4010f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010f4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4010f6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4010f8:	631a      	str	r2, [r3, #48]	; 0x30
  4010fa:	4770      	bx	lr
  4010fc:	400e1200 	.word	0x400e1200

00401100 <run_M_code>:
	gpio_set_pin_level(M4, HIGH);
	
}

void run_M_code(uint8_t code, float speed, uint32_t parameter)
{
  401100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401102:	ed2d 8b02 	vpush	{d8}
	
	#if DEBUG_ISR
		printf("\n===-> M%d\n", code);
	#endif
	
	switch(code)
  401106:	2807      	cmp	r0, #7
  401108:	d043      	beq.n	401192 <run_M_code+0x92>
  40110a:	4615      	mov	r5, r2
  40110c:	ee08 1a10 	vmov	s16, r1
  401110:	d911      	bls.n	401136 <run_M_code+0x36>
  401112:	2809      	cmp	r0, #9
  401114:	d047      	beq.n	4011a6 <run_M_code+0xa6>
  401116:	d341      	bcc.n	40119c <run_M_code+0x9c>
  401118:	2864      	cmp	r0, #100	; 0x64
  40111a:	d137      	bne.n	40118c <run_M_code+0x8c>
		case 9:
			gpio_set_pin_level(MIST_COOLANT, HIGH);
			gpio_set_pin_level(FLOOD_COOLANT, HIGH);
			break;
		case 100:
			for(i = 0; i < parameter; i++)
  40111c:	2a00      	cmp	r2, #0
  40111e:	d035      	beq.n	40118c <run_M_code+0x8c>
  401120:	2400      	movs	r4, #0
			delay_us(1000);
  401122:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  401126:	4e25      	ldr	r6, [pc, #148]	; (4011bc <run_M_code+0xbc>)
  401128:	4638      	mov	r0, r7
  40112a:	47b0      	blx	r6
			for(i = 0; i < parameter; i++)
  40112c:	3401      	adds	r4, #1
  40112e:	b2e4      	uxtb	r4, r4
  401130:	42ac      	cmp	r4, r5
  401132:	d3f9      	bcc.n	401128 <run_M_code+0x28>
  401134:	e02a      	b.n	40118c <run_M_code+0x8c>
	switch(code)
  401136:	2803      	cmp	r0, #3
  401138:	d328      	bcc.n	40118c <run_M_code+0x8c>
  40113a:	2804      	cmp	r0, #4
  40113c:	d908      	bls.n	401150 <run_M_code+0x50>
  40113e:	2805      	cmp	r0, #5
  401140:	d124      	bne.n	40118c <run_M_code+0x8c>
	((Pio *)hw)->PIO_OER = mask;
  401142:	4b1f      	ldr	r3, [pc, #124]	; (4011c0 <run_M_code+0xc0>)
  401144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401148:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40114a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40114c:	631a      	str	r2, [r3, #48]	; 0x30
  40114e:	e01d      	b.n	40118c <run_M_code+0x8c>
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401150:	4b1b      	ldr	r3, [pc, #108]	; (4011c0 <run_M_code+0xc0>)
  401152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401158:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40115a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40115c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401160:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401166:	605a      	str	r2, [r3, #4]
			pwm_enable(&PWM_1);
  401168:	4c16      	ldr	r4, [pc, #88]	; (4011c4 <run_M_code+0xc4>)
  40116a:	4620      	mov	r0, r4
  40116c:	4b16      	ldr	r3, [pc, #88]	; (4011c8 <run_M_code+0xc8>)
  40116e:	4798      	blx	r3
			pwm_set_parameters(&PWM_1,PWM_PERIOD,(int)23.2*speed,0);
  401170:	eef3 7a07 	vmov.f32	s15, #55	; 0x41b80000  23.0
  401174:	ee28 8a27 	vmul.f32	s16, s16, s15
  401178:	2300      	movs	r3, #0
  40117a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  40117e:	ee17 2a90 	vmov	r2, s15
  401182:	f640 1124 	movw	r1, #2340	; 0x924
  401186:	4620      	mov	r0, r4
  401188:	4c10      	ldr	r4, [pc, #64]	; (4011cc <run_M_code+0xcc>)
  40118a:	47a0      	blx	r4
			break;
	}
	
  40118c:	ecbd 8b02 	vpop	{d8}
  401190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Pio *)hw)->PIO_CODR = mask;
  401192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401196:	4b0a      	ldr	r3, [pc, #40]	; (4011c0 <run_M_code+0xc0>)
  401198:	635a      	str	r2, [r3, #52]	; 0x34
  40119a:	e7f7      	b.n	40118c <run_M_code+0x8c>
  40119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4011a0:	4b0b      	ldr	r3, [pc, #44]	; (4011d0 <run_M_code+0xd0>)
  4011a2:	635a      	str	r2, [r3, #52]	; 0x34
  4011a4:	e7f2      	b.n	40118c <run_M_code+0x8c>
	((Pio *)hw)->PIO_SODR = mask;
  4011a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4011aa:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <run_M_code+0xc0>)
  4011ac:	631a      	str	r2, [r3, #48]	; 0x30
  4011ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4011b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4011b6:	631a      	str	r2, [r3, #48]	; 0x30
  4011b8:	e7e8      	b.n	40118c <run_M_code+0x8c>
  4011ba:	bf00      	nop
  4011bc:	004031c5 	.word	0x004031c5
  4011c0:	400e0e00 	.word	0x400e0e00
  4011c4:	204308a4 	.word	0x204308a4
  4011c8:	004036b1 	.word	0x004036b1
  4011cc:	004036ed 	.word	0x004036ed
  4011d0:	400e1200 	.word	0x400e1200

004011d4 <stepper_low_ISR>:
	((Pio *)hw)->PIO_CODR = mask;
  4011d4:	4b0f      	ldr	r3, [pc, #60]	; (401214 <stepper_low_ISR+0x40>)
  4011d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4011da:	635a      	str	r2, [r3, #52]	; 0x34
  4011dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4011e0:	4a0d      	ldr	r2, [pc, #52]	; (401218 <stepper_low_ISR+0x44>)
  4011e2:	6351      	str	r1, [r2, #52]	; 0x34
  4011e4:	2220      	movs	r2, #32
  4011e6:	635a      	str	r2, [r3, #52]	; 0x34
  4011e8:	2201      	movs	r2, #1
  4011ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4011ee:	635a      	str	r2, [r3, #52]	; 0x34
  4011f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4011f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4011f8:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_set_pin_level(X_STEP, false);
	gpio_set_pin_level(Y_STEP, false);
	gpio_set_pin_level(Z_STEP, false);
	gpio_set_pin_level(A_STEP, false);
	gpio_set_pin_level(C_STEP, false);
	x_enable = 0;
  4011fa:	2300      	movs	r3, #0
  4011fc:	4a07      	ldr	r2, [pc, #28]	; (40121c <stepper_low_ISR+0x48>)
  4011fe:	7013      	strb	r3, [r2, #0]
	y_enable = 0;
  401200:	4a07      	ldr	r2, [pc, #28]	; (401220 <stepper_low_ISR+0x4c>)
  401202:	7013      	strb	r3, [r2, #0]
	z_enable = 0;
  401204:	4a07      	ldr	r2, [pc, #28]	; (401224 <stepper_low_ISR+0x50>)
  401206:	7013      	strb	r3, [r2, #0]
	a_enable = 0;
  401208:	4a07      	ldr	r2, [pc, #28]	; (401228 <stepper_low_ISR+0x54>)
  40120a:	7013      	strb	r3, [r2, #0]
	c_enable = 0;
  40120c:	4a07      	ldr	r2, [pc, #28]	; (40122c <stepper_low_ISR+0x58>)
  40120e:	7013      	strb	r3, [r2, #0]
  401210:	4770      	bx	lr
  401212:	bf00      	nop
  401214:	400e0e00 	.word	0x400e0e00
  401218:	400e1200 	.word	0x400e1200
  40121c:	204307cc 	.word	0x204307cc
  401220:	204307c5 	.word	0x204307c5
  401224:	204307c6 	.word	0x204307c6
  401228:	204307c4 	.word	0x204307c4
  40122c:	204307fc 	.word	0x204307fc

00401230 <stepper_init>:
	
	return;
}

void stepper_init()
{
  401230:	b508      	push	{r3, lr}
	// Initialize the timer tasks
	stepper_ISR_task.interval = 1;
  401232:	4909      	ldr	r1, [pc, #36]	; (401258 <stepper_init+0x28>)
  401234:	2201      	movs	r2, #1
  401236:	608a      	str	r2, [r1, #8]
	stepper_ISR_task.cb = stepper_ISR;
  401238:	4b08      	ldr	r3, [pc, #32]	; (40125c <stepper_init+0x2c>)
  40123a:	60cb      	str	r3, [r1, #12]
	stepper_ISR_task.mode = TIMER_TASK_REPEAT;
  40123c:	740a      	strb	r2, [r1, #16]

	stepper_low_ISR_task.interval = 1; 
  40123e:	4b08      	ldr	r3, [pc, #32]	; (401260 <stepper_init+0x30>)
  401240:	609a      	str	r2, [r3, #8]
	stepper_low_ISR_task.cb = stepper_low_ISR;
  401242:	4a08      	ldr	r2, [pc, #32]	; (401264 <stepper_init+0x34>)
  401244:	60da      	str	r2, [r3, #12]
	stepper_low_ISR_task.mode = TIMER_TASK_ONE_SHOT;
  401246:	2200      	movs	r2, #0
  401248:	741a      	strb	r2, [r3, #16]
	
	
	timer_add_task(&TIMER_1, &stepper_ISR_task);
  40124a:	4807      	ldr	r0, [pc, #28]	; (401268 <stepper_init+0x38>)
  40124c:	4b07      	ldr	r3, [pc, #28]	; (40126c <stepper_init+0x3c>)
  40124e:	4798      	blx	r3
	timer_start(&TIMER_0);
  401250:	4807      	ldr	r0, [pc, #28]	; (401270 <stepper_init+0x40>)
  401252:	4b08      	ldr	r3, [pc, #32]	; (401274 <stepper_init+0x44>)
  401254:	4798      	blx	r3
  401256:	bd08      	pop	{r3, pc}
  401258:	20430810 	.word	0x20430810
  40125c:	00401291 	.word	0x00401291
  401260:	204307e8 	.word	0x204307e8
  401264:	004011d5 	.word	0x004011d5
  401268:	20430850 	.word	0x20430850
  40126c:	0040389d 	.word	0x0040389d
  401270:	204308c0 	.word	0x204308c0
  401274:	00403835 	.word	0x00403835

00401278 <ISR_disable>:
	return;
}

void ISR_disable()
{
  401278:	b508      	push	{r3, lr}
	current_block = NULL;
  40127a:	2200      	movs	r2, #0
  40127c:	4b02      	ldr	r3, [pc, #8]	; (401288 <ISR_disable+0x10>)
  40127e:	601a      	str	r2, [r3, #0]
	increment_current_block();
  401280:	4b02      	ldr	r3, [pc, #8]	; (40128c <ISR_disable+0x14>)
  401282:	4798      	blx	r3
  401284:	bd08      	pop	{r3, pc}
  401286:	bf00      	nop
  401288:	20430698 	.word	0x20430698
  40128c:	00400609 	.word	0x00400609

00401290 <stepper_ISR>:
{
  401290:	b510      	push	{r4, lr}
	((Pio *)hw)->PIO_SODR = mask;
  401292:	f44f 7200 	mov.w	r2, #512	; 0x200
  401296:	4b88      	ldr	r3, [pc, #544]	; (4014b8 <stepper_ISR+0x228>)
  401298:	631a      	str	r2, [r3, #48]	; 0x30
	delay_us(10);
  40129a:	200a      	movs	r0, #10
  40129c:	4b87      	ldr	r3, [pc, #540]	; (4014bc <stepper_ISR+0x22c>)
  40129e:	4798      	blx	r3
	if (current_block == NULL)
  4012a0:	4b87      	ldr	r3, [pc, #540]	; (4014c0 <stepper_ISR+0x230>)
  4012a2:	681b      	ldr	r3, [r3, #0]
  4012a4:	2b00      	cmp	r3, #0
  4012a6:	f000 8081 	beq.w	4013ac <stepper_ISR+0x11c>
	counter_x += current_block->steps[X_AXIS];
  4012aa:	4b85      	ldr	r3, [pc, #532]	; (4014c0 <stepper_ISR+0x230>)
  4012ac:	681a      	ldr	r2, [r3, #0]
  4012ae:	4985      	ldr	r1, [pc, #532]	; (4014c4 <stepper_ISR+0x234>)
  4012b0:	680b      	ldr	r3, [r1, #0]
  4012b2:	6810      	ldr	r0, [r2, #0]
  4012b4:	4403      	add	r3, r0
  4012b6:	600b      	str	r3, [r1, #0]
	if (counter_x > current_block->max_step_count)
  4012b8:	6953      	ldr	r3, [r2, #20]
  4012ba:	6809      	ldr	r1, [r1, #0]
  4012bc:	428b      	cmp	r3, r1
  4012be:	d206      	bcs.n	4012ce <stepper_ISR+0x3e>
		x_enable = 1;
  4012c0:	2001      	movs	r0, #1
  4012c2:	4981      	ldr	r1, [pc, #516]	; (4014c8 <stepper_ISR+0x238>)
  4012c4:	7008      	strb	r0, [r1, #0]
		counter_x -= current_block->max_step_count;
  4012c6:	487f      	ldr	r0, [pc, #508]	; (4014c4 <stepper_ISR+0x234>)
  4012c8:	6801      	ldr	r1, [r0, #0]
  4012ca:	1ac9      	subs	r1, r1, r3
  4012cc:	6001      	str	r1, [r0, #0]
	counter_y += current_block->steps[Y_AXIS];
  4012ce:	497f      	ldr	r1, [pc, #508]	; (4014cc <stepper_ISR+0x23c>)
  4012d0:	6808      	ldr	r0, [r1, #0]
  4012d2:	6854      	ldr	r4, [r2, #4]
  4012d4:	4420      	add	r0, r4
  4012d6:	6008      	str	r0, [r1, #0]
	if (counter_y > current_block->max_step_count)
  4012d8:	6809      	ldr	r1, [r1, #0]
  4012da:	428b      	cmp	r3, r1
  4012dc:	d206      	bcs.n	4012ec <stepper_ISR+0x5c>
		y_enable = 1;
  4012de:	2001      	movs	r0, #1
  4012e0:	497b      	ldr	r1, [pc, #492]	; (4014d0 <stepper_ISR+0x240>)
  4012e2:	7008      	strb	r0, [r1, #0]
		counter_y -= current_block->max_step_count;
  4012e4:	4879      	ldr	r0, [pc, #484]	; (4014cc <stepper_ISR+0x23c>)
  4012e6:	6801      	ldr	r1, [r0, #0]
  4012e8:	1ac9      	subs	r1, r1, r3
  4012ea:	6001      	str	r1, [r0, #0]
	counter_z += current_block->steps[Z_AXIS];
  4012ec:	4979      	ldr	r1, [pc, #484]	; (4014d4 <stepper_ISR+0x244>)
  4012ee:	6808      	ldr	r0, [r1, #0]
  4012f0:	6894      	ldr	r4, [r2, #8]
  4012f2:	4420      	add	r0, r4
  4012f4:	6008      	str	r0, [r1, #0]
	if (counter_z > current_block->max_step_count)
  4012f6:	6809      	ldr	r1, [r1, #0]
  4012f8:	428b      	cmp	r3, r1
  4012fa:	d206      	bcs.n	40130a <stepper_ISR+0x7a>
		z_enable = 1;
  4012fc:	2001      	movs	r0, #1
  4012fe:	4976      	ldr	r1, [pc, #472]	; (4014d8 <stepper_ISR+0x248>)
  401300:	7008      	strb	r0, [r1, #0]
		counter_z -= current_block->max_step_count;
  401302:	4874      	ldr	r0, [pc, #464]	; (4014d4 <stepper_ISR+0x244>)
  401304:	6801      	ldr	r1, [r0, #0]
  401306:	1ac9      	subs	r1, r1, r3
  401308:	6001      	str	r1, [r0, #0]
	counter_a += current_block->steps[A_AXIS];
  40130a:	4974      	ldr	r1, [pc, #464]	; (4014dc <stepper_ISR+0x24c>)
  40130c:	6808      	ldr	r0, [r1, #0]
  40130e:	68d4      	ldr	r4, [r2, #12]
  401310:	4420      	add	r0, r4
  401312:	6008      	str	r0, [r1, #0]
	if (counter_a > current_block->max_step_count)
  401314:	6809      	ldr	r1, [r1, #0]
  401316:	428b      	cmp	r3, r1
  401318:	d206      	bcs.n	401328 <stepper_ISR+0x98>
		a_enable = 1;
  40131a:	2001      	movs	r0, #1
  40131c:	4970      	ldr	r1, [pc, #448]	; (4014e0 <stepper_ISR+0x250>)
  40131e:	7008      	strb	r0, [r1, #0]
		counter_a -= current_block->max_step_count;
  401320:	486e      	ldr	r0, [pc, #440]	; (4014dc <stepper_ISR+0x24c>)
  401322:	6801      	ldr	r1, [r0, #0]
  401324:	1ac9      	subs	r1, r1, r3
  401326:	6001      	str	r1, [r0, #0]
	counter_c += current_block->steps[C_AXIS];
  401328:	496e      	ldr	r1, [pc, #440]	; (4014e4 <stepper_ISR+0x254>)
  40132a:	6808      	ldr	r0, [r1, #0]
  40132c:	6912      	ldr	r2, [r2, #16]
  40132e:	4402      	add	r2, r0
  401330:	600a      	str	r2, [r1, #0]
	if (counter_c > current_block->max_step_count)
  401332:	680a      	ldr	r2, [r1, #0]
  401334:	4293      	cmp	r3, r2
  401336:	d206      	bcs.n	401346 <stepper_ISR+0xb6>
		c_enable = 1;
  401338:	2101      	movs	r1, #1
  40133a:	4a6b      	ldr	r2, [pc, #428]	; (4014e8 <stepper_ISR+0x258>)
  40133c:	7011      	strb	r1, [r2, #0]
		counter_c -= current_block->max_step_count;
  40133e:	4969      	ldr	r1, [pc, #420]	; (4014e4 <stepper_ISR+0x254>)
  401340:	680a      	ldr	r2, [r1, #0]
  401342:	1ad3      	subs	r3, r2, r3
  401344:	600b      	str	r3, [r1, #0]
	step_events_completed++;
  401346:	4a69      	ldr	r2, [pc, #420]	; (4014ec <stepper_ISR+0x25c>)
  401348:	6813      	ldr	r3, [r2, #0]
  40134a:	3301      	adds	r3, #1
  40134c:	6013      	str	r3, [r2, #0]
	if (x_enable == 1)
  40134e:	4b5e      	ldr	r3, [pc, #376]	; (4014c8 <stepper_ISR+0x238>)
  401350:	781b      	ldrb	r3, [r3, #0]
  401352:	b2db      	uxtb	r3, r3
  401354:	2b01      	cmp	r3, #1
  401356:	f000 8092 	beq.w	40147e <stepper_ISR+0x1ee>
	if (y_enable == 1)
  40135a:	4b5d      	ldr	r3, [pc, #372]	; (4014d0 <stepper_ISR+0x240>)
  40135c:	781b      	ldrb	r3, [r3, #0]
  40135e:	b2db      	uxtb	r3, r3
  401360:	2b01      	cmp	r3, #1
  401362:	f000 8091 	beq.w	401488 <stepper_ISR+0x1f8>
	if (z_enable == 1)
  401366:	4b5c      	ldr	r3, [pc, #368]	; (4014d8 <stepper_ISR+0x248>)
  401368:	781b      	ldrb	r3, [r3, #0]
  40136a:	b2db      	uxtb	r3, r3
  40136c:	2b01      	cmp	r3, #1
  40136e:	f000 8090 	beq.w	401492 <stepper_ISR+0x202>
	if (a_enable == 1)
  401372:	4b5b      	ldr	r3, [pc, #364]	; (4014e0 <stepper_ISR+0x250>)
  401374:	781b      	ldrb	r3, [r3, #0]
  401376:	b2db      	uxtb	r3, r3
  401378:	2b01      	cmp	r3, #1
  40137a:	f000 808e 	beq.w	40149a <stepper_ISR+0x20a>
	if (c_enable == 1)
  40137e:	4b5a      	ldr	r3, [pc, #360]	; (4014e8 <stepper_ISR+0x258>)
  401380:	781b      	ldrb	r3, [r3, #0]
  401382:	b2db      	uxtb	r3, r3
  401384:	2b01      	cmp	r3, #1
  401386:	f000 808c 	beq.w	4014a2 <stepper_ISR+0x212>
	timer_add_task(&TIMER_0, &stepper_low_ISR_task);
  40138a:	4959      	ldr	r1, [pc, #356]	; (4014f0 <stepper_ISR+0x260>)
  40138c:	4859      	ldr	r0, [pc, #356]	; (4014f4 <stepper_ISR+0x264>)
  40138e:	4b5a      	ldr	r3, [pc, #360]	; (4014f8 <stepper_ISR+0x268>)
  401390:	4798      	blx	r3
	if (step_events_completed >= current_block->max_step_count)
  401392:	4b56      	ldr	r3, [pc, #344]	; (4014ec <stepper_ISR+0x25c>)
  401394:	681b      	ldr	r3, [r3, #0]
  401396:	4a4a      	ldr	r2, [pc, #296]	; (4014c0 <stepper_ISR+0x230>)
  401398:	6812      	ldr	r2, [r2, #0]
  40139a:	6952      	ldr	r2, [r2, #20]
  40139c:	429a      	cmp	r2, r3
  40139e:	f240 8085 	bls.w	4014ac <stepper_ISR+0x21c>
	((Pio *)hw)->PIO_CODR = mask;
  4013a2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4013a6:	4b44      	ldr	r3, [pc, #272]	; (4014b8 <stepper_ISR+0x228>)
  4013a8:	635a      	str	r2, [r3, #52]	; 0x34
  4013aa:	bd10      	pop	{r4, pc}
		current_block = get_motion_block();
  4013ac:	4b53      	ldr	r3, [pc, #332]	; (4014fc <stepper_ISR+0x26c>)
  4013ae:	4798      	blx	r3
  4013b0:	4b43      	ldr	r3, [pc, #268]	; (4014c0 <stepper_ISR+0x230>)
  4013b2:	6018      	str	r0, [r3, #0]
		if (current_block == NULL)
  4013b4:	2800      	cmp	r0, #0
  4013b6:	d03d      	beq.n	401434 <stepper_ISR+0x1a4>
		if(current_block->is_Mcode == 1)
  4013b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  4013bc:	2b01      	cmp	r3, #1
  4013be:	d03c      	beq.n	40143a <stepper_ISR+0x1aa>
		step_events_completed = 0;
  4013c0:	2200      	movs	r2, #0
  4013c2:	4b4a      	ldr	r3, [pc, #296]	; (4014ec <stepper_ISR+0x25c>)
  4013c4:	601a      	str	r2, [r3, #0]
		counter_x = counter_y = counter_z = counter_a = counter_c = (current_block->max_step_count >> 1);
  4013c6:	6943      	ldr	r3, [r0, #20]
  4013c8:	085b      	lsrs	r3, r3, #1
  4013ca:	4a46      	ldr	r2, [pc, #280]	; (4014e4 <stepper_ISR+0x254>)
  4013cc:	6013      	str	r3, [r2, #0]
  4013ce:	4a43      	ldr	r2, [pc, #268]	; (4014dc <stepper_ISR+0x24c>)
  4013d0:	6013      	str	r3, [r2, #0]
  4013d2:	4a40      	ldr	r2, [pc, #256]	; (4014d4 <stepper_ISR+0x244>)
  4013d4:	6013      	str	r3, [r2, #0]
  4013d6:	4a3d      	ldr	r2, [pc, #244]	; (4014cc <stepper_ISR+0x23c>)
  4013d8:	6013      	str	r3, [r2, #0]
  4013da:	4a3a      	ldr	r2, [pc, #232]	; (4014c4 <stepper_ISR+0x234>)
  4013dc:	6013      	str	r3, [r2, #0]
		timer_set_clock_cycles_per_tick(&TIMER_1,current_block->feedrate);
  4013de:	edd0 7a08 	vldr	s15, [r0, #32]
  4013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4013e6:	ee17 1a90 	vmov	r1, s15
  4013ea:	4845      	ldr	r0, [pc, #276]	; (401500 <stepper_ISR+0x270>)
  4013ec:	4b45      	ldr	r3, [pc, #276]	; (401504 <stepper_ISR+0x274>)
  4013ee:	4798      	blx	r3
		if(current_block->dir[X_AXIS] == 1)
  4013f0:	4b33      	ldr	r3, [pc, #204]	; (4014c0 <stepper_ISR+0x230>)
  4013f2:	681b      	ldr	r3, [r3, #0]
  4013f4:	7e1a      	ldrb	r2, [r3, #24]
  4013f6:	2a01      	cmp	r2, #1
  4013f8:	d02b      	beq.n	401452 <stepper_ISR+0x1c2>
  4013fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4013fe:	4a42      	ldr	r2, [pc, #264]	; (401508 <stepper_ISR+0x278>)
  401400:	6351      	str	r1, [r2, #52]	; 0x34
		if(current_block->dir[Y_AXIS] == 1)
  401402:	7e5a      	ldrb	r2, [r3, #25]
  401404:	2a01      	cmp	r2, #1
  401406:	d029      	beq.n	40145c <stepper_ISR+0x1cc>
  401408:	2104      	movs	r1, #4
  40140a:	4a2b      	ldr	r2, [pc, #172]	; (4014b8 <stepper_ISR+0x228>)
  40140c:	6351      	str	r1, [r2, #52]	; 0x34
		if(current_block->dir[Z_AXIS] == 1)
  40140e:	7e9a      	ldrb	r2, [r3, #26]
  401410:	2a01      	cmp	r2, #1
  401412:	d027      	beq.n	401464 <stepper_ISR+0x1d4>
  401414:	2140      	movs	r1, #64	; 0x40
  401416:	4a28      	ldr	r2, [pc, #160]	; (4014b8 <stepper_ISR+0x228>)
  401418:	6351      	str	r1, [r2, #52]	; 0x34
		if(current_block->dir[A_AXIS] == 1)
  40141a:	7eda      	ldrb	r2, [r3, #27]
  40141c:	2a01      	cmp	r2, #1
  40141e:	d025      	beq.n	40146c <stepper_ISR+0x1dc>
  401420:	2102      	movs	r1, #2
  401422:	4a3a      	ldr	r2, [pc, #232]	; (40150c <stepper_ISR+0x27c>)
  401424:	6351      	str	r1, [r2, #52]	; 0x34
		if(current_block->dir[C_AXIS] == 0)
  401426:	7f1b      	ldrb	r3, [r3, #28]
  401428:	bb23      	cbnz	r3, 401474 <stepper_ISR+0x1e4>
	((Pio *)hw)->PIO_SODR = mask;
  40142a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40142e:	4b36      	ldr	r3, [pc, #216]	; (401508 <stepper_ISR+0x278>)
  401430:	631a      	str	r2, [r3, #48]	; 0x30
  401432:	e73a      	b.n	4012aa <stepper_ISR+0x1a>
			ISR_disable();
  401434:	4b36      	ldr	r3, [pc, #216]	; (401510 <stepper_ISR+0x280>)
  401436:	4798      	blx	r3
			return;
  401438:	bd10      	pop	{r4, pc}
			run_M_code(current_block->code,current_block->speed,current_block->parameter);
  40143a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40143c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
  401440:	eef8 7a67 	vcvt.f32.u32	s15, s15
  401444:	ee17 1a90 	vmov	r1, s15
  401448:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
  40144c:	4b31      	ldr	r3, [pc, #196]	; (401514 <stepper_ISR+0x284>)
  40144e:	4798      	blx	r3
			return;
  401450:	bd10      	pop	{r4, pc}
  401452:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401456:	4a2c      	ldr	r2, [pc, #176]	; (401508 <stepper_ISR+0x278>)
  401458:	6311      	str	r1, [r2, #48]	; 0x30
  40145a:	e7d2      	b.n	401402 <stepper_ISR+0x172>
  40145c:	2104      	movs	r1, #4
  40145e:	4a16      	ldr	r2, [pc, #88]	; (4014b8 <stepper_ISR+0x228>)
  401460:	6311      	str	r1, [r2, #48]	; 0x30
  401462:	e7d4      	b.n	40140e <stepper_ISR+0x17e>
  401464:	2140      	movs	r1, #64	; 0x40
  401466:	4a14      	ldr	r2, [pc, #80]	; (4014b8 <stepper_ISR+0x228>)
  401468:	6311      	str	r1, [r2, #48]	; 0x30
  40146a:	e7d6      	b.n	40141a <stepper_ISR+0x18a>
  40146c:	2102      	movs	r1, #2
  40146e:	4a27      	ldr	r2, [pc, #156]	; (40150c <stepper_ISR+0x27c>)
  401470:	6311      	str	r1, [r2, #48]	; 0x30
  401472:	e7d8      	b.n	401426 <stepper_ISR+0x196>
	((Pio *)hw)->PIO_CODR = mask;
  401474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401478:	4b23      	ldr	r3, [pc, #140]	; (401508 <stepper_ISR+0x278>)
  40147a:	635a      	str	r2, [r3, #52]	; 0x34
  40147c:	e715      	b.n	4012aa <stepper_ISR+0x1a>
	((Pio *)hw)->PIO_SODR = mask;
  40147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401482:	4b0d      	ldr	r3, [pc, #52]	; (4014b8 <stepper_ISR+0x228>)
  401484:	631a      	str	r2, [r3, #48]	; 0x30
  401486:	e768      	b.n	40135a <stepper_ISR+0xca>
  401488:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40148c:	4b22      	ldr	r3, [pc, #136]	; (401518 <stepper_ISR+0x288>)
  40148e:	631a      	str	r2, [r3, #48]	; 0x30
  401490:	e769      	b.n	401366 <stepper_ISR+0xd6>
  401492:	2220      	movs	r2, #32
  401494:	4b08      	ldr	r3, [pc, #32]	; (4014b8 <stepper_ISR+0x228>)
  401496:	631a      	str	r2, [r3, #48]	; 0x30
  401498:	e76b      	b.n	401372 <stepper_ISR+0xe2>
  40149a:	2201      	movs	r2, #1
  40149c:	4b1b      	ldr	r3, [pc, #108]	; (40150c <stepper_ISR+0x27c>)
  40149e:	631a      	str	r2, [r3, #48]	; 0x30
  4014a0:	e76d      	b.n	40137e <stepper_ISR+0xee>
  4014a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014a6:	4b18      	ldr	r3, [pc, #96]	; (401508 <stepper_ISR+0x278>)
  4014a8:	631a      	str	r2, [r3, #48]	; 0x30
  4014aa:	e76e      	b.n	40138a <stepper_ISR+0xfa>
		current_block = NULL;
  4014ac:	2200      	movs	r2, #0
  4014ae:	4b04      	ldr	r3, [pc, #16]	; (4014c0 <stepper_ISR+0x230>)
  4014b0:	601a      	str	r2, [r3, #0]
		increment_current_block();
  4014b2:	4b1a      	ldr	r3, [pc, #104]	; (40151c <stepper_ISR+0x28c>)
  4014b4:	4798      	blx	r3
  4014b6:	e774      	b.n	4013a2 <stepper_ISR+0x112>
  4014b8:	400e0e00 	.word	0x400e0e00
  4014bc:	004031c5 	.word	0x004031c5
  4014c0:	20430698 	.word	0x20430698
  4014c4:	204307d0 	.word	0x204307d0
  4014c8:	204307cc 	.word	0x204307cc
  4014cc:	20430800 	.word	0x20430800
  4014d0:	204307c5 	.word	0x204307c5
  4014d4:	2043080c 	.word	0x2043080c
  4014d8:	204307c6 	.word	0x204307c6
  4014dc:	20430808 	.word	0x20430808
  4014e0:	204307c4 	.word	0x204307c4
  4014e4:	204307c8 	.word	0x204307c8
  4014e8:	204307fc 	.word	0x204307fc
  4014ec:	20430804 	.word	0x20430804
  4014f0:	204307e8 	.word	0x204307e8
  4014f4:	204308c0 	.word	0x204308c0
  4014f8:	0040389d 	.word	0x0040389d
  4014fc:	004005e5 	.word	0x004005e5
  401500:	20430850 	.word	0x20430850
  401504:	00403871 	.word	0x00403871
  401508:	400e1400 	.word	0x400e1400
  40150c:	400e1000 	.word	0x400e1000
  401510:	00401279 	.word	0x00401279
  401514:	00401101 	.word	0x00401101
  401518:	400e1200 	.word	0x400e1200
  40151c:	00400609 	.word	0x00400609

00401520 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401520:	e7fe      	b.n	401520 <Dummy_Handler>
	...

00401524 <Reset_Handler>:
{
  401524:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  401526:	4b17      	ldr	r3, [pc, #92]	; (401584 <Reset_Handler+0x60>)
  401528:	4a17      	ldr	r2, [pc, #92]	; (401588 <Reset_Handler+0x64>)
  40152a:	429a      	cmp	r2, r3
  40152c:	d010      	beq.n	401550 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  40152e:	4b17      	ldr	r3, [pc, #92]	; (40158c <Reset_Handler+0x68>)
  401530:	4a14      	ldr	r2, [pc, #80]	; (401584 <Reset_Handler+0x60>)
  401532:	429a      	cmp	r2, r3
  401534:	d20c      	bcs.n	401550 <Reset_Handler+0x2c>
  401536:	3b01      	subs	r3, #1
  401538:	1a9b      	subs	r3, r3, r2
  40153a:	f023 0303 	bic.w	r3, r3, #3
  40153e:	3304      	adds	r3, #4
  401540:	4413      	add	r3, r2
  401542:	4911      	ldr	r1, [pc, #68]	; (401588 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  401544:	f851 0b04 	ldr.w	r0, [r1], #4
  401548:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40154c:	429a      	cmp	r2, r3
  40154e:	d1f9      	bne.n	401544 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  401550:	4b0f      	ldr	r3, [pc, #60]	; (401590 <Reset_Handler+0x6c>)
  401552:	4a10      	ldr	r2, [pc, #64]	; (401594 <Reset_Handler+0x70>)
  401554:	429a      	cmp	r2, r3
  401556:	d20a      	bcs.n	40156e <Reset_Handler+0x4a>
  401558:	3b01      	subs	r3, #1
  40155a:	1a9b      	subs	r3, r3, r2
  40155c:	f023 0303 	bic.w	r3, r3, #3
  401560:	3304      	adds	r3, #4
  401562:	4413      	add	r3, r2
                *pDest++ = 0;
  401564:	2100      	movs	r1, #0
  401566:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40156a:	4293      	cmp	r3, r2
  40156c:	d1fb      	bne.n	401566 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40156e:	4a0a      	ldr	r2, [pc, #40]	; (401598 <Reset_Handler+0x74>)
  401570:	4b0a      	ldr	r3, [pc, #40]	; (40159c <Reset_Handler+0x78>)
  401572:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401576:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  401578:	4b09      	ldr	r3, [pc, #36]	; (4015a0 <Reset_Handler+0x7c>)
  40157a:	4798      	blx	r3
        main();
  40157c:	4b09      	ldr	r3, [pc, #36]	; (4015a4 <Reset_Handler+0x80>)
  40157e:	4798      	blx	r3
  401580:	e7fe      	b.n	401580 <Reset_Handler+0x5c>
  401582:	bf00      	nop
  401584:	20400000 	.word	0x20400000
  401588:	0040cf20 	.word	0x0040cf20
  40158c:	20400220 	.word	0x20400220
  401590:	204308e0 	.word	0x204308e0
  401594:	20400220 	.word	0x20400220
  401598:	e000ed00 	.word	0xe000ed00
  40159c:	00400000 	.word	0x00400000
  4015a0:	00407749 	.word	0x00407749
  4015a4:	004003c9 	.word	0x004003c9

004015a8 <sd_mmc_test_unit_ready>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_test_unit_ready(uint8_t slot)
{
  4015a8:	b510      	push	{r4, lr}
  4015aa:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot)) {
  4015ac:	4b0a      	ldr	r3, [pc, #40]	; (4015d8 <sd_mmc_test_unit_ready+0x30>)
  4015ae:	4798      	blx	r3
  4015b0:	2801      	cmp	r0, #1
  4015b2:	d00f      	beq.n	4015d4 <sd_mmc_test_unit_ready+0x2c>
  4015b4:	b120      	cbz	r0, 4015c0 <sd_mmc_test_unit_ready+0x18>
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4015b6:	2802      	cmp	r0, #2
  4015b8:	bf0c      	ite	eq
  4015ba:	2002      	moveq	r0, #2
  4015bc:	2001      	movne	r0, #1
  4015be:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  4015c0:	4620      	mov	r0, r4
  4015c2:	4b06      	ldr	r3, [pc, #24]	; (4015dc <sd_mmc_test_unit_ready+0x34>)
  4015c4:	4798      	blx	r3
  4015c6:	f000 0003 	and.w	r0, r0, #3
			return CTRL_NO_PRESENT;
  4015ca:	2800      	cmp	r0, #0
  4015cc:	bf14      	ite	ne
  4015ce:	2000      	movne	r0, #0
  4015d0:	2002      	moveq	r0, #2
  4015d2:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  4015d4:	2003      	movs	r0, #3
	}
}
  4015d6:	bd10      	pop	{r4, pc}
  4015d8:	00404f35 	.word	0x00404f35
  4015dc:	0040557d 	.word	0x0040557d

004015e0 <sd_mmc_read_capacity>:
 *
 * \return CTRL_GOOD or card status like CTRL_NO_PRESENT, CTRL_BUSY, CTRL_FAIL.
 *
 */
static ctrl_status_t sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  4015e0:	b538      	push	{r3, r4, r5, lr}
  4015e2:	4604      	mov	r4, r0
  4015e4:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  4015e6:	4b04      	ldr	r3, [pc, #16]	; (4015f8 <sd_mmc_read_capacity+0x18>)
  4015e8:	4798      	blx	r3
  4015ea:	0040      	lsls	r0, r0, #1
  4015ec:	3801      	subs	r0, #1
  4015ee:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  4015f0:	4620      	mov	r0, r4
  4015f2:	4b02      	ldr	r3, [pc, #8]	; (4015fc <sd_mmc_read_capacity+0x1c>)
  4015f4:	4798      	blx	r3
}
  4015f6:	bd38      	pop	{r3, r4, r5, pc}
  4015f8:	004055a1 	.word	0x004055a1
  4015fc:	004015a9 	.word	0x004015a9

00401600 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
dstatus_t disk_initialize(uint8_t drv)
{
  401600:	b510      	push	{r4, lr}
  401602:	4604      	mov	r4, r0
	int           i;
	ctrl_status_t mem_status;

	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i++) {
		mem_status = sd_mmc_test_unit_ready(drv);
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <disk_initialize+0x30>)
  401606:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401608:	2803      	cmp	r0, #3
  40160a:	d106      	bne.n	40161a <disk_initialize+0x1a>
		mem_status = sd_mmc_test_unit_ready(drv);
  40160c:	4620      	mov	r0, r4
  40160e:	4b08      	ldr	r3, [pc, #32]	; (401630 <disk_initialize+0x30>)
  401610:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401612:	2803      	cmp	r0, #3
  401614:	d101      	bne.n	40161a <disk_initialize+0x1a>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401616:	2001      	movs	r0, #1
  401618:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  40161a:	b938      	cbnz	r0, 40162c <disk_initialize+0x2c>
	}

	/* Check Write Protection Status */
	if (sd_mmc_is_write_protected(drv)) {
  40161c:	4620      	mov	r0, r4
  40161e:	4b05      	ldr	r3, [pc, #20]	; (401634 <disk_initialize+0x34>)
  401620:	4798      	blx	r3
  401622:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  401624:	bf14      	ite	ne
  401626:	2004      	movne	r0, #4
  401628:	2000      	moveq	r0, #0
  40162a:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  40162c:	2001      	movs	r0, #1
}
  40162e:	bd10      	pop	{r4, pc}
  401630:	004015a9 	.word	0x004015a9
  401634:	004055c5 	.word	0x004055c5

00401638 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
dstatus_t disk_status(uint8_t drv)
{
  401638:	b508      	push	{r3, lr}
	switch (sd_mmc_test_unit_ready(drv)) {
  40163a:	4b05      	ldr	r3, [pc, #20]	; (401650 <disk_status+0x18>)
  40163c:	4798      	blx	r3
  40163e:	b120      	cbz	r0, 40164a <disk_status+0x12>
	case CTRL_GOOD:
		return ERR_NONE;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401640:	2802      	cmp	r0, #2
  401642:	bf0c      	ite	eq
  401644:	2003      	moveq	r0, #3
  401646:	2001      	movne	r0, #1
  401648:	bd08      	pop	{r3, pc}
		return ERR_NONE;
  40164a:	2000      	movs	r0, #0
	}
}
  40164c:	bd08      	pop	{r3, pc}
  40164e:	bf00      	nop
  401650:	004015a9 	.word	0x004015a9

00401654 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_read(uint8_t drv, uint8_t *buff, uint32_t sector, uint8_t count)
{
  401654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401658:	b083      	sub	sp, #12
  40165a:	4683      	mov	fp, r0
  40165c:	4688      	mov	r8, r1
  40165e:	4614      	mov	r4, r2
  401660:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
  401662:	a901      	add	r1, sp, #4
  401664:	4b17      	ldr	r3, [pc, #92]	; (4016c4 <disk_read+0x70>)
  401666:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
  401668:	192e      	adds	r6, r5, r4
  40166a:	9b01      	ldr	r3, [sp, #4]
  40166c:	3301      	adds	r3, #1
  40166e:	429e      	cmp	r6, r3
  401670:	d901      	bls.n	401676 <disk_read+0x22>
		return ERR_INVALID_ARG;
  401672:	20f3      	movs	r0, #243	; 0xf3
  401674:	e01f      	b.n	4016b6 <disk_read+0x62>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  401676:	b30d      	cbz	r5, 4016bc <disk_read+0x68>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  401678:	4f13      	ldr	r7, [pc, #76]	; (4016c8 <disk_read+0x74>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
  40167a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4016cc <disk_read+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
  40167e:	f8df a050 	ldr.w	sl, [pc, #80]	; 4016d0 <disk_read+0x7c>
  401682:	e00f      	b.n	4016a4 <disk_read+0x50>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1))
  401684:	2101      	movs	r1, #1
  401686:	4640      	mov	r0, r8
  401688:	47c8      	blx	r9
  40168a:	b998      	cbnz	r0, 4016b4 <disk_read+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false))
  40168c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
  40168e:	3000      	adds	r0, #0
  401690:	bf18      	it	ne
  401692:	2001      	movne	r0, #1
  401694:	e000      	b.n	401698 <disk_read+0x44>
  401696:	2002      	movs	r0, #2
		if (sd_mmc_mem_2_ram(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
  401698:	b990      	cbnz	r0, 4016c0 <disk_read+0x6c>
  40169a:	3401      	adds	r4, #1
  40169c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
  4016a0:	42a6      	cmp	r6, r4
  4016a2:	d008      	beq.n	4016b6 <disk_read+0x62>
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4016a4:	2201      	movs	r2, #1
  4016a6:	4621      	mov	r1, r4
  4016a8:	4658      	mov	r0, fp
  4016aa:	47b8      	blx	r7
  4016ac:	2800      	cmp	r0, #0
  4016ae:	d0e9      	beq.n	401684 <disk_read+0x30>
  4016b0:	2802      	cmp	r0, #2
  4016b2:	d0f0      	beq.n	401696 <disk_read+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
  4016b4:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
  4016b6:	b003      	add	sp, #12
  4016b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
  4016bc:	2000      	movs	r0, #0
  4016be:	e7fa      	b.n	4016b6 <disk_read+0x62>
			return ERR_INVALID_DATA;
  4016c0:	20ff      	movs	r0, #255	; 0xff
  4016c2:	e7f8      	b.n	4016b6 <disk_read+0x62>
  4016c4:	004015e1 	.word	0x004015e1
  4016c8:	00405615 	.word	0x00405615
  4016cc:	004056ed 	.word	0x004056ed
  4016d0:	00405739 	.word	0x00405739

004016d4 <disk_write>:
 * \param count Number of sectors to read (1..255).
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_write(uint8_t drv, uint8_t const *buff, uint32_t sector, uint8_t count)
{
  4016d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016d8:	b083      	sub	sp, #12
  4016da:	4683      	mov	fp, r0
  4016dc:	4688      	mov	r8, r1
  4016de:	4614      	mov	r4, r2
  4016e0:	461d      	mov	r5, r3
	uint8_t  uc_sector_size = SECTOR_SIZE_512;
	uint32_t i;
	uint32_t ul_last_sector_num;

	/* Check valid address */
	sd_mmc_read_capacity(drv, &ul_last_sector_num);
  4016e2:	a901      	add	r1, sp, #4
  4016e4:	4b17      	ldr	r3, [pc, #92]	; (401744 <disk_write+0x70>)
  4016e6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) > (ul_last_sector_num + 1) * uc_sector_size) {
  4016e8:	192e      	adds	r6, r5, r4
  4016ea:	9b01      	ldr	r3, [sp, #4]
  4016ec:	3301      	adds	r3, #1
  4016ee:	429e      	cmp	r6, r3
  4016f0:	d901      	bls.n	4016f6 <disk_write+0x22>
		return ERR_INVALID_ARG;
  4016f2:	20f3      	movs	r0, #243	; 0xf3
  4016f4:	e01f      	b.n	401736 <disk_write+0x62>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4016f6:	b30d      	cbz	r5, 40173c <disk_write+0x68>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  4016f8:	4f13      	ldr	r7, [pc, #76]	; (401748 <disk_write+0x74>)
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
  4016fa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 40174c <disk_write+0x78>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
  4016fe:	f8df a050 	ldr.w	sl, [pc, #80]	; 401750 <disk_write+0x7c>
  401702:	e00f      	b.n	401724 <disk_write+0x50>
		if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1))
  401704:	2101      	movs	r1, #1
  401706:	4640      	mov	r0, r8
  401708:	47c8      	blx	r9
  40170a:	b998      	cbnz	r0, 401734 <disk_write+0x60>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false))
  40170c:	47d0      	blx	sl
		return CTRL_NO_PRESENT;
  40170e:	3000      	adds	r0, #0
  401710:	bf18      	it	ne
  401712:	2001      	movne	r0, #1
  401714:	e000      	b.n	401718 <disk_write+0x44>
  401716:	2002      	movs	r0, #2
		if (sd_mmc_ram_2_mem(drv, sector + uc_sector_size * i, buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i)
  401718:	b990      	cbnz	r0, 401740 <disk_write+0x6c>
  40171a:	3401      	adds	r4, #1
  40171c:	f508 7800 	add.w	r8, r8, #512	; 0x200
	for (i = 0; i < count; i++) {
  401720:	42a6      	cmp	r6, r4
  401722:	d008      	beq.n	401736 <disk_write+0x62>
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401724:	2201      	movs	r2, #1
  401726:	4621      	mov	r1, r4
  401728:	4658      	mov	r0, fp
  40172a:	47b8      	blx	r7
  40172c:	2800      	cmp	r0, #0
  40172e:	d0e9      	beq.n	401704 <disk_write+0x30>
  401730:	2802      	cmp	r0, #2
  401732:	d0f0      	beq.n	401716 <disk_write+0x42>
		    != CTRL_GOOD) {
			return ERR_INVALID_DATA;
  401734:	20ff      	movs	r0, #255	; 0xff
		}
	}

	return ERR_NONE;
}
  401736:	b003      	add	sp, #12
  401738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ERR_NONE;
  40173c:	2000      	movs	r0, #0
  40173e:	e7fa      	b.n	401736 <disk_write+0x62>
			return ERR_INVALID_DATA;
  401740:	20ff      	movs	r0, #255	; 0xff
  401742:	e7f8      	b.n	401736 <disk_write+0x62>
  401744:	004015e1 	.word	0x004015e1
  401748:	004057a9 	.word	0x004057a9
  40174c:	00405849 	.word	0x00405849
  401750:	00405895 	.word	0x00405895

00401754 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return ERR_NONE for success, otherwise DRESULT error code.
 */
dstatus_t disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff)
{
  401754:	b510      	push	{r4, lr}
  401756:	b082      	sub	sp, #8
  401758:	4614      	mov	r4, r2
	dstatus_t res = ERR_INVALID_ARG;

	switch (ctrl) {
  40175a:	2903      	cmp	r1, #3
  40175c:	d81a      	bhi.n	401794 <disk_ioctl+0x40>
  40175e:	e8df f001 	tbb	[pc, r1]
  401762:	0712      	.short	0x0712
  401764:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(unsigned long *)buff = 1;
  401766:	2301      	movs	r3, #1
  401768:	6013      	str	r3, [r2, #0]
		res                    = ERR_NONE;
  40176a:	2000      	movs	r0, #0
	default:
		res = ERR_INVALID_ARG;
	}

	return res;
}
  40176c:	b002      	add	sp, #8
  40176e:	bd10      	pop	{r4, pc}
		sd_mmc_read_capacity(drv, &ul_last_sector_num);
  401770:	a901      	add	r1, sp, #4
  401772:	4b09      	ldr	r3, [pc, #36]	; (401798 <disk_ioctl+0x44>)
  401774:	4798      	blx	r3
		*(unsigned long *)buff = ul_last_sector_num + 1;
  401776:	9b01      	ldr	r3, [sp, #4]
  401778:	3301      	adds	r3, #1
  40177a:	6023      	str	r3, [r4, #0]
		res = ERR_NONE;
  40177c:	2000      	movs	r0, #0
	} break;
  40177e:	e7f5      	b.n	40176c <disk_ioctl+0x18>
		*(uint8_t *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  401780:	2000      	movs	r0, #0
  401782:	7010      	strb	r0, [r2, #0]
	} break;
  401784:	e7f2      	b.n	40176c <disk_ioctl+0x18>
		if (sd_mmc_test_unit_ready(drv) == CTRL_GOOD) {
  401786:	4b05      	ldr	r3, [pc, #20]	; (40179c <disk_ioctl+0x48>)
  401788:	4798      	blx	r3
  40178a:	2800      	cmp	r0, #0
			res = ERR_NOT_READY;
  40178c:	bf0c      	ite	eq
  40178e:	2000      	moveq	r0, #0
  401790:	20e3      	movne	r0, #227	; 0xe3
  401792:	e7eb      	b.n	40176c <disk_ioctl+0x18>
		res = ERR_INVALID_ARG;
  401794:	20f3      	movs	r0, #243	; 0xf3
  401796:	e7e9      	b.n	40176c <disk_ioctl+0x18>
  401798:	004015e1 	.word	0x004015e1
  40179c:	004015a9 	.word	0x004015a9

004017a0 <diskio_init>:
 */

#include "diskio_start.h"

void diskio_init(void)
{
  4017a0:	4770      	bx	lr
	...

004017a4 <IO_BUS_PORT_init>:
	((Pio *)hw)->PIO_OER = mask;
  4017a4:	4b2d      	ldr	r3, [pc, #180]	; (40185c <IO_BUS_PORT_init+0xb8>)
  4017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017aa:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  4017ac:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  4017ae:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4017b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4017b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017b6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4017ba:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4017bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4017be:	4311      	orrs	r1, r2
  4017c0:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4017c2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  4017c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4017c8:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  4017ca:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  4017cc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4017ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4017d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017d4:	4311      	orrs	r1, r2
  4017d6:	6719      	str	r1, [r3, #112]	; 0x70
  4017d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4017da:	4311      	orrs	r1, r2
  4017dc:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4017de:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  4017e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4017e4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  4017e6:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  4017e8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4017ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4017ee:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017f0:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  4017f4:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4017f6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4017f8:	4311      	orrs	r1, r2
  4017fa:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4017fc:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  4017fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401802:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  401804:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  401806:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40180c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40180e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401812:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401814:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401816:	4311      	orrs	r1, r2
  401818:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40181a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  40181c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401820:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  401822:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  401824:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40182a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40182c:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401830:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401832:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401834:	4311      	orrs	r1, r2
  401836:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401838:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_OER = mask;
  40183a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40183e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  401840:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  401842:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401848:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40184a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40184e:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401850:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401852:	4311      	orrs	r1, r2
  401854:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401856:	605a      	str	r2, [r3, #4]
  401858:	4770      	bx	lr
  40185a:	bf00      	nop
  40185c:	400e0e00 	.word	0x400e0e00

00401860 <IO_BUS_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401860:	4b04      	ldr	r3, [pc, #16]	; (401874 <IO_BUS_CLOCK_init+0x14>)
  401862:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401864:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  401868:	d103      	bne.n	401872 <IO_BUS_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40186a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40186e:	4b01      	ldr	r3, [pc, #4]	; (401874 <IO_BUS_CLOCK_init+0x14>)
  401870:	611a      	str	r2, [r3, #16]
  401872:	4770      	bx	lr
  401874:	400e0600 	.word	0x400e0600

00401878 <IO_BUS_init>:
{
	_pmc_enable_periph_clock(ID_HSMCI);
}

void IO_BUS_init(void)
{
  401878:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
  40187a:	4b05      	ldr	r3, [pc, #20]	; (401890 <IO_BUS_init+0x18>)
  40187c:	4798      	blx	r3
	mci_sync_init(&IO_BUS, HSMCI);
  40187e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401882:	4804      	ldr	r0, [pc, #16]	; (401894 <IO_BUS_init+0x1c>)
  401884:	4b04      	ldr	r3, [pc, #16]	; (401898 <IO_BUS_init+0x20>)
  401886:	4798      	blx	r3
	IO_BUS_PORT_init();
  401888:	4b04      	ldr	r3, [pc, #16]	; (40189c <IO_BUS_init+0x24>)
  40188a:	4798      	blx	r3
  40188c:	bd08      	pop	{r3, pc}
  40188e:	bf00      	nop
  401890:	00401861 	.word	0x00401861
  401894:	20430870 	.word	0x20430870
  401898:	004033c1 	.word	0x004033c1
  40189c:	004017a5 	.word	0x004017a5

004018a0 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4018a0:	4b04      	ldr	r3, [pc, #16]	; (4018b4 <EXTERNAL_IRQ_1_init+0x14>)
  4018a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4018a6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4018a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4018ac:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4018ae:	601a      	str	r2, [r3, #0]
  4018b0:	4770      	bx	lr
  4018b2:	bf00      	nop
  4018b4:	400e1000 	.word	0x400e1000

004018b8 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4018b8:	4b07      	ldr	r3, [pc, #28]	; (4018d8 <EXTERNAL_IRQ_0_init+0x20>)
  4018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4018be:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4018c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4018c4:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4018c6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4018c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4018cc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4018ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4018d2:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4018d4:	601a      	str	r2, [r3, #0]
  4018d6:	4770      	bx	lr
  4018d8:	400e0e00 	.word	0x400e0e00

004018dc <EXTERNAL_IRQ_3_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4018dc:	4b07      	ldr	r3, [pc, #28]	; (4018fc <EXTERNAL_IRQ_3_init+0x20>)
  4018de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018e2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4018e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4018e8:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4018ea:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4018f0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4018f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4018f6:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4018f8:	601a      	str	r2, [r3, #0]
  4018fa:	4770      	bx	lr
  4018fc:	400e1400 	.word	0x400e1400

00401900 <EXTERNAL_IRQ_2_init>:
	((Pio *)hw)->PIO_ODR = mask;
  401900:	4b07      	ldr	r3, [pc, #28]	; (401920 <EXTERNAL_IRQ_2_init+0x20>)
  401902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401906:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40190c:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  40190e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401910:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401914:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40191a:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  40191c:	601a      	str	r2, [r3, #0]
  40191e:	4770      	bx	lr
  401920:	400e1200 	.word	0x400e1200

00401924 <PWM_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401924:	4b17      	ldr	r3, [pc, #92]	; (401984 <PWM_0_PORT_init+0x60>)
  401926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401928:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  40192c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40192e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401930:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  401934:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40193a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40193c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40193e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401942:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401944:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40194a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40194c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401950:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401952:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401954:	f022 0202 	bic.w	r2, r2, #2
  401958:	671a      	str	r2, [r3, #112]	; 0x70
  40195a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40195c:	f022 0202 	bic.w	r2, r2, #2
  401960:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401962:	2202      	movs	r2, #2
  401964:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401966:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40196a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40196c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  401970:	671a      	str	r2, [r3, #112]	; 0x70
  401972:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401974:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  401978:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40197a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40197e:	605a      	str	r2, [r3, #4]
  401980:	4770      	bx	lr
  401982:	bf00      	nop
  401984:	400e0e00 	.word	0x400e0e00

00401988 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401988:	4b04      	ldr	r3, [pc, #16]	; (40199c <PWM_0_CLOCK_init+0x14>)
  40198a:	699b      	ldr	r3, [r3, #24]
  40198c:	2b00      	cmp	r3, #0
  40198e:	db03      	blt.n	401998 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401990:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401994:	4b01      	ldr	r3, [pc, #4]	; (40199c <PWM_0_CLOCK_init+0x14>)
  401996:	611a      	str	r2, [r3, #16]
  401998:	4770      	bx	lr
  40199a:	bf00      	nop
  40199c:	400e0600 	.word	0x400e0600

004019a0 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4019a0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4019a2:	4b06      	ldr	r3, [pc, #24]	; (4019bc <PWM_0_init+0x1c>)
  4019a4:	4798      	blx	r3
	PWM_0_PORT_init();
  4019a6:	4b06      	ldr	r3, [pc, #24]	; (4019c0 <PWM_0_init+0x20>)
  4019a8:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4019aa:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <PWM_0_init+0x24>)
  4019ac:	4798      	blx	r3
  4019ae:	4602      	mov	r2, r0
  4019b0:	4905      	ldr	r1, [pc, #20]	; (4019c8 <PWM_0_init+0x28>)
  4019b2:	4806      	ldr	r0, [pc, #24]	; (4019cc <PWM_0_init+0x2c>)
  4019b4:	4b06      	ldr	r3, [pc, #24]	; (4019d0 <PWM_0_init+0x30>)
  4019b6:	4798      	blx	r3
  4019b8:	bd08      	pop	{r3, pc}
  4019ba:	bf00      	nop
  4019bc:	00401989 	.word	0x00401989
  4019c0:	00401925 	.word	0x00401925
  4019c4:	0040482d 	.word	0x0040482d
  4019c8:	40020000 	.word	0x40020000
  4019cc:	20430828 	.word	0x20430828
  4019d0:	0040366d 	.word	0x0040366d

004019d4 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4019d4:	4b0b      	ldr	r3, [pc, #44]	; (401a04 <PWM_1_PORT_init+0x30>)
  4019d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4019d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4019dc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4019de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4019e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4019e4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4019e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4019ea:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4019ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4019ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4019f2:	671a      	str	r2, [r3, #112]	; 0x70
  4019f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4019f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4019fa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4019fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401a00:	605a      	str	r2, [r3, #4]
  401a02:	4770      	bx	lr
  401a04:	400e0e00 	.word	0x400e0e00

00401a08 <PWM_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401a08:	4b05      	ldr	r3, [pc, #20]	; (401a20 <PWM_1_CLOCK_init+0x18>)
  401a0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401a0e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  401a12:	d104      	bne.n	401a1e <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a18:	4b01      	ldr	r3, [pc, #4]	; (401a20 <PWM_1_CLOCK_init+0x18>)
  401a1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  401a1e:	4770      	bx	lr
  401a20:	400e0600 	.word	0x400e0600

00401a24 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  401a24:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  401a26:	4b06      	ldr	r3, [pc, #24]	; (401a40 <PWM_1_init+0x1c>)
  401a28:	4798      	blx	r3
	PWM_1_PORT_init();
  401a2a:	4b06      	ldr	r3, [pc, #24]	; (401a44 <PWM_1_init+0x20>)
  401a2c:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  401a2e:	4b06      	ldr	r3, [pc, #24]	; (401a48 <PWM_1_init+0x24>)
  401a30:	4798      	blx	r3
  401a32:	4602      	mov	r2, r0
  401a34:	4905      	ldr	r1, [pc, #20]	; (401a4c <PWM_1_init+0x28>)
  401a36:	4806      	ldr	r0, [pc, #24]	; (401a50 <PWM_1_init+0x2c>)
  401a38:	4b06      	ldr	r3, [pc, #24]	; (401a54 <PWM_1_init+0x30>)
  401a3a:	4798      	blx	r3
  401a3c:	bd08      	pop	{r3, pc}
  401a3e:	bf00      	nop
  401a40:	00401a09 	.word	0x00401a09
  401a44:	004019d5 	.word	0x004019d5
  401a48:	0040482d 	.word	0x0040482d
  401a4c:	4005c000 	.word	0x4005c000
  401a50:	204308a4 	.word	0x204308a4
  401a54:	0040366d 	.word	0x0040366d

00401a58 <CALENDER_INTERFACE_init>:
void CALENDER_INTERFACE_CLOCK_init(void)
{
}

void CALENDER_INTERFACE_init(void)
{
  401a58:	b508      	push	{r3, lr}
	CALENDER_INTERFACE_CLOCK_init();
	calendar_init(&CALENDER_INTERFACE, RTC);
  401a5a:	4902      	ldr	r1, [pc, #8]	; (401a64 <CALENDER_INTERFACE_init+0xc>)
  401a5c:	4802      	ldr	r0, [pc, #8]	; (401a68 <CALENDER_INTERFACE_init+0x10>)
  401a5e:	4b03      	ldr	r3, [pc, #12]	; (401a6c <CALENDER_INTERFACE_init+0x14>)
  401a60:	4798      	blx	r3
  401a62:	bd08      	pop	{r3, pc}
  401a64:	400e1860 	.word	0x400e1860
  401a68:	20430888 	.word	0x20430888
  401a6c:	0040313d 	.word	0x0040313d

00401a70 <delay_driver_init>:
	_pmc_enable_periph_clock(ID_TC2_CHANNEL0);
	timer_init(&TIMER_1, TC2, _tc_get_timer());
}

void delay_driver_init(void)
{
  401a70:	b508      	push	{r3, lr}
	delay_init(SysTick);
  401a72:	4802      	ldr	r0, [pc, #8]	; (401a7c <delay_driver_init+0xc>)
  401a74:	4b02      	ldr	r3, [pc, #8]	; (401a80 <delay_driver_init+0x10>)
  401a76:	4798      	blx	r3
  401a78:	bd08      	pop	{r3, pc}
  401a7a:	bf00      	nop
  401a7c:	e000e010 	.word	0xe000e010
  401a80:	004031b1 	.word	0x004031b1

00401a84 <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401a84:	4b0f      	ldr	r3, [pc, #60]	; (401ac4 <TARGET_IO_PORT_init+0x40>)
  401a86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401a8c:	671a      	str	r2, [r3, #112]	; 0x70
  401a8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a90:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401a94:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401a96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401a9a:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401a9c:	4a0a      	ldr	r2, [pc, #40]	; (401ac8 <TARGET_IO_PORT_init+0x44>)
  401a9e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401aa2:	f043 0310 	orr.w	r3, r3, #16
  401aa6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401aaa:	4b08      	ldr	r3, [pc, #32]	; (401acc <TARGET_IO_PORT_init+0x48>)
  401aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401aae:	f042 0210 	orr.w	r2, r2, #16
  401ab2:	671a      	str	r2, [r3, #112]	; 0x70
  401ab4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ab6:	f042 0210 	orr.w	r2, r2, #16
  401aba:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401abc:	2210      	movs	r2, #16
  401abe:	605a      	str	r2, [r3, #4]
  401ac0:	4770      	bx	lr
  401ac2:	bf00      	nop
  401ac4:	400e0e00 	.word	0x400e0e00
  401ac8:	40088000 	.word	0x40088000
  401acc:	400e1000 	.word	0x400e1000

00401ad0 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401ad0:	4b04      	ldr	r3, [pc, #16]	; (401ae4 <TARGET_IO_CLOCK_init+0x14>)
  401ad2:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401ad4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401ad8:	d103      	bne.n	401ae2 <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401ade:	4b01      	ldr	r3, [pc, #4]	; (401ae4 <TARGET_IO_CLOCK_init+0x14>)
  401ae0:	611a      	str	r2, [r3, #16]
  401ae2:	4770      	bx	lr
  401ae4:	400e0600 	.word	0x400e0600

00401ae8 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  401ae8:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  401aea:	4b06      	ldr	r3, [pc, #24]	; (401b04 <TARGET_IO_init+0x1c>)
  401aec:	4798      	blx	r3
	TARGET_IO_PORT_init();
  401aee:	4b06      	ldr	r3, [pc, #24]	; (401b08 <TARGET_IO_init+0x20>)
  401af0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  401af2:	4b06      	ldr	r3, [pc, #24]	; (401b0c <TARGET_IO_init+0x24>)
  401af4:	4798      	blx	r3
  401af6:	4602      	mov	r2, r0
  401af8:	4905      	ldr	r1, [pc, #20]	; (401b10 <TARGET_IO_init+0x28>)
  401afa:	4806      	ldr	r0, [pc, #24]	; (401b14 <TARGET_IO_init+0x2c>)
  401afc:	4b06      	ldr	r3, [pc, #24]	; (401b18 <TARGET_IO_init+0x30>)
  401afe:	4798      	blx	r3
  401b00:	bd08      	pop	{r3, pc}
  401b02:	bf00      	nop
  401b04:	00401ad1 	.word	0x00401ad1
  401b08:	00401a85 	.word	0x00401a85
  401b0c:	00404d71 	.word	0x00404d71
  401b10:	40028000 	.word	0x40028000
  401b14:	20430844 	.word	0x20430844
  401b18:	00403a21 	.word	0x00403a21

00401b1c <system_init>:
}

void system_init(void)
{
  401b1c:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  401b1e:	4b7b      	ldr	r3, [pc, #492]	; (401d0c <system_init+0x1f0>)
  401b20:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b22:	4b7b      	ldr	r3, [pc, #492]	; (401d10 <system_init+0x1f4>)
  401b24:	699b      	ldr	r3, [r3, #24]
  401b26:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b2a:	d103      	bne.n	401b34 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b30:	4b77      	ldr	r3, [pc, #476]	; (401d10 <system_init+0x1f4>)
  401b32:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b34:	4b76      	ldr	r3, [pc, #472]	; (401d10 <system_init+0x1f4>)
  401b36:	699b      	ldr	r3, [r3, #24]
  401b38:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401b3c:	d103      	bne.n	401b46 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b42:	4b73      	ldr	r3, [pc, #460]	; (401d10 <system_init+0x1f4>)
  401b44:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b46:	4b72      	ldr	r3, [pc, #456]	; (401d10 <system_init+0x1f4>)
  401b48:	699b      	ldr	r3, [r3, #24]
  401b4a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401b4e:	d103      	bne.n	401b58 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401b54:	4b6e      	ldr	r3, [pc, #440]	; (401d10 <system_init+0x1f4>)
  401b56:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b58:	4b6d      	ldr	r3, [pc, #436]	; (401d10 <system_init+0x1f4>)
  401b5a:	699b      	ldr	r3, [r3, #24]
  401b5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401b60:	d103      	bne.n	401b6a <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401b66:	4b6a      	ldr	r3, [pc, #424]	; (401d10 <system_init+0x1f4>)
  401b68:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  401b6a:	4a6a      	ldr	r2, [pc, #424]	; (401d14 <system_init+0x1f8>)
  401b6c:	6853      	ldr	r3, [r2, #4]
  401b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b72:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_CODR = mask;
  401b74:	4b68      	ldr	r3, [pc, #416]	; (401d18 <system_init+0x1fc>)
  401b76:	2104      	movs	r1, #4
  401b78:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401b7a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401b7c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401b7e:	2220      	movs	r2, #32
  401b80:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401b82:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401b84:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401b86:	2240      	movs	r2, #64	; 0x40
  401b88:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401b8a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401b8c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401b8e:	f44f 7000 	mov.w	r0, #512	; 0x200
  401b92:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401b94:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401b96:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b9c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401ba2:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401ba4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401ba6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  401baa:	635d      	str	r5, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bac:	611d      	str	r5, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bae:	601d      	str	r5, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bb0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  401bb4:	635c      	str	r4, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bb6:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bb8:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401bba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401bbe:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401bc4:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401bc6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bc8:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
  401bcc:	635e      	str	r6, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bce:	611e      	str	r6, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bd0:	601e      	str	r6, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401bd6:	2601      	movs	r6, #1
  401bd8:	635e      	str	r6, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bda:	611e      	str	r6, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bdc:	601e      	str	r6, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bde:	2602      	movs	r6, #2
  401be0:	635e      	str	r6, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401be2:	611e      	str	r6, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401be4:	601e      	str	r6, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401be6:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401be8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401bec:	6659      	str	r1, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401bee:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401bf0:	2108      	movs	r1, #8
  401bf2:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401bf4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401bf8:	6659      	str	r1, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401bfa:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401c00:	f44f 7180 	mov.w	r1, #256	; 0x100
  401c04:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c06:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c08:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c0a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c0c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c0e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401c14:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c16:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c18:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401c1e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c20:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c22:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401c24:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401c28:	6159      	str	r1, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  401c2a:	6619      	str	r1, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401c2c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  401c30:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  401c36:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c38:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c3a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401c40:	f44f 6600 	mov.w	r6, #2048	; 0x800
  401c44:	635e      	str	r6, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c46:	611e      	str	r6, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c48:	601e      	str	r6, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c4a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  401c4e:	635e      	str	r6, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c50:	611e      	str	r6, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c52:	601e      	str	r6, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c54:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c56:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c58:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c5a:	635d      	str	r5, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c5c:	611d      	str	r5, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c5e:	601d      	str	r5, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c60:	635c      	str	r4, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c62:	611c      	str	r4, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c64:	601c      	str	r4, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c66:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c68:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c6a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c6c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401c70:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c72:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c74:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401c7a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c7c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c7e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c80:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c82:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c84:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401c8a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c8c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c8e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c94:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c96:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c98:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(D21, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(D21, GPIO_PIN_FUNCTION_OFF);

	IO_BUS_init();
  401c9a:	4b20      	ldr	r3, [pc, #128]	; (401d1c <system_init+0x200>)
  401c9c:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  401c9e:	4b20      	ldr	r3, [pc, #128]	; (401d20 <system_init+0x204>)
  401ca0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  401ca2:	4b20      	ldr	r3, [pc, #128]	; (401d24 <system_init+0x208>)
  401ca4:	4798      	blx	r3
	EXTERNAL_IRQ_3_init();
  401ca6:	4b20      	ldr	r3, [pc, #128]	; (401d28 <system_init+0x20c>)
  401ca8:	4798      	blx	r3
	EXTERNAL_IRQ_2_init();
  401caa:	4b20      	ldr	r3, [pc, #128]	; (401d2c <system_init+0x210>)
  401cac:	4798      	blx	r3

	PWM_0_init();
  401cae:	4b20      	ldr	r3, [pc, #128]	; (401d30 <system_init+0x214>)
  401cb0:	4798      	blx	r3

	PWM_1_init();
  401cb2:	4b20      	ldr	r3, [pc, #128]	; (401d34 <system_init+0x218>)
  401cb4:	4798      	blx	r3

	CALENDER_INTERFACE_init();
  401cb6:	4b20      	ldr	r3, [pc, #128]	; (401d38 <system_init+0x21c>)
  401cb8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401cba:	4b15      	ldr	r3, [pc, #84]	; (401d10 <system_init+0x1f4>)
  401cbc:	699b      	ldr	r3, [r3, #24]
  401cbe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401cc2:	d103      	bne.n	401ccc <system_init+0x1b0>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401cc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401cc8:	4b11      	ldr	r3, [pc, #68]	; (401d10 <system_init+0x1f4>)
  401cca:	611a      	str	r2, [r3, #16]
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  401ccc:	4b1b      	ldr	r3, [pc, #108]	; (401d3c <system_init+0x220>)
  401cce:	4798      	blx	r3
  401cd0:	4602      	mov	r2, r0
  401cd2:	491b      	ldr	r1, [pc, #108]	; (401d40 <system_init+0x224>)
  401cd4:	481b      	ldr	r0, [pc, #108]	; (401d44 <system_init+0x228>)
  401cd6:	4b1c      	ldr	r3, [pc, #112]	; (401d48 <system_init+0x22c>)
  401cd8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401cda:	4b0d      	ldr	r3, [pc, #52]	; (401d10 <system_init+0x1f4>)
  401cdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401ce0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401ce4:	d104      	bne.n	401cf0 <system_init+0x1d4>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401cea:	4b09      	ldr	r3, [pc, #36]	; (401d10 <system_init+0x1f4>)
  401cec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	timer_init(&TIMER_1, TC2, _tc_get_timer());
  401cf0:	4b12      	ldr	r3, [pc, #72]	; (401d3c <system_init+0x220>)
  401cf2:	4798      	blx	r3
  401cf4:	4602      	mov	r2, r0
  401cf6:	4915      	ldr	r1, [pc, #84]	; (401d4c <system_init+0x230>)
  401cf8:	4815      	ldr	r0, [pc, #84]	; (401d50 <system_init+0x234>)
  401cfa:	4b13      	ldr	r3, [pc, #76]	; (401d48 <system_init+0x22c>)
  401cfc:	4798      	blx	r3
	TIMER_0_init();
	TIMER_1_init();

	delay_driver_init();
  401cfe:	4b15      	ldr	r3, [pc, #84]	; (401d54 <system_init+0x238>)
  401d00:	4798      	blx	r3

	TARGET_IO_init();
  401d02:	4b15      	ldr	r3, [pc, #84]	; (401d58 <system_init+0x23c>)
  401d04:	4798      	blx	r3

	ext_irq_init();
  401d06:	4b15      	ldr	r3, [pc, #84]	; (401d5c <system_init+0x240>)
  401d08:	4798      	blx	r3
  401d0a:	bd70      	pop	{r4, r5, r6, pc}
  401d0c:	00403b71 	.word	0x00403b71
  401d10:	400e0600 	.word	0x400e0600
  401d14:	400e1850 	.word	0x400e1850
  401d18:	400e0e00 	.word	0x400e0e00
  401d1c:	00401879 	.word	0x00401879
  401d20:	004018a1 	.word	0x004018a1
  401d24:	004018b9 	.word	0x004018b9
  401d28:	004018dd 	.word	0x004018dd
  401d2c:	00401901 	.word	0x00401901
  401d30:	004019a1 	.word	0x004019a1
  401d34:	00401a25 	.word	0x00401a25
  401d38:	00401a59 	.word	0x00401a59
  401d3c:	00404b49 	.word	0x00404b49
  401d40:	4000c000 	.word	0x4000c000
  401d44:	204308c0 	.word	0x204308c0
  401d48:	004037f9 	.word	0x004037f9
  401d4c:	40014000 	.word	0x40014000
  401d50:	20430850 	.word	0x20430850
  401d54:	00401a71 	.word	0x00401a71
  401d58:	00401ae9 	.word	0x00401ae9
  401d5c:	00403255 	.word	0x00403255

00401d60 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
  401d60:	b13a      	cbz	r2, 401d72 <mem_cpy+0x12>
  401d62:	3801      	subs	r0, #1
  401d64:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  401d66:	f811 3b01 	ldrb.w	r3, [r1], #1
  401d6a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  401d6e:	4291      	cmp	r1, r2
  401d70:	d1f9      	bne.n	401d66 <mem_cpy+0x6>
  401d72:	4770      	bx	lr

00401d74 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  401d74:	b122      	cbz	r2, 401d80 <mem_set+0xc>
  401d76:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  401d78:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  401d7c:	4282      	cmp	r2, r0
  401d7e:	d1fb      	bne.n	401d78 <mem_set+0x4>
  401d80:	4770      	bx	lr

00401d82 <ld_clust>:
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
  401d82:	7eca      	ldrb	r2, [r1, #27]
  401d84:	7e8b      	ldrb	r3, [r1, #26]
  401d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
  401d8a:	7802      	ldrb	r2, [r0, #0]
  401d8c:	2a03      	cmp	r2, #3
  401d8e:	d001      	beq.n	401d94 <ld_clust+0x12>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;

	return cl;
}
  401d90:	4618      	mov	r0, r3
  401d92:	4770      	bx	lr
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
  401d94:	7d48      	ldrb	r0, [r1, #21]
  401d96:	7d0a      	ldrb	r2, [r1, #20]
  401d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  401d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
  401da0:	e7f6      	b.n	401d90 <ld_clust+0xe>

00401da2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
  401da2:	b410      	push	{r4}
	const char *sp;
	char c;
	TCHAR tc;
#endif

	if (*path) {	/* If the pointer is not a null */
  401da4:	6804      	ldr	r4, [r0, #0]
  401da6:	b1f4      	cbz	r4, 401de6 <get_ldnumber+0x44>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
  401da8:	7821      	ldrb	r1, [r4, #0]
  401daa:	2920      	cmp	r1, #32
  401dac:	d90f      	bls.n	401dce <get_ldnumber+0x2c>
  401dae:	293a      	cmp	r1, #58	; 0x3a
  401db0:	d00d      	beq.n	401dce <get_ldnumber+0x2c>
  401db2:	4622      	mov	r2, r4
  401db4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  401db8:	2b20      	cmp	r3, #32
  401dba:	d901      	bls.n	401dc0 <get_ldnumber+0x1e>
  401dbc:	2b3a      	cmp	r3, #58	; 0x3a
  401dbe:	d1f9      	bne.n	401db4 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
  401dc0:	2b3a      	cmp	r3, #58	; 0x3a
  401dc2:	d007      	beq.n	401dd4 <get_ldnumber+0x32>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
  401dc4:	2100      	movs	r1, #0
#endif
	}
	return vol;
}
  401dc6:	4608      	mov	r0, r1
  401dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dcc:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
  401dce:	460b      	mov	r3, r1
  401dd0:	4622      	mov	r2, r4
  401dd2:	e7f5      	b.n	401dc0 <get_ldnumber+0x1e>
			i = *tp++ - '0'; 
  401dd4:	3930      	subs	r1, #48	; 0x30
  401dd6:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
  401dd8:	42a2      	cmp	r2, r4
  401dda:	d107      	bne.n	401dec <get_ldnumber+0x4a>
  401ddc:	2904      	cmp	r1, #4
  401dde:	d805      	bhi.n	401dec <get_ldnumber+0x4a>
					*path = ++tt;
  401de0:	3201      	adds	r2, #1
  401de2:	6002      	str	r2, [r0, #0]
  401de4:	e7ef      	b.n	401dc6 <get_ldnumber+0x24>
	int vol = -1;
  401de6:	f04f 31ff 	mov.w	r1, #4294967295
  401dea:	e7ec      	b.n	401dc6 <get_ldnumber+0x24>
  401dec:	f04f 31ff 	mov.w	r1, #4294967295
  401df0:	e7e9      	b.n	401dc6 <get_ldnumber+0x24>
	...

00401df4 <sync_window>:
{
  401df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
  401df8:	7903      	ldrb	r3, [r0, #4]
  401dfa:	b913      	cbnz	r3, 401e02 <sync_window+0xe>
	FRESULT res = FR_OK;
  401dfc:	2000      	movs	r0, #0
  401dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e02:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
  401e04:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
  401e06:	f100 0730 	add.w	r7, r0, #48	; 0x30
  401e0a:	2301      	movs	r3, #1
  401e0c:	462a      	mov	r2, r5
  401e0e:	4639      	mov	r1, r7
  401e10:	7840      	ldrb	r0, [r0, #1]
  401e12:	4e13      	ldr	r6, [pc, #76]	; (401e60 <sync_window+0x6c>)
  401e14:	47b0      	blx	r6
  401e16:	b9d0      	cbnz	r0, 401e4e <sync_window+0x5a>
			fs->wflag = 0;
  401e18:	2300      	movs	r3, #0
  401e1a:	7123      	strb	r3, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
  401e1c:	6a23      	ldr	r3, [r4, #32]
  401e1e:	1aeb      	subs	r3, r5, r3
  401e20:	69a2      	ldr	r2, [r4, #24]
  401e22:	4293      	cmp	r3, r2
  401e24:	d216      	bcs.n	401e54 <sync_window+0x60>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
  401e26:	78e6      	ldrb	r6, [r4, #3]
  401e28:	2e01      	cmp	r6, #1
  401e2a:	d916      	bls.n	401e5a <sync_window+0x66>
					disk_write(fs->drv, fs->win, wsect, 1);
  401e2c:	f04f 0901 	mov.w	r9, #1
  401e30:	f8df 802c 	ldr.w	r8, [pc, #44]	; 401e60 <sync_window+0x6c>
					wsect += fs->fsize;
  401e34:	69a3      	ldr	r3, [r4, #24]
  401e36:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  401e38:	464b      	mov	r3, r9
  401e3a:	462a      	mov	r2, r5
  401e3c:	4639      	mov	r1, r7
  401e3e:	7860      	ldrb	r0, [r4, #1]
  401e40:	47c0      	blx	r8
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
  401e42:	3e01      	subs	r6, #1
  401e44:	2e01      	cmp	r6, #1
  401e46:	d1f5      	bne.n	401e34 <sync_window+0x40>
	FRESULT res = FR_OK;
  401e48:	2000      	movs	r0, #0
  401e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = FR_DISK_ERR;
  401e4e:	2001      	movs	r0, #1
  401e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FRESULT res = FR_OK;
  401e54:	2000      	movs	r0, #0
  401e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e5a:	2000      	movs	r0, #0
}
  401e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e60:	004016d5 	.word	0x004016d5

00401e64 <move_window>:
{
  401e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
  401e66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401e68:	428b      	cmp	r3, r1
  401e6a:	d014      	beq.n	401e96 <move_window+0x32>
  401e6c:	4604      	mov	r4, r0
  401e6e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
  401e70:	4b0a      	ldr	r3, [pc, #40]	; (401e9c <move_window+0x38>)
  401e72:	4798      	blx	r3
		if (res == FR_OK) {			/* Fill sector window with new data */
  401e74:	4606      	mov	r6, r0
  401e76:	b108      	cbz	r0, 401e7c <move_window+0x18>
}
  401e78:	4630      	mov	r0, r6
  401e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
  401e7c:	2301      	movs	r3, #1
  401e7e:	462a      	mov	r2, r5
  401e80:	f104 0130 	add.w	r1, r4, #48	; 0x30
  401e84:	7860      	ldrb	r0, [r4, #1]
  401e86:	4f06      	ldr	r7, [pc, #24]	; (401ea0 <move_window+0x3c>)
  401e88:	47b8      	blx	r7
  401e8a:	b110      	cbz	r0, 401e92 <move_window+0x2e>
				res = FR_DISK_ERR;
  401e8c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
  401e8e:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
  401e92:	62e5      	str	r5, [r4, #44]	; 0x2c
  401e94:	e7f0      	b.n	401e78 <move_window+0x14>
	FRESULT res = FR_OK;
  401e96:	2600      	movs	r6, #0
  401e98:	e7ee      	b.n	401e78 <move_window+0x14>
  401e9a:	bf00      	nop
  401e9c:	00401df5 	.word	0x00401df5
  401ea0:	00401655 	.word	0x00401655

00401ea4 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  401ea4:	b510      	push	{r4, lr}
  401ea6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
  401ea8:	2300      	movs	r3, #0
  401eaa:	7103      	strb	r3, [r0, #4]
  401eac:	f04f 33ff 	mov.w	r3, #4294967295
  401eb0:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
  401eb2:	4b1d      	ldr	r3, [pc, #116]	; (401f28 <check_fs+0x84>)
  401eb4:	4798      	blx	r3
  401eb6:	b108      	cbz	r0, 401ebc <check_fs+0x18>
		return 3;
  401eb8:	2003      	movs	r0, #3
  401eba:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
  401ebc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401ec0:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401ec8:	b21b      	sxth	r3, r3
  401eca:	4a18      	ldr	r2, [pc, #96]	; (401f2c <check_fs+0x88>)
  401ecc:	4293      	cmp	r3, r2
  401ece:	d001      	beq.n	401ed4 <check_fs+0x30>
		return 2;
  401ed0:	2002      	movs	r0, #2
  401ed2:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
  401ed4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401ed8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401edc:	041b      	lsls	r3, r3, #16
  401ede:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401ee2:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401ee6:	4313      	orrs	r3, r2
  401ee8:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ef4:	4a0e      	ldr	r2, [pc, #56]	; (401f30 <check_fs+0x8c>)
  401ef6:	4293      	cmp	r3, r2
  401ef8:	d013      	beq.n	401f22 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401efa:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401efe:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401f02:	0400      	lsls	r0, r0, #16
  401f04:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401f08:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401f0c:	4318      	orrs	r0, r3
  401f0e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401f12:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401f16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401f1a:	1a80      	subs	r0, r0, r2
  401f1c:	bf18      	it	ne
  401f1e:	2001      	movne	r0, #1
  401f20:	bd10      	pop	{r4, pc}
		return 0;
  401f22:	2000      	movs	r0, #0
		return 0;

	return 1;
}
  401f24:	bd10      	pop	{r4, pc}
  401f26:	bf00      	nop
  401f28:	00401e65 	.word	0x00401e65
  401f2c:	ffffaa55 	.word	0xffffaa55
  401f30:	00544146 	.word	0x00544146

00401f34 <validate>:
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */

	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
  401f34:	b1b0      	cbz	r0, 401f64 <validate+0x30>
{
  401f36:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
  401f38:	6803      	ldr	r3, [r0, #0]
  401f3a:	b1ab      	cbz	r3, 401f68 <validate+0x34>
  401f3c:	7819      	ldrb	r1, [r3, #0]
  401f3e:	b909      	cbnz	r1, 401f44 <validate+0x10>
		return FR_INVALID_OBJECT;
  401f40:	2009      	movs	r0, #9
  401f42:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
  401f44:	88d9      	ldrh	r1, [r3, #6]
  401f46:	8882      	ldrh	r2, [r0, #4]
  401f48:	4291      	cmp	r1, r2
  401f4a:	d001      	beq.n	401f50 <validate+0x1c>
		return FR_INVALID_OBJECT;
  401f4c:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
  401f4e:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
  401f50:	7858      	ldrb	r0, [r3, #1]
  401f52:	4b06      	ldr	r3, [pc, #24]	; (401f6c <validate+0x38>)
  401f54:	4798      	blx	r3
  401f56:	f000 0001 	and.w	r0, r0, #1
		return FR_INVALID_OBJECT;
  401f5a:	2800      	cmp	r0, #0
  401f5c:	bf0c      	ite	eq
  401f5e:	2000      	moveq	r0, #0
  401f60:	2009      	movne	r0, #9
  401f62:	bd08      	pop	{r3, pc}
  401f64:	2009      	movs	r0, #9
  401f66:	4770      	bx	lr
  401f68:	2009      	movs	r0, #9
  401f6a:	bd08      	pop	{r3, pc}
  401f6c:	00401639 	.word	0x00401639

00401f70 <find_volume>:
{
  401f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f74:	b085      	sub	sp, #20
  401f76:	4606      	mov	r6, r0
  401f78:	4617      	mov	r7, r2
	*rfs = 0;
  401f7a:	2300      	movs	r3, #0
  401f7c:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
  401f7e:	4608      	mov	r0, r1
  401f80:	4b9c      	ldr	r3, [pc, #624]	; (4021f4 <find_volume+0x284>)
  401f82:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
  401f84:	1e05      	subs	r5, r0, #0
  401f86:	f2c0 81a3 	blt.w	4022d0 <find_volume+0x360>
	fs = FatFs[vol];					/* Get pointer to the file system object */
  401f8a:	4b9b      	ldr	r3, [pc, #620]	; (4021f8 <find_volume+0x288>)
  401f8c:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401f90:	2c00      	cmp	r4, #0
  401f92:	f000 81a1 	beq.w	4022d8 <find_volume+0x368>
	*rfs = fs;							/* Return pointer to the file system object */
  401f96:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
  401f98:	7823      	ldrb	r3, [r4, #0]
  401f9a:	b17b      	cbz	r3, 401fbc <find_volume+0x4c>
		stat = disk_status(fs->drv);
  401f9c:	7860      	ldrb	r0, [r4, #1]
  401f9e:	4b97      	ldr	r3, [pc, #604]	; (4021fc <find_volume+0x28c>)
  401fa0:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
  401fa2:	f010 0f01 	tst.w	r0, #1
  401fa6:	d109      	bne.n	401fbc <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
  401fa8:	2f00      	cmp	r7, #0
  401faa:	f000 8197 	beq.w	4022dc <find_volume+0x36c>
  401fae:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401fb2:	2800      	cmp	r0, #0
  401fb4:	bf0c      	ite	eq
  401fb6:	2000      	moveq	r0, #0
  401fb8:	200a      	movne	r0, #10
  401fba:	e18a      	b.n	4022d2 <find_volume+0x362>
	fs->fs_type = 0;					/* Clear the file system object */
  401fbc:	2300      	movs	r3, #0
  401fbe:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401fc0:	b2e8      	uxtb	r0, r5
  401fc2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
  401fc4:	4b8e      	ldr	r3, [pc, #568]	; (402200 <find_volume+0x290>)
  401fc6:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401fc8:	f010 0f01 	tst.w	r0, #1
  401fcc:	d001      	beq.n	401fd2 <find_volume+0x62>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
  401fce:	2003      	movs	r0, #3
  401fd0:	e17f      	b.n	4022d2 <find_volume+0x362>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401fd2:	b127      	cbz	r7, 401fde <find_volume+0x6e>
  401fd4:	f010 0f04 	tst.w	r0, #4
  401fd8:	d001      	beq.n	401fde <find_volume+0x6e>
		return FR_WRITE_PROTECTED;
  401fda:	200a      	movs	r0, #10
  401fdc:	e179      	b.n	4022d2 <find_volume+0x362>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
  401fde:	2100      	movs	r1, #0
  401fe0:	4620      	mov	r0, r4
  401fe2:	4b88      	ldr	r3, [pc, #544]	; (402204 <find_volume+0x294>)
  401fe4:	4798      	blx	r3
  401fe6:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
  401fe8:	2801      	cmp	r0, #1
  401fea:	d006      	beq.n	401ffa <find_volume+0x8a>
	bsect = 0;
  401fec:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  401fee:	2b03      	cmp	r3, #3
  401ff0:	f000 8176 	beq.w	4022e0 <find_volume+0x370>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401ff4:	b3a3      	cbz	r3, 402060 <find_volume+0xf0>
  401ff6:	200d      	movs	r0, #13
  401ff8:	e16b      	b.n	4022d2 <find_volume+0x362>
  401ffa:	4623      	mov	r3, r4
  401ffc:	466d      	mov	r5, sp
  401ffe:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
  402002:	4669      	mov	r1, sp
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
  402004:	2700      	movs	r7, #0
  402006:	e005      	b.n	402014 <find_volume+0xa4>
  402008:	463a      	mov	r2, r7
  40200a:	f841 2b04 	str.w	r2, [r1], #4
  40200e:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
  402010:	4283      	cmp	r3, r0
  402012:	d012      	beq.n	40203a <find_volume+0xca>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
  402014:	f893 21f2 	ldrb.w	r2, [r3, #498]	; 0x1f2
  402018:	2a00      	cmp	r2, #0
  40201a:	d0f5      	beq.n	402008 <find_volume+0x98>
  40201c:	f893 61f9 	ldrb.w	r6, [r3, #505]	; 0x1f9
  402020:	f893 21f8 	ldrb.w	r2, [r3, #504]	; 0x1f8
  402024:	0412      	lsls	r2, r2, #16
  402026:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  40202a:	f893 61f6 	ldrb.w	r6, [r3, #502]	; 0x1f6
  40202e:	4332      	orrs	r2, r6
  402030:	f893 61f7 	ldrb.w	r6, [r3, #503]	; 0x1f7
  402034:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  402038:	e7e7      	b.n	40200a <find_volume+0x9a>
  40203a:	af04      	add	r7, sp, #16
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
  40203c:	f04f 0802 	mov.w	r8, #2
  402040:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 402204 <find_volume+0x294>
  402044:	e006      	b.n	402054 <find_volume+0xe4>
  402046:	4631      	mov	r1, r6
  402048:	4620      	mov	r0, r4
  40204a:	47c8      	blx	r9
		} while (!LD2PT(vol) && fmt && ++i < 4);
  40204c:	4603      	mov	r3, r0
  40204e:	b138      	cbz	r0, 402060 <find_volume+0xf0>
  402050:	42af      	cmp	r7, r5
  402052:	d0cc      	beq.n	401fee <find_volume+0x7e>
			bsect = br[i];
  402054:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
  402058:	2e00      	cmp	r6, #0
  40205a:	d1f4      	bne.n	402046 <find_volume+0xd6>
  40205c:	4643      	mov	r3, r8
  40205e:	e7f7      	b.n	402050 <find_volume+0xe0>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
  402060:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  402064:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  402068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40206c:	b21b      	sxth	r3, r3
  40206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402072:	d001      	beq.n	402078 <find_volume+0x108>
		return FR_NO_FILESYSTEM;
  402074:	200d      	movs	r0, #13
  402076:	e12c      	b.n	4022d2 <find_volume+0x362>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
  402078:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  40207c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
  402080:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402084:	d10d      	bne.n	4020a2 <find_volume+0x132>
  402086:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  40208a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  40208e:	0412      	lsls	r2, r2, #16
  402090:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402094:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  402098:	431a      	orrs	r2, r3
  40209a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  40209e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  4020a2:	61a2      	str	r2, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
  4020a4:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  4020a8:	70e1      	strb	r1, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
  4020aa:	1e4b      	subs	r3, r1, #1
  4020ac:	b2db      	uxtb	r3, r3
  4020ae:	2b01      	cmp	r3, #1
  4020b0:	d901      	bls.n	4020b6 <find_volume+0x146>
		return FR_NO_FILESYSTEM;
  4020b2:	200d      	movs	r0, #13
  4020b4:	e10d      	b.n	4022d2 <find_volume+0x362>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
  4020b6:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
  4020ba:	70a7      	strb	r7, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
  4020bc:	b90f      	cbnz	r7, 4020c2 <find_volume+0x152>
		return FR_NO_FILESYSTEM;
  4020be:	200d      	movs	r0, #13
  4020c0:	e107      	b.n	4022d2 <find_volume+0x362>
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
  4020c2:	1e7b      	subs	r3, r7, #1
  4020c4:	423b      	tst	r3, r7
  4020c6:	d001      	beq.n	4020cc <find_volume+0x15c>
		return FR_NO_FILESYSTEM;
  4020c8:	200d      	movs	r0, #13
  4020ca:	e102      	b.n	4022d2 <find_volume+0x362>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
  4020cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4020d0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  4020d4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4020d8:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
  4020da:	f010 0f0f 	tst.w	r0, #15
  4020de:	f040 8101 	bne.w	4022e4 <find_volume+0x374>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
  4020e2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
  4020e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
  4020ea:	ea53 2305 	orrs.w	r3, r3, r5, lsl #8
  4020ee:	d10d      	bne.n	40210c <find_volume+0x19c>
  4020f0:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
  4020f4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  4020f8:	041b      	lsls	r3, r3, #16
  4020fa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4020fe:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
  402102:	432b      	orrs	r3, r5
  402104:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
  402108:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
  40210c:	f894 e03f 	ldrb.w	lr, [r4, #63]	; 0x3f
  402110:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
  402114:	ea55 250e 	orrs.w	r5, r5, lr, lsl #8
  402118:	f000 80e6 	beq.w	4022e8 <find_volume+0x378>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
  40211c:	fb02 fc01 	mul.w	ip, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
  402120:	eb05 1110 	add.w	r1, r5, r0, lsr #4
  402124:	eb01 0e0c 	add.w	lr, r1, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402128:	4573      	cmp	r3, lr
  40212a:	f0c0 80df 	bcc.w	4022ec <find_volume+0x37c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  40212e:	eba3 030e 	sub.w	r3, r3, lr
  402132:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402136:	2b00      	cmp	r3, #0
  402138:	f000 80da 	beq.w	4022f0 <find_volume+0x380>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  40213c:	f640 71f5 	movw	r1, #4085	; 0xff5
  402140:	428b      	cmp	r3, r1
  402142:	bf94      	ite	ls
  402144:	2101      	movls	r1, #1
  402146:	2102      	movhi	r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402148:	f64f 77f5 	movw	r7, #65525	; 0xfff5
  40214c:	42bb      	cmp	r3, r7
  40214e:	f200 80d9 	bhi.w	402304 <find_volume+0x394>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402152:	3302      	adds	r3, #2
  402154:	6163      	str	r3, [r4, #20]
	fs->volbase = bsect;								/* Volume start sector */
  402156:	61e6      	str	r6, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402158:	4435      	add	r5, r6
  40215a:	6225      	str	r5, [r4, #32]
	fs->database = bsect + sysect;						/* Data start sector */
  40215c:	eb0e 0706 	add.w	r7, lr, r6
  402160:	62a7      	str	r7, [r4, #40]	; 0x28
	if (fmt == FS_FAT32) {
  402162:	2903      	cmp	r1, #3
  402164:	d129      	bne.n	4021ba <find_volume+0x24a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402166:	2800      	cmp	r0, #0
  402168:	f040 80c4 	bne.w	4022f4 <find_volume+0x384>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
  40216c:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  402170:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  402174:	0409      	lsls	r1, r1, #16
  402176:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  40217a:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  40217e:	4301      	orrs	r1, r0
  402180:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  402184:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402188:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
  40218a:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
  40218c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402190:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402194:	f0c0 80b0 	bcc.w	4022f8 <find_volume+0x388>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  402198:	f04f 33ff 	mov.w	r3, #4294967295
  40219c:	6123      	str	r3, [r4, #16]
  40219e:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
  4021a0:	2380      	movs	r3, #128	; 0x80
  4021a2:	7163      	strb	r3, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
  4021a4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
  4021a8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  4021ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4021b0:	b21b      	sxth	r3, r3
  4021b2:	2b01      	cmp	r3, #1
  4021b4:	d028      	beq.n	402208 <find_volume+0x298>
  4021b6:	2103      	movs	r1, #3
  4021b8:	e079      	b.n	4022ae <find_volume+0x33e>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4021ba:	2800      	cmp	r0, #0
  4021bc:	f000 809e 	beq.w	4022fc <find_volume+0x38c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  4021c0:	4465      	add	r5, ip
  4021c2:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4021c4:	2902      	cmp	r1, #2
  4021c6:	d10d      	bne.n	4021e4 <find_volume+0x274>
  4021c8:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
  4021ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4021ce:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  4021d2:	f0c0 8095 	bcc.w	402300 <find_volume+0x390>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  4021d6:	f04f 33ff 	mov.w	r3, #4294967295
  4021da:	6123      	str	r3, [r4, #16]
  4021dc:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
  4021de:	2380      	movs	r3, #128	; 0x80
  4021e0:	7163      	strb	r3, [r4, #5]
  4021e2:	e064      	b.n	4022ae <find_volume+0x33e>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4021e4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4021e8:	f003 0301 	and.w	r3, r3, #1
  4021ec:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  4021f0:	e7eb      	b.n	4021ca <find_volume+0x25a>
  4021f2:	bf00      	nop
  4021f4:	00401da3 	.word	0x00401da3
  4021f8:	2043069c 	.word	0x2043069c
  4021fc:	00401639 	.word	0x00401639
  402200:	00401601 	.word	0x00401601
  402204:	00401ea5 	.word	0x00401ea5
		&& move_window(fs, bsect + 1) == FR_OK)
  402208:	1c71      	adds	r1, r6, #1
  40220a:	4620      	mov	r0, r4
  40220c:	4b42      	ldr	r3, [pc, #264]	; (402318 <find_volume+0x3a8>)
  40220e:	4798      	blx	r3
  402210:	2800      	cmp	r0, #0
  402212:	d155      	bne.n	4022c0 <find_volume+0x350>
		fs->fsi_flag = 0;
  402214:	2300      	movs	r3, #0
  402216:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
  402218:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  40221c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402224:	b21b      	sxth	r3, r3
  402226:	4a3d      	ldr	r2, [pc, #244]	; (40231c <find_volume+0x3ac>)
  402228:	4293      	cmp	r3, r2
  40222a:	d14b      	bne.n	4022c4 <find_volume+0x354>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
  40222c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  402230:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  402234:	041b      	lsls	r3, r3, #16
  402236:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40223a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  40223e:	4313      	orrs	r3, r2
  402240:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  402244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402248:	4a35      	ldr	r2, [pc, #212]	; (402320 <find_volume+0x3b0>)
  40224a:	4293      	cmp	r3, r2
  40224c:	d13c      	bne.n	4022c8 <find_volume+0x358>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
  40224e:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  402252:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  402256:	041b      	lsls	r3, r3, #16
  402258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40225c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  402260:	4313      	orrs	r3, r2
  402262:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  402266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40226a:	4a2e      	ldr	r2, [pc, #184]	; (402324 <find_volume+0x3b4>)
  40226c:	4293      	cmp	r3, r2
  40226e:	d12d      	bne.n	4022cc <find_volume+0x35c>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
  402270:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  402274:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  402278:	041b      	lsls	r3, r3, #16
  40227a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40227e:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  402282:	4313      	orrs	r3, r2
  402284:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  402288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40228c:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
  40228e:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  402292:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  402296:	041b      	lsls	r3, r3, #16
  402298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40229c:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  4022a0:	4313      	orrs	r3, r2
  4022a2:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  4022a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4022aa:	60e3      	str	r3, [r4, #12]
  4022ac:	2103      	movs	r1, #3
	fs->fs_type = fmt;	/* FAT sub-type */
  4022ae:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
  4022b0:	4a1d      	ldr	r2, [pc, #116]	; (402328 <find_volume+0x3b8>)
  4022b2:	8a93      	ldrh	r3, [r2, #20]
  4022b4:	3301      	adds	r3, #1
  4022b6:	b29b      	uxth	r3, r3
  4022b8:	8293      	strh	r3, [r2, #20]
  4022ba:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
  4022bc:	2000      	movs	r0, #0
  4022be:	e008      	b.n	4022d2 <find_volume+0x362>
  4022c0:	2103      	movs	r1, #3
  4022c2:	e7f4      	b.n	4022ae <find_volume+0x33e>
  4022c4:	2103      	movs	r1, #3
  4022c6:	e7f2      	b.n	4022ae <find_volume+0x33e>
  4022c8:	2103      	movs	r1, #3
  4022ca:	e7f0      	b.n	4022ae <find_volume+0x33e>
  4022cc:	2103      	movs	r1, #3
  4022ce:	e7ee      	b.n	4022ae <find_volume+0x33e>
	if (vol < 0) return FR_INVALID_DRIVE;
  4022d0:	200b      	movs	r0, #11
}
  4022d2:	b005      	add	sp, #20
  4022d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4022d8:	200c      	movs	r0, #12
  4022da:	e7fa      	b.n	4022d2 <find_volume+0x362>
			return FR_OK;				/* The file system object is valid */
  4022dc:	2000      	movs	r0, #0
  4022de:	e7f8      	b.n	4022d2 <find_volume+0x362>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  4022e0:	2001      	movs	r0, #1
  4022e2:	e7f6      	b.n	4022d2 <find_volume+0x362>
		return FR_NO_FILESYSTEM;
  4022e4:	200d      	movs	r0, #13
  4022e6:	e7f4      	b.n	4022d2 <find_volume+0x362>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
  4022e8:	200d      	movs	r0, #13
  4022ea:	e7f2      	b.n	4022d2 <find_volume+0x362>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4022ec:	200d      	movs	r0, #13
  4022ee:	e7f0      	b.n	4022d2 <find_volume+0x362>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4022f0:	200d      	movs	r0, #13
  4022f2:	e7ee      	b.n	4022d2 <find_volume+0x362>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4022f4:	200d      	movs	r0, #13
  4022f6:	e7ec      	b.n	4022d2 <find_volume+0x362>
		return FR_NO_FILESYSTEM;
  4022f8:	200d      	movs	r0, #13
  4022fa:	e7ea      	b.n	4022d2 <find_volume+0x362>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4022fc:	200d      	movs	r0, #13
  4022fe:	e7e8      	b.n	4022d2 <find_volume+0x362>
		return FR_NO_FILESYSTEM;
  402300:	200d      	movs	r0, #13
  402302:	e7e6      	b.n	4022d2 <find_volume+0x362>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402304:	3302      	adds	r3, #2
  402306:	6163      	str	r3, [r4, #20]
	fs->volbase = bsect;								/* Volume start sector */
  402308:	61e6      	str	r6, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40230a:	4435      	add	r5, r6
  40230c:	6225      	str	r5, [r4, #32]
	fs->database = bsect + sysect;						/* Data start sector */
  40230e:	eb0e 0106 	add.w	r1, lr, r6
  402312:	62a1      	str	r1, [r4, #40]	; 0x28
  402314:	e727      	b.n	402166 <find_volume+0x1f6>
  402316:	bf00      	nop
  402318:	00401e65 	.word	0x00401e65
  40231c:	ffffaa55 	.word	0xffffaa55
  402320:	41615252 	.word	0x41615252
  402324:	61417272 	.word	0x61417272
  402328:	2043069c 	.word	0x2043069c

0040232c <sync_fs>:
{
  40232c:	b538      	push	{r3, r4, r5, lr}
  40232e:	4604      	mov	r4, r0
	res = sync_window(fs);
  402330:	4b2d      	ldr	r3, [pc, #180]	; (4023e8 <sync_fs+0xbc>)
  402332:	4798      	blx	r3
	if (res == FR_OK) {
  402334:	4603      	mov	r3, r0
  402336:	b950      	cbnz	r0, 40234e <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
  402338:	7823      	ldrb	r3, [r4, #0]
  40233a:	2b03      	cmp	r3, #3
  40233c:	d009      	beq.n	402352 <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  40233e:	2200      	movs	r2, #0
  402340:	4611      	mov	r1, r2
  402342:	7860      	ldrb	r0, [r4, #1]
  402344:	4b29      	ldr	r3, [pc, #164]	; (4023ec <sync_fs+0xc0>)
  402346:	4798      	blx	r3
	res = sync_window(fs);
  402348:	1c03      	adds	r3, r0, #0
  40234a:	bf18      	it	ne
  40234c:	2301      	movne	r3, #1
}
  40234e:	4618      	mov	r0, r3
  402350:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
  402352:	7963      	ldrb	r3, [r4, #5]
  402354:	2b01      	cmp	r3, #1
  402356:	d1f2      	bne.n	40233e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
  402358:	f104 0530 	add.w	r5, r4, #48	; 0x30
  40235c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402360:	2100      	movs	r1, #0
  402362:	4628      	mov	r0, r5
  402364:	4b22      	ldr	r3, [pc, #136]	; (4023f0 <sync_fs+0xc4>)
  402366:	4798      	blx	r3
			ST_WORD(fs->win + BS_55AA, 0xAA55);
  402368:	2355      	movs	r3, #85	; 0x55
  40236a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  40236e:	23aa      	movs	r3, #170	; 0xaa
  402370:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
  402374:	2352      	movs	r3, #82	; 0x52
  402376:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  40237a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  40237e:	2361      	movs	r3, #97	; 0x61
  402380:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  402384:	2241      	movs	r2, #65	; 0x41
  402386:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
  40238a:	2172      	movs	r1, #114	; 0x72
  40238c:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  402390:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  402394:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  402398:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
  40239c:	6923      	ldr	r3, [r4, #16]
  40239e:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  4023a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4023a6:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4023aa:	0c1a      	lsrs	r2, r3, #16
  4023ac:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4023b0:	0e1b      	lsrs	r3, r3, #24
  4023b2:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
  4023b6:	68e3      	ldr	r3, [r4, #12]
  4023b8:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  4023bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4023c0:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  4023c4:	0c1a      	lsrs	r2, r3, #16
  4023c6:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4023ca:	0e1b      	lsrs	r3, r3, #24
  4023cc:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
  4023d0:	69e2      	ldr	r2, [r4, #28]
  4023d2:	3201      	adds	r2, #1
  4023d4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
  4023d6:	2301      	movs	r3, #1
  4023d8:	4629      	mov	r1, r5
  4023da:	7860      	ldrb	r0, [r4, #1]
  4023dc:	4d05      	ldr	r5, [pc, #20]	; (4023f4 <sync_fs+0xc8>)
  4023de:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4023e0:	2300      	movs	r3, #0
  4023e2:	7163      	strb	r3, [r4, #5]
  4023e4:	e7ab      	b.n	40233e <sync_fs+0x12>
  4023e6:	bf00      	nop
  4023e8:	00401df5 	.word	0x00401df5
  4023ec:	00401755 	.word	0x00401755
  4023f0:	00401d75 	.word	0x00401d75
  4023f4:	004016d5 	.word	0x004016d5

004023f8 <clust2sect>:
	clst -= 2;
  4023f8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
  4023fa:	6943      	ldr	r3, [r0, #20]
  4023fc:	3b02      	subs	r3, #2
  4023fe:	4299      	cmp	r1, r3
  402400:	d204      	bcs.n	40240c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  402402:	7883      	ldrb	r3, [r0, #2]
  402404:	6a80      	ldr	r0, [r0, #40]	; 0x28
  402406:	fb01 0003 	mla	r0, r1, r3, r0
  40240a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
  40240c:	2000      	movs	r0, #0
}
  40240e:	4770      	bx	lr

00402410 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  402410:	2901      	cmp	r1, #1
  402412:	d969      	bls.n	4024e8 <get_fat+0xd8>
{
  402414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  402416:	6943      	ldr	r3, [r0, #20]
  402418:	4299      	cmp	r1, r3
  40241a:	d267      	bcs.n	4024ec <get_fat+0xdc>
  40241c:	460c      	mov	r4, r1
  40241e:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  402420:	7803      	ldrb	r3, [r0, #0]
  402422:	2b02      	cmp	r3, #2
  402424:	d02e      	beq.n	402484 <get_fat+0x74>
  402426:	2b03      	cmp	r3, #3
  402428:	d040      	beq.n	4024ac <get_fat+0x9c>
  40242a:	2b01      	cmp	r3, #1
  40242c:	d001      	beq.n	402432 <get_fat+0x22>
			val = 1;	/* Internal error */
  40242e:	2001      	movs	r0, #1
  402430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
  402432:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  402436:	6a01      	ldr	r1, [r0, #32]
  402438:	eb01 2155 	add.w	r1, r1, r5, lsr #9
  40243c:	4b2c      	ldr	r3, [pc, #176]	; (4024f0 <get_fat+0xe0>)
  40243e:	4798      	blx	r3
  402440:	b110      	cbz	r0, 402448 <get_fat+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  402442:	f04f 30ff 	mov.w	r0, #4294967295
  402446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
  402448:	1c6f      	adds	r7, r5, #1
  40244a:	f3c5 0508 	ubfx	r5, r5, #0, #9
  40244e:	4435      	add	r5, r6
  402450:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  402454:	6a31      	ldr	r1, [r6, #32]
  402456:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40245a:	4630      	mov	r0, r6
  40245c:	4b24      	ldr	r3, [pc, #144]	; (4024f0 <get_fat+0xe0>)
  40245e:	4798      	blx	r3
  402460:	b110      	cbz	r0, 402468 <get_fat+0x58>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  402462:	f04f 30ff 	mov.w	r0, #4294967295
  402466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc |= fs->win[bc % SS(fs)] << 8;
  402468:	f3c7 0008 	ubfx	r0, r7, #0, #9
  40246c:	4430      	add	r0, r6
  40246e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402472:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
  402476:	f014 0f01 	tst.w	r4, #1
  40247a:	bf14      	ite	ne
  40247c:	0900      	lsrne	r0, r0, #4
  40247e:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  402484:	6a01      	ldr	r1, [r0, #32]
  402486:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  40248a:	4b19      	ldr	r3, [pc, #100]	; (4024f0 <get_fat+0xe0>)
  40248c:	4798      	blx	r3
  40248e:	b110      	cbz	r0, 402496 <get_fat+0x86>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  402490:	f04f 30ff 	mov.w	r0, #4294967295
  402494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 2 % SS(fs)];
  402496:	0060      	lsls	r0, r4, #1
  402498:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
			val = LD_WORD(p);
  40249c:	4430      	add	r0, r6
  40249e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4024a2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4024a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
  4024aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  4024ac:	6a01      	ldr	r1, [r0, #32]
  4024ae:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4024b2:	4b0f      	ldr	r3, [pc, #60]	; (4024f0 <get_fat+0xe0>)
  4024b4:	4798      	blx	r3
  4024b6:	b110      	cbz	r0, 4024be <get_fat+0xae>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  4024b8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4024bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p = &fs->win[clst * 4 % SS(fs)];
  4024be:	00a0      	lsls	r0, r4, #2
  4024c0:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  4024c4:	f100 0230 	add.w	r2, r0, #48	; 0x30
  4024c8:	4432      	add	r2, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
  4024ca:	78d1      	ldrb	r1, [r2, #3]
  4024cc:	7893      	ldrb	r3, [r2, #2]
  4024ce:	041b      	lsls	r3, r3, #16
  4024d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4024d4:	4430      	add	r0, r6
  4024d6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4024da:	4318      	orrs	r0, r3
  4024dc:	7853      	ldrb	r3, [r2, #1]
  4024de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4024e2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
  4024e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
  4024e8:	2001      	movs	r0, #1
  4024ea:	4770      	bx	lr
  4024ec:	2001      	movs	r0, #1
  4024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024f0:	00401e65 	.word	0x00401e65

004024f4 <dir_sdi>:
{
  4024f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024f8:	4605      	mov	r5, r0
	dp->index = (WORD)idx;	/* Current index */
  4024fa:	80c1      	strh	r1, [r0, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
  4024fc:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
  4024fe:	2c01      	cmp	r4, #1
  402500:	d046      	beq.n	402590 <dir_sdi+0x9c>
  402502:	460e      	mov	r6, r1
  402504:	6803      	ldr	r3, [r0, #0]
  402506:	695a      	ldr	r2, [r3, #20]
  402508:	4294      	cmp	r4, r2
  40250a:	d302      	bcc.n	402512 <dir_sdi+0x1e>
		return FR_INT_ERR;
  40250c:	2002      	movs	r0, #2
  40250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402512:	b964      	cbnz	r4, 40252e <dir_sdi+0x3a>
  402514:	781a      	ldrb	r2, [r3, #0]
  402516:	2a03      	cmp	r2, #3
  402518:	d005      	beq.n	402526 <dir_sdi+0x32>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
  40251a:	891a      	ldrh	r2, [r3, #8]
  40251c:	4296      	cmp	r6, r2
  40251e:	d30e      	bcc.n	40253e <dir_sdi+0x4a>
			return FR_INT_ERR;
  402520:	2002      	movs	r0, #2
  402522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = dp->fs->dirbase;
  402526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
  402528:	2a00      	cmp	r2, #0
  40252a:	d0f6      	beq.n	40251a <dir_sdi+0x26>
		clst = dp->fs->dirbase;
  40252c:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
  40252e:	789f      	ldrb	r7, [r3, #2]
  402530:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402532:	42be      	cmp	r6, r7
  402534:	d31a      	bcc.n	40256c <dir_sdi+0x78>
  402536:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
  402538:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4025ac <dir_sdi+0xb8>
  40253c:	e006      	b.n	40254c <dir_sdi+0x58>
		sect = dp->fs->dirbase;
  40253e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	dp->clust = clst;	/* Current cluster# */
  402540:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
  402542:	b9c0      	cbnz	r0, 402576 <dir_sdi+0x82>
  402544:	2002      	movs	r0, #2
}
  402546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40254a:	461e      	mov	r6, r3
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
  40254c:	4621      	mov	r1, r4
  40254e:	6828      	ldr	r0, [r5, #0]
  402550:	47c0      	blx	r8
  402552:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402554:	f1b0 3fff 	cmp.w	r0, #4294967295
  402558:	d01d      	beq.n	402596 <dir_sdi+0xa2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
  40255a:	2801      	cmp	r0, #1
  40255c:	d91e      	bls.n	40259c <dir_sdi+0xa8>
  40255e:	682b      	ldr	r3, [r5, #0]
  402560:	695b      	ldr	r3, [r3, #20]
  402562:	4298      	cmp	r0, r3
  402564:	d21d      	bcs.n	4025a2 <dir_sdi+0xae>
  402566:	1bf3      	subs	r3, r6, r7
		while (idx >= ic) {	/* Follow cluster chain */
  402568:	42be      	cmp	r6, r7
  40256a:	d2ee      	bcs.n	40254a <dir_sdi+0x56>
		sect = clust2sect(dp->fs, clst);
  40256c:	4621      	mov	r1, r4
  40256e:	6828      	ldr	r0, [r5, #0]
  402570:	4b0d      	ldr	r3, [pc, #52]	; (4025a8 <dir_sdi+0xb4>)
  402572:	4798      	blx	r3
  402574:	e7e4      	b.n	402540 <dir_sdi+0x4c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
  402576:	eb00 1016 	add.w	r0, r0, r6, lsr #4
  40257a:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
  40257c:	682b      	ldr	r3, [r5, #0]
  40257e:	3330      	adds	r3, #48	; 0x30
  402580:	f006 060f 	and.w	r6, r6, #15
  402584:	eb03 1646 	add.w	r6, r3, r6, lsl #5
  402588:	616e      	str	r6, [r5, #20]
	return FR_OK;
  40258a:	2000      	movs	r0, #0
  40258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
  402590:	2002      	movs	r0, #2
  402592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402596:	2001      	movs	r0, #1
  402598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_INT_ERR;
  40259c:	2002      	movs	r0, #2
  40259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025a2:	2002      	movs	r0, #2
  4025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025a8:	004023f9 	.word	0x004023f9
  4025ac:	00402411 	.word	0x00402411

004025b0 <put_fat>:
{
  4025b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  4025b4:	2901      	cmp	r1, #1
  4025b6:	f240 808b 	bls.w	4026d0 <put_fat+0x120>
  4025ba:	6943      	ldr	r3, [r0, #20]
  4025bc:	4299      	cmp	r1, r3
  4025be:	d301      	bcc.n	4025c4 <put_fat+0x14>
		res = FR_INT_ERR;
  4025c0:	2702      	movs	r7, #2
  4025c2:	e086      	b.n	4026d2 <put_fat+0x122>
  4025c4:	4616      	mov	r6, r2
  4025c6:	460c      	mov	r4, r1
  4025c8:	4605      	mov	r5, r0
		switch (fs->fs_type) {
  4025ca:	7803      	ldrb	r3, [r0, #0]
  4025cc:	2b02      	cmp	r3, #2
  4025ce:	d04c      	beq.n	40266a <put_fat+0xba>
  4025d0:	2b03      	cmp	r3, #3
  4025d2:	d05e      	beq.n	402692 <put_fat+0xe2>
  4025d4:	2b01      	cmp	r3, #1
  4025d6:	d001      	beq.n	4025dc <put_fat+0x2c>
			res = FR_INT_ERR;
  4025d8:	2702      	movs	r7, #2
  4025da:	e07a      	b.n	4026d2 <put_fat+0x122>
			bc = (UINT)clst; bc += bc / 2;
  4025dc:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4025e0:	6a01      	ldr	r1, [r0, #32]
  4025e2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4025e6:	4b3e      	ldr	r3, [pc, #248]	; (4026e0 <put_fat+0x130>)
  4025e8:	4798      	blx	r3
			if (res != FR_OK) break;
  4025ea:	4607      	mov	r7, r0
  4025ec:	2800      	cmp	r0, #0
  4025ee:	d170      	bne.n	4026d2 <put_fat+0x122>
			p = &fs->win[bc++ % SS(fs)];
  4025f0:	f108 0901 	add.w	r9, r8, #1
  4025f4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4025f8:	f014 0f01 	tst.w	r4, #1
  4025fc:	d01c      	beq.n	402638 <put_fat+0x88>
  4025fe:	44a8      	add	r8, r5
  402600:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
  402604:	f003 030f 	and.w	r3, r3, #15
  402608:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  40260c:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
  402610:	2301      	movs	r3, #1
  402612:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402614:	6a29      	ldr	r1, [r5, #32]
  402616:	eb01 2159 	add.w	r1, r1, r9, lsr #9
  40261a:	4628      	mov	r0, r5
  40261c:	4b30      	ldr	r3, [pc, #192]	; (4026e0 <put_fat+0x130>)
  40261e:	4798      	blx	r3
			if (res != FR_OK) break;
  402620:	2800      	cmp	r0, #0
  402622:	d159      	bne.n	4026d8 <put_fat+0x128>
			p = &fs->win[bc % SS(fs)];
  402624:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402628:	f3c6 1207 	ubfx	r2, r6, #4, #8
  40262c:	44a9      	add	r9, r5
  40262e:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
			fs->wflag = 1;
  402632:	2301      	movs	r3, #1
  402634:	712b      	strb	r3, [r5, #4]
			break;
  402636:	e04c      	b.n	4026d2 <put_fat+0x122>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402638:	44a8      	add	r8, r5
  40263a:	f888 6030 	strb.w	r6, [r8, #48]	; 0x30
			fs->wflag = 1;
  40263e:	2301      	movs	r3, #1
  402640:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402642:	6a29      	ldr	r1, [r5, #32]
  402644:	eb01 2159 	add.w	r1, r1, r9, lsr #9
  402648:	4628      	mov	r0, r5
  40264a:	4b25      	ldr	r3, [pc, #148]	; (4026e0 <put_fat+0x130>)
  40264c:	4798      	blx	r3
			if (res != FR_OK) break;
  40264e:	2800      	cmp	r0, #0
  402650:	d144      	bne.n	4026dc <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
  402652:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402656:	eb05 0309 	add.w	r3, r5, r9
  40265a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40265e:	f023 030f 	bic.w	r3, r3, #15
  402662:	f3c6 2203 	ubfx	r2, r6, #8, #4
  402666:	431a      	orrs	r2, r3
  402668:	e7e0      	b.n	40262c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40266a:	6a01      	ldr	r1, [r0, #32]
  40266c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402670:	4b1b      	ldr	r3, [pc, #108]	; (4026e0 <put_fat+0x130>)
  402672:	4798      	blx	r3
			if (res != FR_OK) break;
  402674:	4607      	mov	r7, r0
  402676:	bb60      	cbnz	r0, 4026d2 <put_fat+0x122>
			p = &fs->win[clst * 2 % SS(fs)];
  402678:	0063      	lsls	r3, r4, #1
  40267a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  40267e:	442b      	add	r3, r5
  402680:	f883 6030 	strb.w	r6, [r3, #48]	; 0x30
  402684:	f3c6 2207 	ubfx	r2, r6, #8, #8
  402688:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fs->wflag = 1;
  40268c:	2301      	movs	r3, #1
  40268e:	712b      	strb	r3, [r5, #4]
			break;
  402690:	e01f      	b.n	4026d2 <put_fat+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402692:	6a01      	ldr	r1, [r0, #32]
  402694:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402698:	4b11      	ldr	r3, [pc, #68]	; (4026e0 <put_fat+0x130>)
  40269a:	4798      	blx	r3
			if (res != FR_OK) break;
  40269c:	4607      	mov	r7, r0
  40269e:	b9c0      	cbnz	r0, 4026d2 <put_fat+0x122>
			p = &fs->win[clst * 4 % SS(fs)];
  4026a0:	00a1      	lsls	r1, r4, #2
  4026a2:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4026a6:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4026aa:	442b      	add	r3, r5
			val |= LD_DWORD(p) & 0xF0000000;
  4026ac:	78da      	ldrb	r2, [r3, #3]
  4026ae:	0612      	lsls	r2, r2, #24
  4026b0:	4429      	add	r1, r5
  4026b2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4026b6:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
  4026b8:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4026bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
  4026c0:	7059      	strb	r1, [r3, #1]
  4026c2:	0c11      	lsrs	r1, r2, #16
  4026c4:	7099      	strb	r1, [r3, #2]
  4026c6:	0e12      	lsrs	r2, r2, #24
  4026c8:	70da      	strb	r2, [r3, #3]
			fs->wflag = 1;
  4026ca:	2301      	movs	r3, #1
  4026cc:	712b      	strb	r3, [r5, #4]
			break;
  4026ce:	e000      	b.n	4026d2 <put_fat+0x122>
		res = FR_INT_ERR;
  4026d0:	2702      	movs	r7, #2
}
  4026d2:	4638      	mov	r0, r7
  4026d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4026d8:	4607      	mov	r7, r0
  4026da:	e7fa      	b.n	4026d2 <put_fat+0x122>
  4026dc:	4607      	mov	r7, r0
	return res;
  4026de:	e7f8      	b.n	4026d2 <put_fat+0x122>
  4026e0:	00401e65 	.word	0x00401e65

004026e4 <create_chain>:
{
  4026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026e8:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4026ea:	4688      	mov	r8, r1
  4026ec:	b931      	cbnz	r1, 4026fc <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
  4026ee:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4026f0:	b18e      	cbz	r6, 402716 <create_chain+0x32>
  4026f2:	6943      	ldr	r3, [r0, #20]
  4026f4:	429e      	cmp	r6, r3
  4026f6:	bf28      	it	cs
  4026f8:	2601      	movcs	r6, #1
  4026fa:	e00d      	b.n	402718 <create_chain+0x34>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4026fc:	4b2a      	ldr	r3, [pc, #168]	; (4027a8 <create_chain+0xc4>)
  4026fe:	4798      	blx	r3
  402700:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* Invalid value */
  402702:	2801      	cmp	r0, #1
  402704:	d945      	bls.n	402792 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
  402706:	f1b0 3fff 	cmp.w	r0, #4294967295
  40270a:	d047      	beq.n	40279c <create_chain+0xb8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40270c:	696a      	ldr	r2, [r5, #20]
  40270e:	4290      	cmp	r0, r2
  402710:	d344      	bcc.n	40279c <create_chain+0xb8>
		scl = clst;
  402712:	4646      	mov	r6, r8
  402714:	e000      	b.n	402718 <create_chain+0x34>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402716:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
  402718:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40271a:	4f23      	ldr	r7, [pc, #140]	; (4027a8 <create_chain+0xc4>)
  40271c:	e00b      	b.n	402736 <create_chain+0x52>
  40271e:	4621      	mov	r1, r4
  402720:	4628      	mov	r0, r5
  402722:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402724:	4603      	mov	r3, r0
  402726:	b170      	cbz	r0, 402746 <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402728:	f1b0 3fff 	cmp.w	r0, #4294967295
  40272c:	d036      	beq.n	40279c <create_chain+0xb8>
  40272e:	2801      	cmp	r0, #1
  402730:	d034      	beq.n	40279c <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
  402732:	42b4      	cmp	r4, r6
  402734:	d031      	beq.n	40279a <create_chain+0xb6>
		ncl++;							/* Next cluster */
  402736:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
  402738:	696b      	ldr	r3, [r5, #20]
  40273a:	429c      	cmp	r4, r3
  40273c:	d3ef      	bcc.n	40271e <create_chain+0x3a>
			if (ncl > scl) return 0;	/* No free cluster */
  40273e:	2e01      	cmp	r6, #1
  402740:	d929      	bls.n	402796 <create_chain+0xb2>
			ncl = 2;
  402742:	2402      	movs	r4, #2
  402744:	e7eb      	b.n	40271e <create_chain+0x3a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402746:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  40274a:	4621      	mov	r1, r4
  40274c:	4628      	mov	r0, r5
  40274e:	4b17      	ldr	r3, [pc, #92]	; (4027ac <create_chain+0xc8>)
  402750:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402752:	4603      	mov	r3, r0
  402754:	b910      	cbnz	r0, 40275c <create_chain+0x78>
  402756:	f1b8 0f00 	cmp.w	r8, #0
  40275a:	d10d      	bne.n	402778 <create_chain+0x94>
	if (res == FR_OK) {
  40275c:	b99b      	cbnz	r3, 402786 <create_chain+0xa2>
		fs->last_clust = ncl;			/* Update FSINFO */
  40275e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402760:	692b      	ldr	r3, [r5, #16]
  402762:	f1b3 3fff 	cmp.w	r3, #4294967295
  402766:	d01c      	beq.n	4027a2 <create_chain+0xbe>
			fs->free_clust--;
  402768:	3b01      	subs	r3, #1
  40276a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
  40276c:	796b      	ldrb	r3, [r5, #5]
  40276e:	f043 0301 	orr.w	r3, r3, #1
  402772:	716b      	strb	r3, [r5, #5]
  402774:	4623      	mov	r3, r4
  402776:	e011      	b.n	40279c <create_chain+0xb8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402778:	4622      	mov	r2, r4
  40277a:	4641      	mov	r1, r8
  40277c:	4628      	mov	r0, r5
  40277e:	4b0b      	ldr	r3, [pc, #44]	; (4027ac <create_chain+0xc8>)
  402780:	4798      	blx	r3
  402782:	4603      	mov	r3, r0
  402784:	e7ea      	b.n	40275c <create_chain+0x78>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402786:	2b01      	cmp	r3, #1
  402788:	bf0c      	ite	eq
  40278a:	f04f 33ff 	moveq.w	r3, #4294967295
  40278e:	2301      	movne	r3, #1
  402790:	e004      	b.n	40279c <create_chain+0xb8>
		if (cs < 2) return 1;			/* Invalid value */
  402792:	2301      	movs	r3, #1
  402794:	e002      	b.n	40279c <create_chain+0xb8>
			if (ncl > scl) return 0;	/* No free cluster */
  402796:	2300      	movs	r3, #0
  402798:	e000      	b.n	40279c <create_chain+0xb8>
		if (ncl == scl) return 0;		/* No free cluster */
  40279a:	2300      	movs	r3, #0
}
  40279c:	4618      	mov	r0, r3
  40279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4027a2:	4623      	mov	r3, r4
  4027a4:	e7fa      	b.n	40279c <create_chain+0xb8>
  4027a6:	bf00      	nop
  4027a8:	00402411 	.word	0x00402411
  4027ac:	004025b1 	.word	0x004025b1

004027b0 <dir_next>:
{
  4027b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
  4027b4:	88c4      	ldrh	r4, [r0, #6]
  4027b6:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
  4027b8:	b2a3      	uxth	r3, r4
  4027ba:	b913      	cbnz	r3, 4027c2 <dir_next+0x12>
		return FR_NO_FILE;
  4027bc:	2004      	movs	r0, #4
  4027be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
  4027c2:	6903      	ldr	r3, [r0, #16]
  4027c4:	b913      	cbnz	r3, 4027cc <dir_next+0x1c>
		return FR_NO_FILE;
  4027c6:	2004      	movs	r0, #4
  4027c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027cc:	460e      	mov	r6, r1
  4027ce:	4605      	mov	r5, r0
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
  4027d0:	f014 070f 	ands.w	r7, r4, #15
  4027d4:	d110      	bne.n	4027f8 <dir_next+0x48>
		dp->sect++;					/* Next sector */
  4027d6:	3301      	adds	r3, #1
  4027d8:	6103      	str	r3, [r0, #16]
		if (!dp->clust) {		/* Static table */
  4027da:	68c1      	ldr	r1, [r0, #12]
  4027dc:	b931      	cbnz	r1, 4027ec <dir_next+0x3c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
  4027de:	6803      	ldr	r3, [r0, #0]
  4027e0:	891b      	ldrh	r3, [r3, #8]
  4027e2:	429c      	cmp	r4, r3
  4027e4:	d308      	bcc.n	4027f8 <dir_next+0x48>
				return FR_NO_FILE;
  4027e6:	2004      	movs	r0, #4
  4027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4027ec:	6800      	ldr	r0, [r0, #0]
  4027ee:	7883      	ldrb	r3, [r0, #2]
  4027f0:	3b01      	subs	r3, #1
  4027f2:	ea13 1814 	ands.w	r8, r3, r4, lsr #4
  4027f6:	d008      	beq.n	40280a <dir_next+0x5a>
	dp->index = (WORD)i;	/* Current index */
  4027f8:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
  4027fa:	682b      	ldr	r3, [r5, #0]
  4027fc:	3330      	adds	r3, #48	; 0x30
  4027fe:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402802:	616b      	str	r3, [r5, #20]
	return FR_OK;
  402804:	2000      	movs	r0, #0
  402806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
  40280a:	4b30      	ldr	r3, [pc, #192]	; (4028cc <dir_next+0x11c>)
  40280c:	4798      	blx	r3
  40280e:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;
  402810:	2801      	cmp	r0, #1
  402812:	d948      	bls.n	4028a6 <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402814:	f1b0 3fff 	cmp.w	r0, #4294967295
  402818:	d048      	beq.n	4028ac <dir_next+0xfc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
  40281a:	6828      	ldr	r0, [r5, #0]
  40281c:	6943      	ldr	r3, [r0, #20]
  40281e:	4599      	cmp	r9, r3
  402820:	d339      	bcc.n	402896 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
  402822:	b916      	cbnz	r6, 40282a <dir_next+0x7a>
  402824:	2004      	movs	r0, #4
  402826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
  40282a:	68e9      	ldr	r1, [r5, #12]
  40282c:	4b28      	ldr	r3, [pc, #160]	; (4028d0 <dir_next+0x120>)
  40282e:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402830:	4681      	mov	r9, r0
  402832:	b910      	cbnz	r0, 40283a <dir_next+0x8a>
  402834:	2007      	movs	r0, #7
  402836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
  40283a:	2801      	cmp	r0, #1
  40283c:	d039      	beq.n	4028b2 <dir_next+0x102>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40283e:	f1b0 3fff 	cmp.w	r0, #4294967295
  402842:	d039      	beq.n	4028b8 <dir_next+0x108>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
  402844:	6828      	ldr	r0, [r5, #0]
  402846:	4b23      	ldr	r3, [pc, #140]	; (4028d4 <dir_next+0x124>)
  402848:	4798      	blx	r3
  40284a:	2800      	cmp	r0, #0
  40284c:	d137      	bne.n	4028be <dir_next+0x10e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
  40284e:	6828      	ldr	r0, [r5, #0]
  402850:	f44f 7200 	mov.w	r2, #512	; 0x200
  402854:	2100      	movs	r1, #0
  402856:	3030      	adds	r0, #48	; 0x30
  402858:	4b1f      	ldr	r3, [pc, #124]	; (4028d8 <dir_next+0x128>)
  40285a:	4798      	blx	r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
  40285c:	682e      	ldr	r6, [r5, #0]
  40285e:	4649      	mov	r1, r9
  402860:	4630      	mov	r0, r6
  402862:	4b1e      	ldr	r3, [pc, #120]	; (4028dc <dir_next+0x12c>)
  402864:	4798      	blx	r3
  402866:	62f0      	str	r0, [r6, #44]	; 0x2c
						dp->fs->wflag = 1;
  402868:	f04f 0a01 	mov.w	sl, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
  40286c:	4e19      	ldr	r6, [pc, #100]	; (4028d4 <dir_next+0x124>)
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40286e:	682b      	ldr	r3, [r5, #0]
  402870:	789a      	ldrb	r2, [r3, #2]
  402872:	4590      	cmp	r8, r2
  402874:	d20b      	bcs.n	40288e <dir_next+0xde>
						dp->fs->wflag = 1;
  402876:	f883 a004 	strb.w	sl, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
  40287a:	6828      	ldr	r0, [r5, #0]
  40287c:	47b0      	blx	r6
  40287e:	bb08      	cbnz	r0, 4028c4 <dir_next+0x114>
						dp->fs->winsect++;
  402880:	682a      	ldr	r2, [r5, #0]
  402882:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402884:	3301      	adds	r3, #1
  402886:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402888:	f108 0801 	add.w	r8, r8, #1
  40288c:	e7ef      	b.n	40286e <dir_next+0xbe>
					dp->fs->winsect -= c;						/* Rewind window offset */
  40288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402890:	eba2 0208 	sub.w	r2, r2, r8
  402894:	62da      	str	r2, [r3, #44]	; 0x2c
				dp->clust = clst;				/* Initialize data for new cluster */
  402896:	f8c5 900c 	str.w	r9, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
  40289a:	4649      	mov	r1, r9
  40289c:	6828      	ldr	r0, [r5, #0]
  40289e:	4b0f      	ldr	r3, [pc, #60]	; (4028dc <dir_next+0x12c>)
  4028a0:	4798      	blx	r3
  4028a2:	6128      	str	r0, [r5, #16]
  4028a4:	e7a8      	b.n	4027f8 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4028a6:	2002      	movs	r0, #2
  4028a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4028ac:	2001      	movs	r0, #1
  4028ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
  4028b2:	2002      	movs	r0, #2
  4028b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4028b8:	2001      	movs	r0, #1
  4028ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
  4028be:	2001      	movs	r0, #1
  4028c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (sync_window(dp->fs)) return FR_DISK_ERR;
  4028c4:	2001      	movs	r0, #1
}
  4028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028ca:	bf00      	nop
  4028cc:	00402411 	.word	0x00402411
  4028d0:	004026e5 	.word	0x004026e5
  4028d4:	00401df5 	.word	0x00401df5
  4028d8:	00401d75 	.word	0x00401d75
  4028dc:	004023f9 	.word	0x004023f9

004028e0 <follow_path>:
{
  4028e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028e4:	b083      	sub	sp, #12
  4028e6:	4604      	mov	r4, r0
  4028e8:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
  4028ea:	780b      	ldrb	r3, [r1, #0]
  4028ec:	2b2f      	cmp	r3, #47	; 0x2f
  4028ee:	d001      	beq.n	4028f4 <follow_path+0x14>
  4028f0:	2b5c      	cmp	r3, #92	; 0x5c
  4028f2:	d100      	bne.n	4028f6 <follow_path+0x16>
		path++;
  4028f4:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
  4028f6:	2300      	movs	r3, #0
  4028f8:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
  4028fa:	782b      	ldrb	r3, [r5, #0]
  4028fc:	2b1f      	cmp	r3, #31
  4028fe:	d904      	bls.n	40290a <follow_path+0x2a>
			i = 8; ni = 11;
  402900:	2308      	movs	r3, #8
  402902:	9300      	str	r3, [sp, #0]
  402904:	230b      	movs	r3, #11
  402906:	9301      	str	r3, [sp, #4]
  402908:	e0b2      	b.n	402a70 <follow_path+0x190>
		res = dir_sdi(dp, 0);
  40290a:	2100      	movs	r1, #0
  40290c:	4620      	mov	r0, r4
  40290e:	4b72      	ldr	r3, [pc, #456]	; (402ad8 <follow_path+0x1f8>)
  402910:	4798      	blx	r3
  402912:	4681      	mov	r9, r0
		dp->dir = 0;
  402914:	2300      	movs	r3, #0
  402916:	6163      	str	r3, [r4, #20]
  402918:	e006      	b.n	402928 <follow_path+0x48>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
  40291a:	f1b8 0f08 	cmp.w	r8, #8
  40291e:	d101      	bne.n	402924 <follow_path+0x44>
  402920:	2a2e      	cmp	r2, #46	; 0x2e
  402922:	d005      	beq.n	402930 <follow_path+0x50>
  402924:	f04f 0906 	mov.w	r9, #6
}
  402928:	4648      	mov	r0, r9
  40292a:	b003      	add	sp, #12
  40292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b <<= 2; continue;
  402930:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  402934:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
  402938:	9800      	ldr	r0, [sp, #0]
  40293a:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40293e:	e011      	b.n	402964 <follow_path+0x84>
			b |= 3;						/* Eliminate NT flag */
  402940:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
  402944:	3a80      	subs	r2, #128	; 0x80
  402946:	4b65      	ldr	r3, [pc, #404]	; (402adc <follow_path+0x1fc>)
  402948:	5c9a      	ldrb	r2, [r3, r2]
  40294a:	e01b      	b.n	402984 <follow_path+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
  40294c:	2b00      	cmp	r3, #0
  40294e:	f040 80b6 	bne.w	402abe <follow_path+0x1de>
			if (IsUpper(c)) {			/* ASCII large capital? */
  402952:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
  402956:	b2db      	uxtb	r3, r3
  402958:	2b19      	cmp	r3, #25
  40295a:	d81e      	bhi.n	40299a <follow_path+0xba>
				b |= 2;
  40295c:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
  402960:	543a      	strb	r2, [r7, r0]
  402962:	3001      	adds	r0, #1
		c = (BYTE)p[si++];
  402964:	3601      	adds	r6, #1
  402966:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
  40296a:	2a2f      	cmp	r2, #47	; 0x2f
  40296c:	bf18      	it	ne
  40296e:	2a20      	cmpne	r2, #32
  402970:	d91d      	bls.n	4029ae <follow_path+0xce>
  402972:	2a5c      	cmp	r2, #92	; 0x5c
  402974:	d01b      	beq.n	4029ae <follow_path+0xce>
		if (c == '.' || i >= ni) {
  402976:	2a2e      	cmp	r2, #46	; 0x2e
  402978:	d0cf      	beq.n	40291a <follow_path+0x3a>
  40297a:	4580      	cmp	r8, r0
  40297c:	d9cd      	bls.n	40291a <follow_path+0x3a>
		if (c >= 0x80) {				/* Extended character? */
  40297e:	f012 0f80 	tst.w	r2, #128	; 0x80
  402982:	d1dd      	bne.n	402940 <follow_path+0x60>
	while (*str && *str != chr) str++;
  402984:	2a22      	cmp	r2, #34	; 0x22
  402986:	f000 8097 	beq.w	402ab8 <follow_path+0x1d8>
  40298a:	4955      	ldr	r1, [pc, #340]	; (402ae0 <follow_path+0x200>)
  40298c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402990:	2b00      	cmp	r3, #0
  402992:	d0db      	beq.n	40294c <follow_path+0x6c>
  402994:	429a      	cmp	r2, r3
  402996:	d1f9      	bne.n	40298c <follow_path+0xac>
  402998:	e7d8      	b.n	40294c <follow_path+0x6c>
				if (IsLower(c)) {		/* ASCII small capital? */
  40299a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
  40299e:	b2db      	uxtb	r3, r3
  4029a0:	2b19      	cmp	r3, #25
  4029a2:	d8dd      	bhi.n	402960 <follow_path+0x80>
					b |= 1; c -= 0x20;
  4029a4:	f04c 0c01 	orr.w	ip, ip, #1
  4029a8:	3a20      	subs	r2, #32
  4029aa:	b2d2      	uxtb	r2, r2
  4029ac:	e7d8      	b.n	402960 <follow_path+0x80>
	*path = &p[si];						/* Return pointer to the next segment */
  4029ae:	4435      	add	r5, r6
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4029b0:	2a21      	cmp	r2, #33	; 0x21
  4029b2:	bf34      	ite	cc
  4029b4:	2304      	movcc	r3, #4
  4029b6:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
  4029b8:	b910      	cbnz	r0, 4029c0 <follow_path+0xe0>
  4029ba:	f04f 0906 	mov.w	r9, #6
  4029be:	e7b3      	b.n	402928 <follow_path+0x48>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
  4029c0:	783a      	ldrb	r2, [r7, #0]
  4029c2:	2ae5      	cmp	r2, #229	; 0xe5
  4029c4:	d01c      	beq.n	402a00 <follow_path+0x120>
	if (ni == 8) b <<= 2;
  4029c6:	f1b8 0f08 	cmp.w	r8, #8
  4029ca:	d01c      	beq.n	402a06 <follow_path+0x126>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
  4029cc:	f00c 0203 	and.w	r2, ip, #3
  4029d0:	2a01      	cmp	r2, #1
  4029d2:	bf08      	it	eq
  4029d4:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
  4029d8:	f00c 0c0c 	and.w	ip, ip, #12
  4029dc:	f1bc 0f04 	cmp.w	ip, #4
  4029e0:	bf08      	it	eq
  4029e2:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
  4029e6:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
  4029e8:	2100      	movs	r1, #0
  4029ea:	4620      	mov	r0, r4
  4029ec:	4b3a      	ldr	r3, [pc, #232]	; (402ad8 <follow_path+0x1f8>)
  4029ee:	4798      	blx	r3
	if (res != FR_OK) return res;
  4029f0:	4681      	mov	r9, r0
  4029f2:	2800      	cmp	r0, #0
  4029f4:	d169      	bne.n	402aca <follow_path+0x1ea>
		res = move_window(dp->fs, dp->sect);
  4029f6:	4e3b      	ldr	r6, [pc, #236]	; (402ae4 <follow_path+0x204>)
		res = dir_next(dp, 0);		/* Next entry */
  4029f8:	f04f 0800 	mov.w	r8, #0
  4029fc:	4f3a      	ldr	r7, [pc, #232]	; (402ae8 <follow_path+0x208>)
  4029fe:	e00d      	b.n	402a1c <follow_path+0x13c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
  402a00:	2205      	movs	r2, #5
  402a02:	703a      	strb	r2, [r7, #0]
  402a04:	e7df      	b.n	4029c6 <follow_path+0xe6>
	if (ni == 8) b <<= 2;
  402a06:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  402a0a:	fa5f fc8c 	uxtb.w	ip, ip
  402a0e:	e7dd      	b.n	4029cc <follow_path+0xec>
		res = dir_next(dp, 0);		/* Next entry */
  402a10:	4641      	mov	r1, r8
  402a12:	4620      	mov	r0, r4
  402a14:	47b8      	blx	r7
	} while (res == FR_OK);
  402a16:	4681      	mov	r9, r0
  402a18:	2800      	cmp	r0, #0
  402a1a:	d156      	bne.n	402aca <follow_path+0x1ea>
		res = move_window(dp->fs, dp->sect);
  402a1c:	6921      	ldr	r1, [r4, #16]
  402a1e:	6820      	ldr	r0, [r4, #0]
  402a20:	47b0      	blx	r6
		if (res != FR_OK) break;
  402a22:	4681      	mov	r9, r0
  402a24:	2800      	cmp	r0, #0
  402a26:	d150      	bne.n	402aca <follow_path+0x1ea>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
  402a28:	6961      	ldr	r1, [r4, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402a2a:	780b      	ldrb	r3, [r1, #0]
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	d038      	beq.n	402aa2 <follow_path+0x1c2>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
  402a30:	f891 a00b 	ldrb.w	sl, [r1, #11]
  402a34:	f01a 0f08 	tst.w	sl, #8
  402a38:	d1ea      	bne.n	402a10 <follow_path+0x130>
  402a3a:	f8d4 b018 	ldr.w	fp, [r4, #24]
  402a3e:	f101 0c0b 	add.w	ip, r1, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  402a42:	465a      	mov	r2, fp
  402a44:	460b      	mov	r3, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402a46:	f813 eb01 	ldrb.w	lr, [r3], #1
  402a4a:	f812 0b01 	ldrb.w	r0, [r2], #1
  402a4e:	4586      	cmp	lr, r0
  402a50:	d1de      	bne.n	402a10 <follow_path+0x130>
  402a52:	4563      	cmp	r3, ip
  402a54:	d1f7      	bne.n	402a46 <follow_path+0x166>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
  402a56:	f89b 300b 	ldrb.w	r3, [fp, #11]
  402a5a:	f013 0f04 	tst.w	r3, #4
  402a5e:	f47f af63 	bne.w	402928 <follow_path+0x48>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
  402a62:	f01a 0f10 	tst.w	sl, #16
  402a66:	d02d      	beq.n	402ac4 <follow_path+0x1e4>
			dp->sclust = ld_clust(dp->fs, dir);
  402a68:	6820      	ldr	r0, [r4, #0]
  402a6a:	4b20      	ldr	r3, [pc, #128]	; (402aec <follow_path+0x20c>)
  402a6c:	4798      	blx	r3
  402a6e:	60a0      	str	r0, [r4, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
  402a70:	782b      	ldrb	r3, [r5, #0]
  402a72:	2b5c      	cmp	r3, #92	; 0x5c
  402a74:	d001      	beq.n	402a7a <follow_path+0x19a>
  402a76:	2b2f      	cmp	r3, #47	; 0x2f
  402a78:	d105      	bne.n	402a86 <follow_path+0x1a6>
  402a7a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  402a7e:	2b2f      	cmp	r3, #47	; 0x2f
  402a80:	d0fb      	beq.n	402a7a <follow_path+0x19a>
  402a82:	2b5c      	cmp	r3, #92	; 0x5c
  402a84:	d0f9      	beq.n	402a7a <follow_path+0x19a>
	sfn = dp->fn;
  402a86:	69a7      	ldr	r7, [r4, #24]
	mem_set(sfn, ' ', 11);
  402a88:	220b      	movs	r2, #11
  402a8a:	2120      	movs	r1, #32
  402a8c:	4638      	mov	r0, r7
  402a8e:	4b18      	ldr	r3, [pc, #96]	; (402af0 <follow_path+0x210>)
  402a90:	4798      	blx	r3
  402a92:	f105 3eff 	add.w	lr, r5, #4294967295
	si = i = b = 0; ni = 8;
  402a96:	2000      	movs	r0, #0
  402a98:	4606      	mov	r6, r0
  402a9a:	f04f 0808 	mov.w	r8, #8
  402a9e:	4684      	mov	ip, r0
  402aa0:	e760      	b.n	402964 <follow_path+0x84>
			ns = dp->fn[NSFLAG];
  402aa2:	69a3      	ldr	r3, [r4, #24]
  402aa4:	7adb      	ldrb	r3, [r3, #11]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
  402aa6:	f003 0304 	and.w	r3, r3, #4
  402aaa:	2b00      	cmp	r3, #0
  402aac:	bf14      	ite	ne
  402aae:	f04f 0904 	movne.w	r9, #4
  402ab2:	f04f 0905 	moveq.w	r9, #5
  402ab6:	e737      	b.n	402928 <follow_path+0x48>
				return FR_INVALID_NAME;
  402ab8:	f04f 0906 	mov.w	r9, #6
  402abc:	e734      	b.n	402928 <follow_path+0x48>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
  402abe:	f04f 0906 	mov.w	r9, #6
  402ac2:	e731      	b.n	402928 <follow_path+0x48>
				res = FR_NO_PATH; break;
  402ac4:	f04f 0905 	mov.w	r9, #5
  402ac8:	e72e      	b.n	402928 <follow_path+0x48>
			ns = dp->fn[NSFLAG];
  402aca:	69a3      	ldr	r3, [r4, #24]
  402acc:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
  402ace:	f1b9 0f04 	cmp.w	r9, #4
  402ad2:	f47f af29 	bne.w	402928 <follow_path+0x48>
  402ad6:	e7e6      	b.n	402aa6 <follow_path+0x1c6>
  402ad8:	004024f5 	.word	0x004024f5
  402adc:	0040c584 	.word	0x0040c584
  402ae0:	0040c634 	.word	0x0040c634
  402ae4:	00401e65 	.word	0x00401e65
  402ae8:	004027b1 	.word	0x004027b1
  402aec:	00401d83 	.word	0x00401d83
  402af0:	00401d75 	.word	0x00401d75

00402af4 <dir_register>:
{
  402af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402af8:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
  402afa:	2100      	movs	r1, #0
  402afc:	4b1b      	ldr	r3, [pc, #108]	; (402b6c <dir_register+0x78>)
  402afe:	4798      	blx	r3
	if (res == FR_OK) {
  402b00:	2800      	cmp	r0, #0
  402b02:	d12b      	bne.n	402b5c <dir_register+0x68>
			res = move_window(dp->fs, dp->sect);
  402b04:	4e1a      	ldr	r6, [pc, #104]	; (402b70 <dir_register+0x7c>)
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
  402b06:	f04f 0801 	mov.w	r8, #1
  402b0a:	4f1a      	ldr	r7, [pc, #104]	; (402b74 <dir_register+0x80>)
  402b0c:	e004      	b.n	402b18 <dir_register+0x24>
  402b0e:	4641      	mov	r1, r8
  402b10:	4620      	mov	r0, r4
  402b12:	47b8      	blx	r7
		} while (res == FR_OK);
  402b14:	4605      	mov	r5, r0
  402b16:	bb30      	cbnz	r0, 402b66 <dir_register+0x72>
			res = move_window(dp->fs, dp->sect);
  402b18:	6921      	ldr	r1, [r4, #16]
  402b1a:	6820      	ldr	r0, [r4, #0]
  402b1c:	47b0      	blx	r6
			if (res != FR_OK) break;
  402b1e:	4605      	mov	r5, r0
  402b20:	bb08      	cbnz	r0, 402b66 <dir_register+0x72>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
  402b22:	6963      	ldr	r3, [r4, #20]
  402b24:	781b      	ldrb	r3, [r3, #0]
  402b26:	2be5      	cmp	r3, #229	; 0xe5
  402b28:	d001      	beq.n	402b2e <dir_register+0x3a>
  402b2a:	2b00      	cmp	r3, #0
  402b2c:	d1ef      	bne.n	402b0e <dir_register+0x1a>
		res = move_window(dp->fs, dp->sect);
  402b2e:	6921      	ldr	r1, [r4, #16]
  402b30:	6820      	ldr	r0, [r4, #0]
  402b32:	4b0f      	ldr	r3, [pc, #60]	; (402b70 <dir_register+0x7c>)
  402b34:	4798      	blx	r3
		if (res == FR_OK) {
  402b36:	4605      	mov	r5, r0
  402b38:	b110      	cbz	r0, 402b40 <dir_register+0x4c>
}
  402b3a:	4628      	mov	r0, r5
  402b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
  402b40:	2220      	movs	r2, #32
  402b42:	2100      	movs	r1, #0
  402b44:	6960      	ldr	r0, [r4, #20]
  402b46:	4b0c      	ldr	r3, [pc, #48]	; (402b78 <dir_register+0x84>)
  402b48:	4798      	blx	r3
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
  402b4a:	220b      	movs	r2, #11
  402b4c:	69a1      	ldr	r1, [r4, #24]
  402b4e:	6960      	ldr	r0, [r4, #20]
  402b50:	4b0a      	ldr	r3, [pc, #40]	; (402b7c <dir_register+0x88>)
  402b52:	4798      	blx	r3
			dp->fs->wflag = 1;
  402b54:	6823      	ldr	r3, [r4, #0]
  402b56:	2201      	movs	r2, #1
  402b58:	711a      	strb	r2, [r3, #4]
  402b5a:	e7ee      	b.n	402b3a <dir_register+0x46>
  402b5c:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
  402b5e:	2804      	cmp	r0, #4
  402b60:	d1eb      	bne.n	402b3a <dir_register+0x46>
  402b62:	2507      	movs	r5, #7
  402b64:	e7e9      	b.n	402b3a <dir_register+0x46>
  402b66:	2d04      	cmp	r5, #4
  402b68:	d0fb      	beq.n	402b62 <dir_register+0x6e>
  402b6a:	e7e6      	b.n	402b3a <dir_register+0x46>
  402b6c:	004024f5 	.word	0x004024f5
  402b70:	00401e65 	.word	0x00401e65
  402b74:	004027b1 	.word	0x004027b1
  402b78:	00401d75 	.word	0x00401d75
  402b7c:	00401d61 	.word	0x00401d61

00402b80 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  402b80:	2901      	cmp	r1, #1
  402b82:	d930      	bls.n	402be6 <remove_chain+0x66>
{
  402b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402b88:	4604      	mov	r4, r0
  402b8a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  402b8c:	6943      	ldr	r3, [r0, #20]
  402b8e:	4299      	cmp	r1, r3
  402b90:	d303      	bcc.n	402b9a <remove_chain+0x1a>
		res = FR_INT_ERR;
  402b92:	2202      	movs	r2, #2
}
  402b94:	4610      	mov	r0, r2
  402b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402b9a:	4f17      	ldr	r7, [pc, #92]	; (402bf8 <remove_chain+0x78>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402b9c:	f04f 0900 	mov.w	r9, #0
  402ba0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402bfc <remove_chain+0x7c>
  402ba4:	e003      	b.n	402bae <remove_chain+0x2e>
  402ba6:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402ba8:	6963      	ldr	r3, [r4, #20]
  402baa:	42ab      	cmp	r3, r5
  402bac:	d9f2      	bls.n	402b94 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402bae:	4631      	mov	r1, r6
  402bb0:	4620      	mov	r0, r4
  402bb2:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  402bb4:	4605      	mov	r5, r0
  402bb6:	b1c8      	cbz	r0, 402bec <remove_chain+0x6c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402bb8:	2801      	cmp	r0, #1
  402bba:	d019      	beq.n	402bf0 <remove_chain+0x70>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
  402bc0:	d018      	beq.n	402bf4 <remove_chain+0x74>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402bc2:	464a      	mov	r2, r9
  402bc4:	4631      	mov	r1, r6
  402bc6:	4620      	mov	r0, r4
  402bc8:	47c0      	blx	r8
			if (res != FR_OK) break;
  402bca:	4602      	mov	r2, r0
  402bcc:	2800      	cmp	r0, #0
  402bce:	d1e1      	bne.n	402b94 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
  402bd0:	6923      	ldr	r3, [r4, #16]
  402bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402bd6:	d0e6      	beq.n	402ba6 <remove_chain+0x26>
				fs->free_clust++;
  402bd8:	3301      	adds	r3, #1
  402bda:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
  402bdc:	7963      	ldrb	r3, [r4, #5]
  402bde:	f043 0301 	orr.w	r3, r3, #1
  402be2:	7163      	strb	r3, [r4, #5]
  402be4:	e7df      	b.n	402ba6 <remove_chain+0x26>
		res = FR_INT_ERR;
  402be6:	2202      	movs	r2, #2
}
  402be8:	4610      	mov	r0, r2
  402bea:	4770      	bx	lr
  402bec:	2200      	movs	r2, #0
  402bee:	e7d1      	b.n	402b94 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402bf0:	2202      	movs	r2, #2
  402bf2:	e7cf      	b.n	402b94 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402bf4:	2201      	movs	r2, #1
  402bf6:	e7cd      	b.n	402b94 <remove_chain+0x14>
  402bf8:	00402411 	.word	0x00402411
  402bfc:	004025b1 	.word	0x004025b1

00402c00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
  402c00:	b510      	push	{r4, lr}
  402c02:	b084      	sub	sp, #16
  402c04:	9001      	str	r0, [sp, #4]
  402c06:	9100      	str	r1, [sp, #0]
  402c08:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
  402c0a:	a804      	add	r0, sp, #16
  402c0c:	f840 1d04 	str.w	r1, [r0, #-4]!

	vol = get_ldnumber(&rp);
  402c10:	4b12      	ldr	r3, [pc, #72]	; (402c5c <f_mount+0x5c>)
  402c12:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
  402c14:	2800      	cmp	r0, #0
  402c16:	db16      	blt.n	402c46 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
  402c18:	4b11      	ldr	r3, [pc, #68]	; (402c60 <f_mount+0x60>)
  402c1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
  402c1e:	b10b      	cbz	r3, 402c24 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
  402c20:	2200      	movs	r2, #0
  402c22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  402c24:	9b01      	ldr	r3, [sp, #4]
  402c26:	b19b      	cbz	r3, 402c50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
  402c28:	2200      	movs	r2, #0
  402c2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
  402c2c:	9b01      	ldr	r3, [sp, #4]
  402c2e:	4a0c      	ldr	r2, [pc, #48]	; (402c60 <f_mount+0x60>)
  402c30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
  402c34:	b153      	cbz	r3, 402c4c <f_mount+0x4c>
  402c36:	2c01      	cmp	r4, #1
  402c38:	d108      	bne.n	402c4c <f_mount+0x4c>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
  402c3a:	2200      	movs	r2, #0
  402c3c:	4669      	mov	r1, sp
  402c3e:	a801      	add	r0, sp, #4
  402c40:	4b08      	ldr	r3, [pc, #32]	; (402c64 <f_mount+0x64>)
  402c42:	4798      	blx	r3
	LEAVE_FF(fs, res);
  402c44:	e000      	b.n	402c48 <f_mount+0x48>
	if (vol < 0) return FR_INVALID_DRIVE;
  402c46:	200b      	movs	r0, #11
}
  402c48:	b004      	add	sp, #16
  402c4a:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
  402c4c:	2000      	movs	r0, #0
  402c4e:	e7fb      	b.n	402c48 <f_mount+0x48>
	FatFs[vol] = fs;					/* Register new fs object */
  402c50:	2300      	movs	r3, #0
  402c52:	4a03      	ldr	r2, [pc, #12]	; (402c60 <f_mount+0x60>)
  402c54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
  402c58:	4618      	mov	r0, r3
  402c5a:	e7f5      	b.n	402c48 <f_mount+0x48>
  402c5c:	00401da3 	.word	0x00401da3
  402c60:	2043069c 	.word	0x2043069c
  402c64:	00401f71 	.word	0x00401f71

00402c68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c6c:	b08c      	sub	sp, #48	; 0x30
  402c6e:	9101      	str	r1, [sp, #4]
	DEFINE_NAMEBUF;
#if !_FS_READONLY
	DWORD dw, cl;
#endif

	if (!fp) return FR_INVALID_OBJECT;
  402c70:	2800      	cmp	r0, #0
  402c72:	f000 80a3 	beq.w	402dbc <f_open+0x154>
  402c76:	4604      	mov	r4, r0
  402c78:	4615      	mov	r5, r2
	fp->fs = 0;			/* Clear file object */
  402c7a:	2300      	movs	r3, #0
  402c7c:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
  402c7e:	f002 021e 	and.w	r2, r2, #30
  402c82:	a901      	add	r1, sp, #4
  402c84:	a805      	add	r0, sp, #20
  402c86:	4b54      	ldr	r3, [pc, #336]	; (402dd8 <f_open+0x170>)
  402c88:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
  402c8a:	4606      	mov	r6, r0
  402c8c:	2800      	cmp	r0, #0
  402c8e:	f040 8096 	bne.w	402dbe <f_open+0x156>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402c92:	f005 081f 	and.w	r8, r5, #31
		INIT_BUF(dj);
  402c96:	ab02      	add	r3, sp, #8
  402c98:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
  402c9a:	9901      	ldr	r1, [sp, #4]
  402c9c:	a805      	add	r0, sp, #20
  402c9e:	4b4f      	ldr	r3, [pc, #316]	; (402ddc <f_open+0x174>)
  402ca0:	4798      	blx	r3
  402ca2:	4603      	mov	r3, r0
		dir = dj.dir;
  402ca4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
  402ca6:	b917      	cbnz	r7, 402cae <f_open+0x46>
  402ca8:	2800      	cmp	r0, #0
  402caa:	f000 808c 	beq.w	402dc6 <f_open+0x15e>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402cae:	f015 0f1c 	tst.w	r5, #28
  402cb2:	d050      	beq.n	402d56 <f_open+0xee>
			if (res != FR_OK) {					/* No file, create new */
  402cb4:	b94b      	cbnz	r3, 402cca <f_open+0x62>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402cb6:	7afb      	ldrb	r3, [r7, #11]
  402cb8:	f013 0f11 	tst.w	r3, #17
  402cbc:	f040 8085 	bne.w	402dca <f_open+0x162>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402cc0:	f015 0f04 	tst.w	r5, #4
  402cc4:	d008      	beq.n	402cd8 <f_open+0x70>
						res = FR_EXIST;
  402cc6:	2608      	movs	r6, #8
  402cc8:	e079      	b.n	402dbe <f_open+0x156>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402cca:	2b04      	cmp	r3, #4
  402ccc:	d03e      	beq.n	402d4c <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
  402cce:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
  402cd2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d17b      	bne.n	402dd0 <f_open+0x168>
  402cd8:	f018 0f08 	tst.w	r8, #8
  402cdc:	d04c      	beq.n	402d78 <f_open+0x110>
				dw = GET_FATTIME();
  402cde:	4b40      	ldr	r3, [pc, #256]	; (402de0 <f_open+0x178>)
  402ce0:	4798      	blx	r3
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
  402ce2:	b2c1      	uxtb	r1, r0
  402ce4:	73b9      	strb	r1, [r7, #14]
  402ce6:	f3c0 2207 	ubfx	r2, r0, #8, #8
  402cea:	73fa      	strb	r2, [r7, #15]
  402cec:	f3c0 4307 	ubfx	r3, r0, #16, #8
  402cf0:	743b      	strb	r3, [r7, #16]
  402cf2:	0e00      	lsrs	r0, r0, #24
  402cf4:	7478      	strb	r0, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
  402cf6:	75b9      	strb	r1, [r7, #22]
  402cf8:	75fa      	strb	r2, [r7, #23]
  402cfa:	763b      	strb	r3, [r7, #24]
  402cfc:	7678      	strb	r0, [r7, #25]
				dir[DIR_Attr] = 0;				/* Reset attribute */
  402cfe:	2500      	movs	r5, #0
  402d00:	72fd      	strb	r5, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
  402d02:	773d      	strb	r5, [r7, #28]
  402d04:	777d      	strb	r5, [r7, #29]
  402d06:	77bd      	strb	r5, [r7, #30]
  402d08:	77fd      	strb	r5, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
  402d0a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402d0e:	4639      	mov	r1, r7
  402d10:	4648      	mov	r0, r9
  402d12:	4b34      	ldr	r3, [pc, #208]	; (402de4 <f_open+0x17c>)
  402d14:	4798      	blx	r3
	ST_WORD(dir + DIR_FstClusLO, cl);
  402d16:	76bd      	strb	r5, [r7, #26]
  402d18:	76fd      	strb	r5, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
  402d1a:	753d      	strb	r5, [r7, #20]
  402d1c:	757d      	strb	r5, [r7, #21]
				st_clust(dir, 0);				/* Reset cluster */
				dj.fs->wflag = 1;
  402d1e:	2301      	movs	r3, #1
  402d20:	f889 3004 	strb.w	r3, [r9, #4]
				if (cl) {						/* Remove the cluster chain if exist */
  402d24:	4605      	mov	r5, r0
  402d26:	b328      	cbz	r0, 402d74 <f_open+0x10c>
					dw = dj.fs->winsect;
  402d28:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
					res = remove_chain(dj.fs, cl);
  402d2c:	4601      	mov	r1, r0
  402d2e:	4648      	mov	r0, r9
  402d30:	4b2d      	ldr	r3, [pc, #180]	; (402de8 <f_open+0x180>)
  402d32:	4798      	blx	r3
					if (res == FR_OK) {
  402d34:	4603      	mov	r3, r0
  402d36:	2800      	cmp	r0, #0
  402d38:	d14a      	bne.n	402dd0 <f_open+0x168>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402d3a:	9805      	ldr	r0, [sp, #20]
  402d3c:	3d01      	subs	r5, #1
  402d3e:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
  402d40:	4651      	mov	r1, sl
  402d42:	4b2a      	ldr	r3, [pc, #168]	; (402dec <f_open+0x184>)
  402d44:	4798      	blx	r3
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
  402d46:	b1a8      	cbz	r0, 402d74 <f_open+0x10c>
						res = move_window(dj.fs, dw);
  402d48:	4606      	mov	r6, r0
  402d4a:	e038      	b.n	402dbe <f_open+0x156>
					res = dir_register(&dj);
  402d4c:	a805      	add	r0, sp, #20
  402d4e:	4b28      	ldr	r3, [pc, #160]	; (402df0 <f_open+0x188>)
  402d50:	4798      	blx	r3
  402d52:	4603      	mov	r3, r0
  402d54:	e7bb      	b.n	402cce <f_open+0x66>
			if (res == FR_OK) {					/* Following succeeded */
  402d56:	2b00      	cmp	r3, #0
  402d58:	d13a      	bne.n	402dd0 <f_open+0x168>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
  402d5a:	7afb      	ldrb	r3, [r7, #11]
  402d5c:	f013 0f10 	tst.w	r3, #16
  402d60:	d135      	bne.n	402dce <f_open+0x166>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  402d62:	f015 0f02 	tst.w	r5, #2
  402d66:	d002      	beq.n	402d6e <f_open+0x106>
  402d68:	f013 0f01 	tst.w	r3, #1
  402d6c:	d132      	bne.n	402dd4 <f_open+0x16c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
  402d6e:	f015 0f08 	tst.w	r5, #8
  402d72:	d001      	beq.n	402d78 <f_open+0x110>
				mode |= FA__WRITTEN;
  402d74:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
  402d78:	9d05      	ldr	r5, [sp, #20]
  402d7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402d7c:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
  402d7e:	6227      	str	r7, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
  402d80:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
  402d84:	f04f 0800 	mov.w	r8, #0
  402d88:	f884 8007 	strb.w	r8, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
  402d8c:	4639      	mov	r1, r7
  402d8e:	4628      	mov	r0, r5
  402d90:	4b14      	ldr	r3, [pc, #80]	; (402de4 <f_open+0x17c>)
  402d92:	4798      	blx	r3
  402d94:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
  402d96:	7ffa      	ldrb	r2, [r7, #31]
  402d98:	7fbb      	ldrb	r3, [r7, #30]
  402d9a:	041b      	lsls	r3, r3, #16
  402d9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402da0:	7f3a      	ldrb	r2, [r7, #28]
  402da2:	4313      	orrs	r3, r2
  402da4:	7f7a      	ldrb	r2, [r7, #29]
  402da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402daa:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
  402dac:	f8c4 8008 	str.w	r8, [r4, #8]
			fp->dsect = 0;
  402db0:	f8c4 8018 	str.w	r8, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
  402db4:	6025      	str	r5, [r4, #0]
			fp->id = fp->fs->id;
  402db6:	88eb      	ldrh	r3, [r5, #6]
  402db8:	80a3      	strh	r3, [r4, #4]
  402dba:	e000      	b.n	402dbe <f_open+0x156>
	if (!fp) return FR_INVALID_OBJECT;
  402dbc:	2609      	movs	r6, #9
		}
	}

	LEAVE_FF(dj.fs, res);
}
  402dbe:	4630      	mov	r0, r6
  402dc0:	b00c      	add	sp, #48	; 0x30
  402dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dc6:	2606      	movs	r6, #6
  402dc8:	e7f9      	b.n	402dbe <f_open+0x156>
					res = FR_DENIED;
  402dca:	2607      	movs	r6, #7
  402dcc:	e7f7      	b.n	402dbe <f_open+0x156>
					res = FR_NO_FILE;
  402dce:	2304      	movs	r3, #4
  402dd0:	461e      	mov	r6, r3
  402dd2:	e7f4      	b.n	402dbe <f_open+0x156>
						res = FR_DENIED;
  402dd4:	2307      	movs	r3, #7
  402dd6:	e7fb      	b.n	402dd0 <f_open+0x168>
  402dd8:	00401f71 	.word	0x00401f71
  402ddc:	004028e1 	.word	0x004028e1
  402de0:	004030d5 	.word	0x004030d5
  402de4:	00401d83 	.word	0x00401d83
  402de8:	00402b81 	.word	0x00402b81
  402dec:	00401e65 	.word	0x00401e65
  402df0:	00402af5 	.word	0x00402af5

00402df4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
  402df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402df8:	b083      	sub	sp, #12
  402dfa:	4604      	mov	r4, r0
  402dfc:	4688      	mov	r8, r1
  402dfe:	4615      	mov	r5, r2
  402e00:	4699      	mov	r9, r3
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;

	*br = 0;	/* Clear read byte counter */
  402e02:	2300      	movs	r3, #0
  402e04:	f8c9 3000 	str.w	r3, [r9]

	res = validate(fp);							/* Check validity */
  402e08:	4b5c      	ldr	r3, [pc, #368]	; (402f7c <f_read+0x188>)
  402e0a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  402e0c:	9001      	str	r0, [sp, #4]
  402e0e:	b948      	cbnz	r0, 402e24 <f_read+0x30>
	if (fp->err)								/* Check error */
  402e10:	79e3      	ldrb	r3, [r4, #7]
  402e12:	2b00      	cmp	r3, #0
  402e14:	f040 80b0 	bne.w	402f78 <f_read+0x184>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  402e18:	79a3      	ldrb	r3, [r4, #6]
  402e1a:	f013 0f01 	tst.w	r3, #1
  402e1e:	d105      	bne.n	402e2c <f_read+0x38>
		LEAVE_FF(fp->fs, FR_DENIED);
  402e20:	2307      	movs	r3, #7
  402e22:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  402e24:	9801      	ldr	r0, [sp, #4]
  402e26:	b003      	add	sp, #12
  402e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->fsize - fp->fptr;
  402e2c:	68e6      	ldr	r6, [r4, #12]
  402e2e:	68a3      	ldr	r3, [r4, #8]
  402e30:	1af6      	subs	r6, r6, r3
  402e32:	42ae      	cmp	r6, r5
  402e34:	bf28      	it	cs
  402e36:	462e      	movcs	r6, r5
	for ( ;  btr;								/* Repeat until all data read */
  402e38:	2e00      	cmp	r6, #0
  402e3a:	d155      	bne.n	402ee8 <f_read+0xf4>
  402e3c:	e7f2      	b.n	402e24 <f_read+0x30>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  402e3e:	6961      	ldr	r1, [r4, #20]
  402e40:	4b4f      	ldr	r3, [pc, #316]	; (402f80 <f_read+0x18c>)
  402e42:	4798      	blx	r3
  402e44:	e060      	b.n	402f08 <f_read+0x114>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  402e46:	2302      	movs	r3, #2
  402e48:	71e3      	strb	r3, [r4, #7]
  402e4a:	9301      	str	r3, [sp, #4]
  402e4c:	e7ea      	b.n	402e24 <f_read+0x30>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402e4e:	2301      	movs	r3, #1
  402e50:	71e3      	strb	r3, [r4, #7]
  402e52:	9301      	str	r3, [sp, #4]
  402e54:	e7e6      	b.n	402e24 <f_read+0x30>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402e56:	2302      	movs	r3, #2
  402e58:	71e3      	strb	r3, [r4, #7]
  402e5a:	9301      	str	r3, [sp, #4]
  402e5c:	e7e2      	b.n	402e24 <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
  402e5e:	2301      	movs	r3, #1
  402e60:	71e3      	strb	r3, [r4, #7]
  402e62:	9301      	str	r3, [sp, #4]
  402e64:	e7de      	b.n	402e24 <f_read+0x30>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  402e66:	f44f 7200 	mov.w	r2, #512	; 0x200
  402e6a:	f104 0124 	add.w	r1, r4, #36	; 0x24
  402e6e:	eb08 2040 	add.w	r0, r8, r0, lsl #9
  402e72:	4b44      	ldr	r3, [pc, #272]	; (402f84 <f_read+0x190>)
  402e74:	4798      	blx	r3
  402e76:	e074      	b.n	402f62 <f_read+0x16e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
  402e78:	69a2      	ldr	r2, [r4, #24]
  402e7a:	4295      	cmp	r5, r2
  402e7c:	d01a      	beq.n	402eb4 <f_read+0xc0>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
  402e7e:	79a3      	ldrb	r3, [r4, #6]
  402e80:	f013 0f40 	tst.w	r3, #64	; 0x40
  402e84:	d00c      	beq.n	402ea0 <f_read+0xac>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  402e86:	2301      	movs	r3, #1
  402e88:	f104 0124 	add.w	r1, r4, #36	; 0x24
  402e8c:	f89a 0001 	ldrb.w	r0, [sl, #1]
  402e90:	4f3d      	ldr	r7, [pc, #244]	; (402f88 <f_read+0x194>)
  402e92:	47b8      	blx	r7
  402e94:	2800      	cmp	r0, #0
  402e96:	d167      	bne.n	402f68 <f_read+0x174>
					fp->flag &= ~FA__DIRTY;
  402e98:	79a3      	ldrb	r3, [r4, #6]
  402e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402e9e:	71a3      	strb	r3, [r4, #6]
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
  402ea0:	6820      	ldr	r0, [r4, #0]
  402ea2:	2301      	movs	r3, #1
  402ea4:	462a      	mov	r2, r5
  402ea6:	f104 0124 	add.w	r1, r4, #36	; 0x24
  402eaa:	7840      	ldrb	r0, [r0, #1]
  402eac:	4f37      	ldr	r7, [pc, #220]	; (402f8c <f_read+0x198>)
  402eae:	47b8      	blx	r7
  402eb0:	2800      	cmp	r0, #0
  402eb2:	d15d      	bne.n	402f70 <f_read+0x17c>
			fp->dsect = sect;
  402eb4:	61a5      	str	r5, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  402eb6:	68a1      	ldr	r1, [r4, #8]
  402eb8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402ebc:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
  402ec0:	42b5      	cmp	r5, r6
  402ec2:	bf28      	it	cs
  402ec4:	4635      	movcs	r5, r6
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  402ec6:	3124      	adds	r1, #36	; 0x24
  402ec8:	462a      	mov	r2, r5
  402eca:	4421      	add	r1, r4
  402ecc:	4640      	mov	r0, r8
  402ece:	4b2d      	ldr	r3, [pc, #180]	; (402f84 <f_read+0x190>)
  402ed0:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  402ed2:	44a8      	add	r8, r5
  402ed4:	68a3      	ldr	r3, [r4, #8]
  402ed6:	442b      	add	r3, r5
  402ed8:	60a3      	str	r3, [r4, #8]
  402eda:	f8d9 3000 	ldr.w	r3, [r9]
  402ede:	442b      	add	r3, r5
  402ee0:	f8c9 3000 	str.w	r3, [r9]
	for ( ;  btr;								/* Repeat until all data read */
  402ee4:	1b76      	subs	r6, r6, r5
  402ee6:	d09d      	beq.n	402e24 <f_read+0x30>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  402ee8:	68a2      	ldr	r2, [r4, #8]
  402eea:	f3c2 0308 	ubfx	r3, r2, #0, #9
  402eee:	2b00      	cmp	r3, #0
  402ef0:	d1e1      	bne.n	402eb6 <f_read+0xc2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  402ef2:	6820      	ldr	r0, [r4, #0]
  402ef4:	7883      	ldrb	r3, [r0, #2]
  402ef6:	3b01      	subs	r3, #1
  402ef8:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  402efc:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  402f00:	d108      	bne.n	402f14 <f_read+0x120>
				if (fp->fptr == 0) {			/* On the top of the file? */
  402f02:	2a00      	cmp	r2, #0
  402f04:	d19b      	bne.n	402e3e <f_read+0x4a>
					clst = fp->sclust;			/* Follow from the origin */
  402f06:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  402f08:	2801      	cmp	r0, #1
  402f0a:	d99c      	bls.n	402e46 <f_read+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402f0c:	f1b0 3fff 	cmp.w	r0, #4294967295
  402f10:	d09d      	beq.n	402e4e <f_read+0x5a>
				fp->clust = clst;				/* Update current cluster */
  402f12:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  402f14:	f8d4 a000 	ldr.w	sl, [r4]
  402f18:	6961      	ldr	r1, [r4, #20]
  402f1a:	4650      	mov	r0, sl
  402f1c:	4b1c      	ldr	r3, [pc, #112]	; (402f90 <f_read+0x19c>)
  402f1e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402f20:	4605      	mov	r5, r0
  402f22:	2800      	cmp	r0, #0
  402f24:	d097      	beq.n	402e56 <f_read+0x62>
			sect += csect;
  402f26:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  402f28:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  402f2c:	d0a4      	beq.n	402e78 <f_read+0x84>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  402f2e:	f89a 3002 	ldrb.w	r3, [sl, #2]
  402f32:	eb07 020b 	add.w	r2, r7, fp
  402f36:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  402f38:	bf88      	it	hi
  402f3a:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
  402f3e:	fa5f f38b 	uxtb.w	r3, fp
  402f42:	462a      	mov	r2, r5
  402f44:	4641      	mov	r1, r8
  402f46:	f89a 0001 	ldrb.w	r0, [sl, #1]
  402f4a:	4f10      	ldr	r7, [pc, #64]	; (402f8c <f_read+0x198>)
  402f4c:	47b8      	blx	r7
  402f4e:	2800      	cmp	r0, #0
  402f50:	d185      	bne.n	402e5e <f_read+0x6a>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  402f52:	79a3      	ldrb	r3, [r4, #6]
  402f54:	f013 0f40 	tst.w	r3, #64	; 0x40
  402f58:	d003      	beq.n	402f62 <f_read+0x16e>
  402f5a:	69a0      	ldr	r0, [r4, #24]
  402f5c:	1b40      	subs	r0, r0, r5
  402f5e:	4583      	cmp	fp, r0
  402f60:	d881      	bhi.n	402e66 <f_read+0x72>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  402f62:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  402f66:	e7b4      	b.n	402ed2 <f_read+0xde>
						ABORT(fp->fs, FR_DISK_ERR);
  402f68:	2301      	movs	r3, #1
  402f6a:	71e3      	strb	r3, [r4, #7]
  402f6c:	9301      	str	r3, [sp, #4]
  402f6e:	e759      	b.n	402e24 <f_read+0x30>
					ABORT(fp->fs, FR_DISK_ERR);
  402f70:	2301      	movs	r3, #1
  402f72:	71e3      	strb	r3, [r4, #7]
  402f74:	9301      	str	r3, [sp, #4]
  402f76:	e755      	b.n	402e24 <f_read+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
  402f78:	9301      	str	r3, [sp, #4]
  402f7a:	e753      	b.n	402e24 <f_read+0x30>
  402f7c:	00401f35 	.word	0x00401f35
  402f80:	00402411 	.word	0x00402411
  402f84:	00401d61 	.word	0x00401d61
  402f88:	004016d5 	.word	0x004016d5
  402f8c:	00401655 	.word	0x00401655
  402f90:	004023f9 	.word	0x004023f9

00402f94 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
  402f94:	b538      	push	{r3, r4, r5, lr}
  402f96:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;

	res = validate(fp);					/* Check validity of the object */
  402f98:	4b29      	ldr	r3, [pc, #164]	; (403040 <f_sync+0xac>)
  402f9a:	4798      	blx	r3
	if (res == FR_OK) {
  402f9c:	4603      	mov	r3, r0
  402f9e:	b9d0      	cbnz	r0, 402fd6 <f_sync+0x42>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
  402fa0:	79a2      	ldrb	r2, [r4, #6]
  402fa2:	f012 0f20 	tst.w	r2, #32
  402fa6:	d016      	beq.n	402fd6 <f_sync+0x42>
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {	/* Write-back cached data if needed */
  402fa8:	f012 0f40 	tst.w	r2, #64	; 0x40
  402fac:	d00d      	beq.n	402fca <f_sync+0x36>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  402fae:	6820      	ldr	r0, [r4, #0]
  402fb0:	2301      	movs	r3, #1
  402fb2:	69a2      	ldr	r2, [r4, #24]
  402fb4:	f104 0124 	add.w	r1, r4, #36	; 0x24
  402fb8:	7840      	ldrb	r0, [r0, #1]
  402fba:	4d22      	ldr	r5, [pc, #136]	; (403044 <f_sync+0xb0>)
  402fbc:	47a8      	blx	r5
  402fbe:	2800      	cmp	r0, #0
  402fc0:	d13b      	bne.n	40303a <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  402fc2:	79a3      	ldrb	r3, [r4, #6]
  402fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402fc8:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  402fca:	69e1      	ldr	r1, [r4, #28]
  402fcc:	6820      	ldr	r0, [r4, #0]
  402fce:	4b1e      	ldr	r3, [pc, #120]	; (403048 <f_sync+0xb4>)
  402fd0:	4798      	blx	r3
			if (res == FR_OK) {
  402fd2:	4603      	mov	r3, r0
  402fd4:	b108      	cbz	r0, 402fda <f_sync+0x46>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  402fd6:	4618      	mov	r0, r3
  402fd8:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  402fda:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  402fdc:	7aeb      	ldrb	r3, [r5, #11]
  402fde:	f043 0320 	orr.w	r3, r3, #32
  402fe2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
  402fe4:	68e3      	ldr	r3, [r4, #12]
  402fe6:	772b      	strb	r3, [r5, #28]
  402fe8:	89a3      	ldrh	r3, [r4, #12]
  402fea:	0a1b      	lsrs	r3, r3, #8
  402fec:	776b      	strb	r3, [r5, #29]
  402fee:	89e3      	ldrh	r3, [r4, #14]
  402ff0:	77ab      	strb	r3, [r5, #30]
  402ff2:	7be3      	ldrb	r3, [r4, #15]
  402ff4:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
  402ff6:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
  402ff8:	76ab      	strb	r3, [r5, #26]
  402ffa:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402ffe:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
  403000:	0c1b      	lsrs	r3, r3, #16
  403002:	752b      	strb	r3, [r5, #20]
  403004:	0a1b      	lsrs	r3, r3, #8
  403006:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update modified time */
  403008:	4b10      	ldr	r3, [pc, #64]	; (40304c <f_sync+0xb8>)
  40300a:	4798      	blx	r3
				ST_DWORD(dir + DIR_WrtTime, tm);
  40300c:	75a8      	strb	r0, [r5, #22]
  40300e:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403012:	75eb      	strb	r3, [r5, #23]
  403014:	0c03      	lsrs	r3, r0, #16
  403016:	762b      	strb	r3, [r5, #24]
  403018:	0e00      	lsrs	r0, r0, #24
  40301a:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
  40301c:	2300      	movs	r3, #0
  40301e:	74ab      	strb	r3, [r5, #18]
  403020:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
  403022:	79a3      	ldrb	r3, [r4, #6]
  403024:	f023 0320 	bic.w	r3, r3, #32
  403028:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  40302a:	6823      	ldr	r3, [r4, #0]
  40302c:	2201      	movs	r2, #1
  40302e:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
  403030:	6820      	ldr	r0, [r4, #0]
  403032:	4b07      	ldr	r3, [pc, #28]	; (403050 <f_sync+0xbc>)
  403034:	4798      	blx	r3
  403036:	4603      	mov	r3, r0
  403038:	e7cd      	b.n	402fd6 <f_sync+0x42>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  40303a:	2301      	movs	r3, #1
  40303c:	e7cb      	b.n	402fd6 <f_sync+0x42>
  40303e:	bf00      	nop
  403040:	00401f35 	.word	0x00401f35
  403044:	004016d5 	.word	0x004016d5
  403048:	00401e65 	.word	0x00401e65
  40304c:	004030d5 	.word	0x004030d5
  403050:	0040232d 	.word	0x0040232d

00403054 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403054:	b510      	push	{r4, lr}
  403056:	4604      	mov	r4, r0
	FRESULT res;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
  403058:	4b07      	ldr	r3, [pc, #28]	; (403078 <f_close+0x24>)
  40305a:	4798      	blx	r3
	if (res == FR_OK)
  40305c:	4603      	mov	r3, r0
  40305e:	b108      	cbz	r0, 403064 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
  403060:	4618      	mov	r0, r3
  403062:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
  403064:	4620      	mov	r0, r4
  403066:	4b05      	ldr	r3, [pc, #20]	; (40307c <f_close+0x28>)
  403068:	4798      	blx	r3
		if (res == FR_OK) {
  40306a:	4603      	mov	r3, r0
  40306c:	2800      	cmp	r0, #0
  40306e:	d1f7      	bne.n	403060 <f_close+0xc>
				fp->fs = 0;				/* Invalidate file object */
  403070:	2200      	movs	r2, #0
  403072:	6022      	str	r2, [r4, #0]
  403074:	e7f4      	b.n	403060 <f_close+0xc>
  403076:	bf00      	nop
  403078:	00402f95 	.word	0x00402f95
  40307c:	00401f35 	.word	0x00401f35

00403080 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
  403080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403084:	b083      	sub	sp, #12
  403086:	4681      	mov	r9, r0
  403088:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
  40308a:	4605      	mov	r5, r0
	int n = 0;
  40308c:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;

	while (n < len - 1) {	/* Read characters until buffer gets filled */
  40308e:	1e4e      	subs	r6, r1, #1
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
  403090:	4f0f      	ldr	r7, [pc, #60]	; (4030d0 <f_gets+0x50>)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
  403092:	42b4      	cmp	r4, r6
  403094:	da13      	bge.n	4030be <f_gets+0x3e>
		f_read(fp, s, 1, &rc);
  403096:	466b      	mov	r3, sp
  403098:	2201      	movs	r2, #1
  40309a:	a901      	add	r1, sp, #4
  40309c:	4640      	mov	r0, r8
  40309e:	47b8      	blx	r7
		if (rc != 1) break;
  4030a0:	9b00      	ldr	r3, [sp, #0]
  4030a2:	2b01      	cmp	r3, #1
  4030a4:	d10b      	bne.n	4030be <f_gets+0x3e>
		c = s[0];
  4030a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
  4030aa:	2b0d      	cmp	r3, #13
  4030ac:	d0f1      	beq.n	403092 <f_gets+0x12>
		*p++ = c;
  4030ae:	1c6a      	adds	r2, r5, #1
  4030b0:	702b      	strb	r3, [r5, #0]
		n++;
  4030b2:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
  4030b4:	2b0a      	cmp	r3, #10
  4030b6:	d001      	beq.n	4030bc <f_gets+0x3c>
		*p++ = c;
  4030b8:	4615      	mov	r5, r2
  4030ba:	e7ea      	b.n	403092 <f_gets+0x12>
  4030bc:	4615      	mov	r5, r2
	}
	*p = 0;
  4030be:	2300      	movs	r3, #0
  4030c0:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
  4030c2:	429c      	cmp	r4, r3
}
  4030c4:	bf14      	ite	ne
  4030c6:	4648      	movne	r0, r9
  4030c8:	4618      	moveq	r0, r3
  4030ca:	b003      	add	sp, #12
  4030cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4030d0:	00402df5 	.word	0x00402df5

004030d4 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
DWORD get_fattime(void)
{
  4030d4:	b500      	push	{lr}
  4030d6:	b083      	sub	sp, #12
	uint32_t                  ul_time;
	struct calendar_date_time datetime;
	calendar_get_date_time(&CALENDER_INTERFACE, &datetime);
  4030d8:	4669      	mov	r1, sp
  4030da:	480f      	ldr	r0, [pc, #60]	; (403118 <get_fattime+0x44>)
  4030dc:	4b0f      	ldr	r3, [pc, #60]	; (40311c <get_fattime+0x48>)
  4030de:	4798      	blx	r3

	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
  4030e0:	f89d 0005 	ldrb.w	r0, [sp, #5]
  4030e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4030e8:	041b      	lsls	r3, r3, #16
	          | (datetime.time.hour << 11) | (datetime.time.min << 5) | (datetime.time.sec << 0);
  4030ea:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  4030ee:	f89d 0000 	ldrb.w	r0, [sp]
  4030f2:	4303      	orrs	r3, r0
  4030f4:	f89d 0002 	ldrb.w	r0, [sp, #2]
  4030f8:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  4030fc:	f89d 0001 	ldrb.w	r0, [sp, #1]
  403100:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	ul_time = ((datetime.date.year - 1980) << 25) | (datetime.date.month << 21) | (datetime.date.day << 16)
  403104:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  403108:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
	return ul_time;
}
  40310c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  403110:	b003      	add	sp, #12
  403112:	f85d fb04 	ldr.w	pc, [sp], #4
  403116:	bf00      	nop
  403118:	20430888 	.word	0x20430888
  40311c:	00403181 	.word	0x00403181

00403120 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  403120:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  403124:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403126:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  403128:	f3bf 8f5f 	dmb	sy
  40312c:	4770      	bx	lr

0040312e <atomic_leave_critical>:
  40312e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  403132:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  403134:	f383 8810 	msr	PRIMASK, r3
  403138:	4770      	bx	lr
	...

0040313c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
  40313c:	b538      	push	{r3, r4, r5, lr}
  40313e:	460d      	mov	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
  403140:	4604      	mov	r4, r0
  403142:	f240 12c1 	movw	r2, #449	; 0x1c1
  403146:	490b      	ldr	r1, [pc, #44]	; (403174 <calendar_init+0x38>)
  403148:	3000      	adds	r0, #0
  40314a:	bf18      	it	ne
  40314c:	2001      	movne	r0, #1
  40314e:	4b0a      	ldr	r3, [pc, #40]	; (403178 <calendar_init+0x3c>)
  403150:	4798      	blx	r3

	if (calendar->device.hw == hw) {
  403152:	6823      	ldr	r3, [r4, #0]
  403154:	42ab      	cmp	r3, r5
  403156:	d008      	beq.n	40316a <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
  403158:	b94b      	cbnz	r3, 40316e <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
  40315a:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
  40315c:	4620      	mov	r0, r4
  40315e:	4b07      	ldr	r3, [pc, #28]	; (40317c <calendar_init+0x40>)
  403160:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
  403162:	f240 73b2 	movw	r3, #1970	; 0x7b2
  403166:	6163      	str	r3, [r4, #20]

	return ret;
  403168:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NONE;
  40316a:	2000      	movs	r0, #0
  40316c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_ALREADY_INITIALIZED;
  40316e:	f06f 0011 	mvn.w	r0, #17
}
  403172:	bd38      	pop	{r3, r4, r5, pc}
  403174:	0040c678 	.word	0x0040c678
  403178:	00403a95 	.word	0x00403a95
  40317c:	00404831 	.word	0x00404831

00403180 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
  403180:	b538      	push	{r3, r4, r5, lr}
  403182:	460d      	mov	r5, r1
	/* Sanity check arguments */
	ASSERT(calendar);
  403184:	4604      	mov	r4, r0
  403186:	f240 2222 	movw	r2, #546	; 0x222
  40318a:	4906      	ldr	r1, [pc, #24]	; (4031a4 <calendar_get_date_time+0x24>)
  40318c:	3000      	adds	r0, #0
  40318e:	bf18      	it	ne
  403190:	2001      	movne	r0, #1
  403192:	4b05      	ldr	r3, [pc, #20]	; (4031a8 <calendar_get_date_time+0x28>)
  403194:	4798      	blx	r3

	_calendar_get_date_time(&calendar->device, date_time);
  403196:	4629      	mov	r1, r5
  403198:	4620      	mov	r0, r4
  40319a:	4b04      	ldr	r3, [pc, #16]	; (4031ac <calendar_get_date_time+0x2c>)
  40319c:	4798      	blx	r3

	return ERR_NONE;
}
  40319e:	2000      	movs	r0, #0
  4031a0:	bd38      	pop	{r3, r4, r5, pc}
  4031a2:	bf00      	nop
  4031a4:	0040c678 	.word	0x0040c678
  4031a8:	00403a95 	.word	0x00403a95
  4031ac:	00404865 	.word	0x00404865

004031b0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4031b0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4031b2:	4b02      	ldr	r3, [pc, #8]	; (4031bc <delay_init+0xc>)
  4031b4:	6018      	str	r0, [r3, #0]
  4031b6:	4b02      	ldr	r3, [pc, #8]	; (4031c0 <delay_init+0x10>)
  4031b8:	4798      	blx	r3
  4031ba:	bd08      	pop	{r3, pc}
  4031bc:	204306b4 	.word	0x204306b4
  4031c0:	00404981 	.word	0x00404981

004031c4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4031c4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4031c6:	4b04      	ldr	r3, [pc, #16]	; (4031d8 <delay_us+0x14>)
  4031c8:	681c      	ldr	r4, [r3, #0]
  4031ca:	4b04      	ldr	r3, [pc, #16]	; (4031dc <delay_us+0x18>)
  4031cc:	4798      	blx	r3
  4031ce:	4601      	mov	r1, r0
  4031d0:	4620      	mov	r0, r4
  4031d2:	4b03      	ldr	r3, [pc, #12]	; (4031e0 <delay_us+0x1c>)
  4031d4:	4798      	blx	r3
  4031d6:	bd10      	pop	{r4, pc}
  4031d8:	204306b4 	.word	0x204306b4
  4031dc:	00403b59 	.word	0x00403b59
  4031e0:	00404995 	.word	0x00404995

004031e4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4031e4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4031e6:	4b04      	ldr	r3, [pc, #16]	; (4031f8 <delay_ms+0x14>)
  4031e8:	681c      	ldr	r4, [r3, #0]
  4031ea:	4b04      	ldr	r3, [pc, #16]	; (4031fc <delay_ms+0x18>)
  4031ec:	4798      	blx	r3
  4031ee:	4601      	mov	r1, r0
  4031f0:	4620      	mov	r0, r4
  4031f2:	4b03      	ldr	r3, [pc, #12]	; (403200 <delay_ms+0x1c>)
  4031f4:	4798      	blx	r3
  4031f6:	bd10      	pop	{r4, pc}
  4031f8:	204306b4 	.word	0x204306b4
  4031fc:	00403b65 	.word	0x00403b65
  403200:	00404995 	.word	0x00404995

00403204 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  403204:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  403206:	4b12      	ldr	r3, [pc, #72]	; (403250 <process_ext_irq+0x4c>)
  403208:	69d9      	ldr	r1, [r3, #28]
  40320a:	4288      	cmp	r0, r1
  40320c:	d004      	beq.n	403218 <process_ext_irq+0x14>
  40320e:	2203      	movs	r2, #3
  403210:	2507      	movs	r5, #7
  403212:	2400      	movs	r4, #0
  403214:	461e      	mov	r6, r3
  403216:	e015      	b.n	403244 <process_ext_irq+0x40>
  403218:	2303      	movs	r3, #3
			if (ext_irqs[middle].cb) {
  40321a:	4a0d      	ldr	r2, [pc, #52]	; (403250 <process_ext_irq+0x4c>)
  40321c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  403220:	b1ab      	cbz	r3, 40324e <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
  403222:	4798      	blx	r3
  403224:	bd70      	pop	{r4, r5, r6, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  403226:	3a01      	subs	r2, #1
  403228:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40322a:	42a5      	cmp	r5, r4
  40322c:	d30f      	bcc.n	40324e <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
  40322e:	192b      	adds	r3, r5, r4
  403230:	105b      	asrs	r3, r3, #1
  403232:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  403234:	2a06      	cmp	r2, #6
  403236:	d80a      	bhi.n	40324e <process_ext_irq+0x4a>
  403238:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40323a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
  40323e:	6849      	ldr	r1, [r1, #4]
  403240:	4281      	cmp	r1, r0
  403242:	d0ea      	beq.n	40321a <process_ext_irq+0x16>
		if (ext_irqs[middle].pin < pin) {
  403244:	4288      	cmp	r0, r1
  403246:	d9ee      	bls.n	403226 <process_ext_irq+0x22>
			lower = middle + 1;
  403248:	3201      	adds	r2, #1
  40324a:	b2d4      	uxtb	r4, r2
  40324c:	e7ed      	b.n	40322a <process_ext_irq+0x26>
  40324e:	bd70      	pop	{r4, r5, r6, pc}
  403250:	204306b8 	.word	0x204306b8

00403254 <ext_irq_init>:
{
  403254:	b508      	push	{r3, lr}
  403256:	4b07      	ldr	r3, [pc, #28]	; (403274 <ext_irq_init+0x20>)
  403258:	f103 0038 	add.w	r0, r3, #56	; 0x38
		ext_irqs[i].pin = 0xFFFFFFFF;
  40325c:	f04f 31ff 	mov.w	r1, #4294967295
		ext_irqs[i].cb  = NULL;
  403260:	2200      	movs	r2, #0
		ext_irqs[i].pin = 0xFFFFFFFF;
  403262:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
  403264:	f843 2b08 	str.w	r2, [r3], #8
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  403268:	4283      	cmp	r3, r0
  40326a:	d1fa      	bne.n	403262 <ext_irq_init+0xe>
	return _ext_irq_init(process_ext_irq);
  40326c:	4802      	ldr	r0, [pc, #8]	; (403278 <ext_irq_init+0x24>)
  40326e:	4b03      	ldr	r3, [pc, #12]	; (40327c <ext_irq_init+0x28>)
  403270:	4798      	blx	r3
}
  403272:	bd08      	pop	{r3, pc}
  403274:	204306b8 	.word	0x204306b8
  403278:	00403205 	.word	0x00403205
  40327c:	00404479 	.word	0x00404479

00403280 <ext_irq_register>:
{
  403280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403284:	4606      	mov	r6, r0
		if (ext_irqs[i].pin == pin) {
  403286:	4b34      	ldr	r3, [pc, #208]	; (403358 <ext_irq_register+0xd8>)
  403288:	685b      	ldr	r3, [r3, #4]
  40328a:	4298      	cmp	r0, r3
  40328c:	d01e      	beq.n	4032cc <ext_irq_register+0x4c>
  40328e:	4a32      	ldr	r2, [pc, #200]	; (403358 <ext_irq_register+0xd8>)
  403290:	2301      	movs	r3, #1
  403292:	461c      	mov	r4, r3
  403294:	68d0      	ldr	r0, [r2, #12]
  403296:	42b0      	cmp	r0, r6
  403298:	d019      	beq.n	4032ce <ext_irq_register+0x4e>
  40329a:	3301      	adds	r3, #1
  40329c:	3208      	adds	r2, #8
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40329e:	2b07      	cmp	r3, #7
  4032a0:	d1f7      	bne.n	403292 <ext_irq_register+0x12>
	if (NULL == cb) {
  4032a2:	2900      	cmp	r1, #0
  4032a4:	d04d      	beq.n	403342 <ext_irq_register+0xc2>
			if (NULL == ext_irqs[i].cb) {
  4032a6:	4b2c      	ldr	r3, [pc, #176]	; (403358 <ext_irq_register+0xd8>)
  4032a8:	681b      	ldr	r3, [r3, #0]
  4032aa:	2b00      	cmp	r3, #0
  4032ac:	d04d      	beq.n	40334a <ext_irq_register+0xca>
  4032ae:	2301      	movs	r3, #1
  4032b0:	4829      	ldr	r0, [pc, #164]	; (403358 <ext_irq_register+0xd8>)
  4032b2:	fa5f fc83 	uxtb.w	ip, r3
  4032b6:	461c      	mov	r4, r3
  4032b8:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
  4032bc:	b18a      	cbz	r2, 4032e2 <ext_irq_register+0x62>
  4032be:	3301      	adds	r3, #1
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4032c0:	2b07      	cmp	r3, #7
  4032c2:	d1f6      	bne.n	4032b2 <ext_irq_register+0x32>
		return ERR_INVALID_ARG;
  4032c4:	f06f 000c 	mvn.w	r0, #12
  4032c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ext_irqs[i].pin == pin) {
  4032cc:	2400      	movs	r4, #0
			ext_irqs[i].cb = cb;
  4032ce:	4b22      	ldr	r3, [pc, #136]	; (403358 <ext_irq_register+0xd8>)
  4032d0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	if (NULL == cb) {
  4032d4:	bb79      	cbnz	r1, 403336 <ext_irq_register+0xb6>
		return _ext_irq_enable(pin, false);
  4032d6:	2100      	movs	r1, #0
  4032d8:	4630      	mov	r0, r6
  4032da:	4b20      	ldr	r3, [pc, #128]	; (40335c <ext_irq_register+0xdc>)
  4032dc:	4798      	blx	r3
  4032de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				ext_irqs[i].cb  = cb;
  4032e2:	4b1d      	ldr	r3, [pc, #116]	; (403358 <ext_irq_register+0xd8>)
  4032e4:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
				ext_irqs[i].pin = pin;
  4032e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4032ec:	605e      	str	r6, [r3, #4]
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4032ee:	f1bc 0f06 	cmp.w	ip, #6
  4032f2:	d820      	bhi.n	403336 <ext_irq_register+0xb6>
				ext_irqs[i] = tmp;
  4032f4:	4f18      	ldr	r7, [pc, #96]	; (403358 <ext_irq_register+0xd8>)
  4032f6:	eb07 0ecc 	add.w	lr, r7, ip, lsl #3
  4032fa:	463b      	mov	r3, r7
  4032fc:	1d3c      	adds	r4, r7, #4
  4032fe:	3738      	adds	r7, #56	; 0x38
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  403300:	4675      	mov	r5, lr
  403302:	e003      	b.n	40330c <ext_irq_register+0x8c>
  403304:	3308      	adds	r3, #8
  403306:	3408      	adds	r4, #8
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  403308:	42bb      	cmp	r3, r7
  40330a:	d014      	beq.n	403336 <ext_irq_register+0xb6>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  40330c:	685a      	ldr	r2, [r3, #4]
  40330e:	6869      	ldr	r1, [r5, #4]
  403310:	4291      	cmp	r1, r2
  403312:	d2f7      	bcs.n	403304 <ext_irq_register+0x84>
  403314:	f1b2 3fff 	cmp.w	r2, #4294967295
  403318:	d0f4      	beq.n	403304 <ext_irq_register+0x84>
				struct ext_irq tmp = ext_irqs[j];
  40331a:	4622      	mov	r2, r4
  40331c:	f852 8d04 	ldr.w	r8, [r2, #-4]!
  403320:	f8d3 c004 	ldr.w	ip, [r3, #4]
				ext_irqs[j] = ext_irqs[i];
  403324:	e895 0003 	ldmia.w	r5, {r0, r1}
  403328:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  40332c:	f8ce 8000 	str.w	r8, [lr]
  403330:	f8ce c004 	str.w	ip, [lr, #4]
  403334:	e7e6      	b.n	403304 <ext_irq_register+0x84>
	return _ext_irq_enable(pin, true);
  403336:	2101      	movs	r1, #1
  403338:	4630      	mov	r0, r6
  40333a:	4b08      	ldr	r3, [pc, #32]	; (40335c <ext_irq_register+0xdc>)
  40333c:	4798      	blx	r3
  40333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ERR_INVALID_ARG;
  403342:	f06f 000c 	mvn.w	r0, #12
  403346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				ext_irqs[i].cb  = cb;
  40334a:	4b03      	ldr	r3, [pc, #12]	; (403358 <ext_irq_register+0xd8>)
  40334c:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
  40334e:	605e      	str	r6, [r3, #4]
  403350:	f04f 0c00 	mov.w	ip, #0
  403354:	e7ce      	b.n	4032f4 <ext_irq_register+0x74>
  403356:	bf00      	nop
  403358:	204306b8 	.word	0x204306b8
  40335c:	004044b1 	.word	0x004044b1

00403360 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  403360:	b570      	push	{r4, r5, r6, lr}
  403362:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  403364:	4604      	mov	r4, r0
  403366:	460d      	mov	r5, r1
  403368:	2800      	cmp	r0, #0
  40336a:	bf18      	it	ne
  40336c:	2900      	cmpne	r1, #0
  40336e:	bf14      	ite	ne
  403370:	2001      	movne	r0, #1
  403372:	2000      	moveq	r0, #0
  403374:	2234      	movs	r2, #52	; 0x34
  403376:	4904      	ldr	r1, [pc, #16]	; (403388 <io_write+0x28>)
  403378:	4b04      	ldr	r3, [pc, #16]	; (40338c <io_write+0x2c>)
  40337a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40337c:	6823      	ldr	r3, [r4, #0]
  40337e:	4632      	mov	r2, r6
  403380:	4629      	mov	r1, r5
  403382:	4620      	mov	r0, r4
  403384:	4798      	blx	r3
}
  403386:	bd70      	pop	{r4, r5, r6, pc}
  403388:	0040c694 	.word	0x0040c694
  40338c:	00403a95 	.word	0x00403a95

00403390 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  403390:	b570      	push	{r4, r5, r6, lr}
  403392:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  403394:	4604      	mov	r4, r0
  403396:	460d      	mov	r5, r1
  403398:	2800      	cmp	r0, #0
  40339a:	bf18      	it	ne
  40339c:	2900      	cmpne	r1, #0
  40339e:	bf14      	ite	ne
  4033a0:	2001      	movne	r0, #1
  4033a2:	2000      	moveq	r0, #0
  4033a4:	223d      	movs	r2, #61	; 0x3d
  4033a6:	4904      	ldr	r1, [pc, #16]	; (4033b8 <io_read+0x28>)
  4033a8:	4b04      	ldr	r3, [pc, #16]	; (4033bc <io_read+0x2c>)
  4033aa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4033ac:	6863      	ldr	r3, [r4, #4]
  4033ae:	4632      	mov	r2, r6
  4033b0:	4629      	mov	r1, r5
  4033b2:	4620      	mov	r0, r4
  4033b4:	4798      	blx	r3
}
  4033b6:	bd70      	pop	{r4, r5, r6, pc}
  4033b8:	0040c694 	.word	0x0040c694
  4033bc:	00403a95 	.word	0x00403a95

004033c0 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
  4033c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(mci && hw);
  4033c2:	4604      	mov	r4, r0
  4033c4:	460d      	mov	r5, r1
  4033c6:	2800      	cmp	r0, #0
  4033c8:	bf18      	it	ne
  4033ca:	2900      	cmpne	r1, #0
  4033cc:	bf14      	ite	ne
  4033ce:	2001      	movne	r0, #1
  4033d0:	2000      	moveq	r0, #0
  4033d2:	2231      	movs	r2, #49	; 0x31
  4033d4:	4903      	ldr	r1, [pc, #12]	; (4033e4 <mci_sync_init+0x24>)
  4033d6:	4b04      	ldr	r3, [pc, #16]	; (4033e8 <mci_sync_init+0x28>)
  4033d8:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
  4033da:	4629      	mov	r1, r5
  4033dc:	4620      	mov	r0, r4
  4033de:	4b03      	ldr	r3, [pc, #12]	; (4033ec <mci_sync_init+0x2c>)
  4033e0:	4798      	blx	r3
}
  4033e2:	bd38      	pop	{r3, r4, r5, pc}
  4033e4:	0040c6a8 	.word	0x0040c6a8
  4033e8:	00403a95 	.word	0x00403a95
  4033ec:	00403cd1 	.word	0x00403cd1

004033f0 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
  4033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033f2:	b083      	sub	sp, #12
  4033f4:	460d      	mov	r5, r1
  4033f6:	4616      	mov	r6, r2
  4033f8:	461f      	mov	r7, r3
	ASSERT(mci);
  4033fa:	4604      	mov	r4, r0
  4033fc:	2244      	movs	r2, #68	; 0x44
  4033fe:	4908      	ldr	r1, [pc, #32]	; (403420 <mci_sync_select_device+0x30>)
  403400:	3000      	adds	r0, #0
  403402:	bf18      	it	ne
  403404:	2001      	movne	r0, #1
  403406:	4b07      	ldr	r3, [pc, #28]	; (403424 <mci_sync_select_device+0x34>)
  403408:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
  40340a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  40340e:	9300      	str	r3, [sp, #0]
  403410:	463b      	mov	r3, r7
  403412:	4632      	mov	r2, r6
  403414:	4629      	mov	r1, r5
  403416:	4620      	mov	r0, r4
  403418:	4c03      	ldr	r4, [pc, #12]	; (403428 <mci_sync_select_device+0x38>)
  40341a:	47a0      	blx	r4
}
  40341c:	b003      	add	sp, #12
  40341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403420:	0040c6a8 	.word	0x0040c6a8
  403424:	00403a95 	.word	0x00403a95
  403428:	00403d0d 	.word	0x00403d0d

0040342c <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
  40342c:	b538      	push	{r3, r4, r5, lr}
  40342e:	460d      	mov	r5, r1
	ASSERT(mci);
  403430:	4604      	mov	r4, r0
  403432:	224d      	movs	r2, #77	; 0x4d
  403434:	4905      	ldr	r1, [pc, #20]	; (40344c <mci_sync_deselect_device+0x20>)
  403436:	3000      	adds	r0, #0
  403438:	bf18      	it	ne
  40343a:	2001      	movne	r0, #1
  40343c:	4b04      	ldr	r3, [pc, #16]	; (403450 <mci_sync_deselect_device+0x24>)
  40343e:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
  403440:	4629      	mov	r1, r5
  403442:	4620      	mov	r0, r4
  403444:	4b03      	ldr	r3, [pc, #12]	; (403454 <mci_sync_deselect_device+0x28>)
  403446:	4798      	blx	r3
}
  403448:	bd38      	pop	{r3, r4, r5, pc}
  40344a:	bf00      	nop
  40344c:	0040c6a8 	.word	0x0040c6a8
  403450:	00403a95 	.word	0x00403a95
  403454:	00403dcd 	.word	0x00403dcd

00403458 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
  403458:	b538      	push	{r3, r4, r5, lr}
  40345a:	460d      	mov	r5, r1
	ASSERT(mci);
  40345c:	4604      	mov	r4, r0
  40345e:	2256      	movs	r2, #86	; 0x56
  403460:	4905      	ldr	r1, [pc, #20]	; (403478 <mci_sync_get_bus_width+0x20>)
  403462:	3000      	adds	r0, #0
  403464:	bf18      	it	ne
  403466:	2001      	movne	r0, #1
  403468:	4b04      	ldr	r3, [pc, #16]	; (40347c <mci_sync_get_bus_width+0x24>)
  40346a:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
  40346c:	4629      	mov	r1, r5
  40346e:	4620      	mov	r0, r4
  403470:	4b03      	ldr	r3, [pc, #12]	; (403480 <mci_sync_get_bus_width+0x28>)
  403472:	4798      	blx	r3
}
  403474:	bd38      	pop	{r3, r4, r5, pc}
  403476:	bf00      	nop
  403478:	0040c6a8 	.word	0x0040c6a8
  40347c:	00403a95 	.word	0x00403a95
  403480:	00403dd1 	.word	0x00403dd1

00403484 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
  403484:	b510      	push	{r4, lr}
	ASSERT(mci);
  403486:	4604      	mov	r4, r0
  403488:	2260      	movs	r2, #96	; 0x60
  40348a:	4905      	ldr	r1, [pc, #20]	; (4034a0 <mci_sync_is_high_speed_capable+0x1c>)
  40348c:	3000      	adds	r0, #0
  40348e:	bf18      	it	ne
  403490:	2001      	movne	r0, #1
  403492:	4b04      	ldr	r3, [pc, #16]	; (4034a4 <mci_sync_is_high_speed_capable+0x20>)
  403494:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
  403496:	4620      	mov	r0, r4
  403498:	4b03      	ldr	r3, [pc, #12]	; (4034a8 <mci_sync_is_high_speed_capable+0x24>)
  40349a:	4798      	blx	r3
}
  40349c:	bd10      	pop	{r4, pc}
  40349e:	bf00      	nop
  4034a0:	0040c6a8 	.word	0x0040c6a8
  4034a4:	00403a95 	.word	0x00403a95
  4034a8:	00403ddb 	.word	0x00403ddb

004034ac <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
  4034ac:	b510      	push	{r4, lr}
	ASSERT(mci);
  4034ae:	4604      	mov	r4, r0
  4034b0:	2269      	movs	r2, #105	; 0x69
  4034b2:	4905      	ldr	r1, [pc, #20]	; (4034c8 <mci_sync_send_clock+0x1c>)
  4034b4:	3000      	adds	r0, #0
  4034b6:	bf18      	it	ne
  4034b8:	2001      	movne	r0, #1
  4034ba:	4b04      	ldr	r3, [pc, #16]	; (4034cc <mci_sync_send_clock+0x20>)
  4034bc:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
  4034be:	4620      	mov	r0, r4
  4034c0:	4b03      	ldr	r3, [pc, #12]	; (4034d0 <mci_sync_send_clock+0x24>)
  4034c2:	4798      	blx	r3
  4034c4:	bd10      	pop	{r4, pc}
  4034c6:	bf00      	nop
  4034c8:	0040c6a8 	.word	0x0040c6a8
  4034cc:	00403a95 	.word	0x00403a95
  4034d0:	00403de1 	.word	0x00403de1

004034d4 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
  4034d4:	b570      	push	{r4, r5, r6, lr}
  4034d6:	460d      	mov	r5, r1
  4034d8:	4616      	mov	r6, r2
	ASSERT(mci);
  4034da:	4604      	mov	r4, r0
  4034dc:	2272      	movs	r2, #114	; 0x72
  4034de:	4906      	ldr	r1, [pc, #24]	; (4034f8 <mci_sync_send_cmd+0x24>)
  4034e0:	3000      	adds	r0, #0
  4034e2:	bf18      	it	ne
  4034e4:	2001      	movne	r0, #1
  4034e6:	4b05      	ldr	r3, [pc, #20]	; (4034fc <mci_sync_send_cmd+0x28>)
  4034e8:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
  4034ea:	4632      	mov	r2, r6
  4034ec:	4629      	mov	r1, r5
  4034ee:	4620      	mov	r0, r4
  4034f0:	4b03      	ldr	r3, [pc, #12]	; (403500 <mci_sync_send_cmd+0x2c>)
  4034f2:	4798      	blx	r3
}
  4034f4:	bd70      	pop	{r4, r5, r6, pc}
  4034f6:	bf00      	nop
  4034f8:	0040c6a8 	.word	0x0040c6a8
  4034fc:	00403a95 	.word	0x00403a95
  403500:	00403e25 	.word	0x00403e25

00403504 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
  403504:	b510      	push	{r4, lr}
	ASSERT(mci);
  403506:	4604      	mov	r4, r0
  403508:	227b      	movs	r2, #123	; 0x7b
  40350a:	4905      	ldr	r1, [pc, #20]	; (403520 <mci_sync_get_response+0x1c>)
  40350c:	3000      	adds	r0, #0
  40350e:	bf18      	it	ne
  403510:	2001      	movne	r0, #1
  403512:	4b04      	ldr	r3, [pc, #16]	; (403524 <mci_sync_get_response+0x20>)
  403514:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
  403516:	4620      	mov	r0, r4
  403518:	4b03      	ldr	r3, [pc, #12]	; (403528 <mci_sync_get_response+0x24>)
  40351a:	4798      	blx	r3
}
  40351c:	bd10      	pop	{r4, pc}
  40351e:	bf00      	nop
  403520:	0040c6a8 	.word	0x0040c6a8
  403524:	00403a95 	.word	0x00403a95
  403528:	00403e6d 	.word	0x00403e6d

0040352c <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
  40352c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(mci && response);
  40352e:	4604      	mov	r4, r0
  403530:	460d      	mov	r5, r1
  403532:	2800      	cmp	r0, #0
  403534:	bf18      	it	ne
  403536:	2900      	cmpne	r1, #0
  403538:	bf14      	ite	ne
  40353a:	2001      	movne	r0, #1
  40353c:	2000      	moveq	r0, #0
  40353e:	2284      	movs	r2, #132	; 0x84
  403540:	4903      	ldr	r1, [pc, #12]	; (403550 <mci_sync_get_response_128+0x24>)
  403542:	4b04      	ldr	r3, [pc, #16]	; (403554 <mci_sync_get_response_128+0x28>)
  403544:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
  403546:	4629      	mov	r1, r5
  403548:	4620      	mov	r0, r4
  40354a:	4b03      	ldr	r3, [pc, #12]	; (403558 <mci_sync_get_response_128+0x2c>)
  40354c:	4798      	blx	r3
  40354e:	bd38      	pop	{r3, r4, r5, pc}
  403550:	0040c6a8 	.word	0x0040c6a8
  403554:	00403a95 	.word	0x00403a95
  403558:	00403e99 	.word	0x00403e99

0040355c <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
  40355c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40355e:	b083      	sub	sp, #12
  403560:	460d      	mov	r5, r1
  403562:	4616      	mov	r6, r2
  403564:	461f      	mov	r7, r3
	ASSERT(mci);
  403566:	4604      	mov	r4, r0
  403568:	2290      	movs	r2, #144	; 0x90
  40356a:	490a      	ldr	r1, [pc, #40]	; (403594 <mci_sync_adtc_start+0x38>)
  40356c:	3000      	adds	r0, #0
  40356e:	bf18      	it	ne
  403570:	2001      	movne	r0, #1
  403572:	4b09      	ldr	r3, [pc, #36]	; (403598 <mci_sync_adtc_start+0x3c>)
  403574:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
  403576:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  40357a:	9301      	str	r3, [sp, #4]
  40357c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  403580:	9300      	str	r3, [sp, #0]
  403582:	463b      	mov	r3, r7
  403584:	4632      	mov	r2, r6
  403586:	4629      	mov	r1, r5
  403588:	4620      	mov	r0, r4
  40358a:	4c04      	ldr	r4, [pc, #16]	; (40359c <mci_sync_adtc_start+0x40>)
  40358c:	47a0      	blx	r4
}
  40358e:	b003      	add	sp, #12
  403590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403592:	bf00      	nop
  403594:	0040c6a8 	.word	0x0040c6a8
  403598:	00403a95 	.word	0x00403a95
  40359c:	00403ee9 	.word	0x00403ee9

004035a0 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
  4035a0:	b570      	push	{r4, r5, r6, lr}
  4035a2:	4616      	mov	r6, r2
	ASSERT(mci && dst);
  4035a4:	4604      	mov	r4, r0
  4035a6:	460d      	mov	r5, r1
  4035a8:	2800      	cmp	r0, #0
  4035aa:	bf18      	it	ne
  4035ac:	2900      	cmpne	r1, #0
  4035ae:	bf14      	ite	ne
  4035b0:	2001      	movne	r0, #1
  4035b2:	2000      	moveq	r0, #0
  4035b4:	22b5      	movs	r2, #181	; 0xb5
  4035b6:	4904      	ldr	r1, [pc, #16]	; (4035c8 <mci_sync_start_read_blocks+0x28>)
  4035b8:	4b04      	ldr	r3, [pc, #16]	; (4035cc <mci_sync_start_read_blocks+0x2c>)
  4035ba:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
  4035bc:	4632      	mov	r2, r6
  4035be:	4629      	mov	r1, r5
  4035c0:	4620      	mov	r0, r4
  4035c2:	4b03      	ldr	r3, [pc, #12]	; (4035d0 <mci_sync_start_read_blocks+0x30>)
  4035c4:	4798      	blx	r3
}
  4035c6:	bd70      	pop	{r4, r5, r6, pc}
  4035c8:	0040c6a8 	.word	0x0040c6a8
  4035cc:	00403a95 	.word	0x00403a95
  4035d0:	004040d9 	.word	0x004040d9

004035d4 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
  4035d4:	b570      	push	{r4, r5, r6, lr}
  4035d6:	4616      	mov	r6, r2
	ASSERT(mci && src);
  4035d8:	4604      	mov	r4, r0
  4035da:	460d      	mov	r5, r1
  4035dc:	2800      	cmp	r0, #0
  4035de:	bf18      	it	ne
  4035e0:	2900      	cmpne	r1, #0
  4035e2:	bf14      	ite	ne
  4035e4:	2001      	movne	r0, #1
  4035e6:	2000      	moveq	r0, #0
  4035e8:	22be      	movs	r2, #190	; 0xbe
  4035ea:	4904      	ldr	r1, [pc, #16]	; (4035fc <mci_sync_start_write_blocks+0x28>)
  4035ec:	4b04      	ldr	r3, [pc, #16]	; (403600 <mci_sync_start_write_blocks+0x2c>)
  4035ee:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
  4035f0:	4632      	mov	r2, r6
  4035f2:	4629      	mov	r1, r5
  4035f4:	4620      	mov	r0, r4
  4035f6:	4b03      	ldr	r3, [pc, #12]	; (403604 <mci_sync_start_write_blocks+0x30>)
  4035f8:	4798      	blx	r3
}
  4035fa:	bd70      	pop	{r4, r5, r6, pc}
  4035fc:	0040c6a8 	.word	0x0040c6a8
  403600:	00403a95 	.word	0x00403a95
  403604:	00404151 	.word	0x00404151

00403608 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
  403608:	b510      	push	{r4, lr}
	ASSERT(mci);
  40360a:	4604      	mov	r4, r0
  40360c:	22c7      	movs	r2, #199	; 0xc7
  40360e:	4905      	ldr	r1, [pc, #20]	; (403624 <mci_sync_wait_end_of_read_blocks+0x1c>)
  403610:	3000      	adds	r0, #0
  403612:	bf18      	it	ne
  403614:	2001      	movne	r0, #1
  403616:	4b04      	ldr	r3, [pc, #16]	; (403628 <mci_sync_wait_end_of_read_blocks+0x20>)
  403618:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
  40361a:	4620      	mov	r0, r4
  40361c:	4b03      	ldr	r3, [pc, #12]	; (40362c <mci_sync_wait_end_of_read_blocks+0x24>)
  40361e:	4798      	blx	r3
}
  403620:	bd10      	pop	{r4, pc}
  403622:	bf00      	nop
  403624:	0040c6a8 	.word	0x0040c6a8
  403628:	00403a95 	.word	0x00403a95
  40362c:	004041d5 	.word	0x004041d5

00403630 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
  403630:	b510      	push	{r4, lr}
	ASSERT(mci);
  403632:	4604      	mov	r4, r0
  403634:	22d0      	movs	r2, #208	; 0xd0
  403636:	4905      	ldr	r1, [pc, #20]	; (40364c <mci_sync_wait_end_of_write_blocks+0x1c>)
  403638:	3000      	adds	r0, #0
  40363a:	bf18      	it	ne
  40363c:	2001      	movne	r0, #1
  40363e:	4b04      	ldr	r3, [pc, #16]	; (403650 <mci_sync_wait_end_of_write_blocks+0x20>)
  403640:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
  403642:	4620      	mov	r0, r4
  403644:	4b03      	ldr	r3, [pc, #12]	; (403654 <mci_sync_wait_end_of_write_blocks+0x24>)
  403646:	4798      	blx	r3
}
  403648:	bd10      	pop	{r4, pc}
  40364a:	bf00      	nop
  40364c:	0040c6a8 	.word	0x0040c6a8
  403650:	00403a95 	.word	0x00403a95
  403654:	004041fd 	.word	0x004041fd

00403658 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  403658:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40365a:	6943      	ldr	r3, [r0, #20]
  40365c:	b103      	cbz	r3, 403660 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40365e:	4798      	blx	r3
  403660:	bd08      	pop	{r3, pc}

00403662 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  403662:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  403664:	6983      	ldr	r3, [r0, #24]
  403666:	b103      	cbz	r3, 40366a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  403668:	4798      	blx	r3
  40366a:	bd08      	pop	{r3, pc}

0040366c <pwm_init>:
{
  40366c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40366e:	4604      	mov	r4, r0
  403670:	460d      	mov	r5, r1
  403672:	2800      	cmp	r0, #0
  403674:	bf18      	it	ne
  403676:	2900      	cmpne	r1, #0
  403678:	bf14      	ite	ne
  40367a:	2001      	movne	r0, #1
  40367c:	2000      	moveq	r0, #0
  40367e:	2233      	movs	r2, #51	; 0x33
  403680:	4906      	ldr	r1, [pc, #24]	; (40369c <pwm_init+0x30>)
  403682:	4b07      	ldr	r3, [pc, #28]	; (4036a0 <pwm_init+0x34>)
  403684:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  403686:	4629      	mov	r1, r5
  403688:	4620      	mov	r0, r4
  40368a:	4b06      	ldr	r3, [pc, #24]	; (4036a4 <pwm_init+0x38>)
  40368c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  40368e:	4b06      	ldr	r3, [pc, #24]	; (4036a8 <pwm_init+0x3c>)
  403690:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  403692:	4b06      	ldr	r3, [pc, #24]	; (4036ac <pwm_init+0x40>)
  403694:	6063      	str	r3, [r4, #4]
}
  403696:	2000      	movs	r0, #0
  403698:	bd38      	pop	{r3, r4, r5, pc}
  40369a:	bf00      	nop
  40369c:	0040c6c4 	.word	0x0040c6c4
  4036a0:	00403a95 	.word	0x00403a95
  4036a4:	00404601 	.word	0x00404601
  4036a8:	00403659 	.word	0x00403659
  4036ac:	00403663 	.word	0x00403663

004036b0 <pwm_enable>:
{
  4036b0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4036b2:	4604      	mov	r4, r0
  4036b4:	224a      	movs	r2, #74	; 0x4a
  4036b6:	4909      	ldr	r1, [pc, #36]	; (4036dc <pwm_enable+0x2c>)
  4036b8:	3000      	adds	r0, #0
  4036ba:	bf18      	it	ne
  4036bc:	2001      	movne	r0, #1
  4036be:	4b08      	ldr	r3, [pc, #32]	; (4036e0 <pwm_enable+0x30>)
  4036c0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4036c2:	4620      	mov	r0, r4
  4036c4:	4b07      	ldr	r3, [pc, #28]	; (4036e4 <pwm_enable+0x34>)
  4036c6:	4798      	blx	r3
  4036c8:	b920      	cbnz	r0, 4036d4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4036ca:	4620      	mov	r0, r4
  4036cc:	4b06      	ldr	r3, [pc, #24]	; (4036e8 <pwm_enable+0x38>)
  4036ce:	4798      	blx	r3
	return ERR_NONE;
  4036d0:	2000      	movs	r0, #0
  4036d2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4036d4:	f06f 0010 	mvn.w	r0, #16
}
  4036d8:	bd10      	pop	{r4, pc}
  4036da:	bf00      	nop
  4036dc:	0040c6c4 	.word	0x0040c6c4
  4036e0:	00403a95 	.word	0x00403a95
  4036e4:	00404801 	.word	0x00404801
  4036e8:	0040475d 	.word	0x0040475d

004036ec <pwm_set_parameters>:
{
  4036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4036ee:	460d      	mov	r5, r1
  4036f0:	4616      	mov	r6, r2
  4036f2:	461f      	mov	r7, r3
	ASSERT(descr);
  4036f4:	4604      	mov	r4, r0
  4036f6:	227c      	movs	r2, #124	; 0x7c
  4036f8:	4906      	ldr	r1, [pc, #24]	; (403714 <pwm_set_parameters+0x28>)
  4036fa:	3000      	adds	r0, #0
  4036fc:	bf18      	it	ne
  4036fe:	2001      	movne	r0, #1
  403700:	4b05      	ldr	r3, [pc, #20]	; (403718 <pwm_set_parameters+0x2c>)
  403702:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle, ch);
  403704:	463b      	mov	r3, r7
  403706:	4632      	mov	r2, r6
  403708:	4629      	mov	r1, r5
  40370a:	4620      	mov	r0, r4
  40370c:	4c03      	ldr	r4, [pc, #12]	; (40371c <pwm_set_parameters+0x30>)
  40370e:	47a0      	blx	r4
}
  403710:	2000      	movs	r0, #0
  403712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403714:	0040c6c4 	.word	0x0040c6c4
  403718:	00403a95 	.word	0x00403a95
  40371c:	004047a9 	.word	0x004047a9

00403720 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  403720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403722:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  403724:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  403726:	b12f      	cbz	r7, 403734 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
  403728:	688d      	ldr	r5, [r1, #8]
  40372a:	463c      	mov	r4, r7
  40372c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40372e:	f1c2 0e01 	rsb	lr, r2, #1
  403732:	e00b      	b.n	40374c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
  403734:	4b0e      	ldr	r3, [pc, #56]	; (403770 <timer_add_timer_task+0x50>)
  403736:	4798      	blx	r3
		return;
  403738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40373a:	4473      	add	r3, lr
  40373c:	68a0      	ldr	r0, [r4, #8]
  40373e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
  403740:	42ab      	cmp	r3, r5
  403742:	d20a      	bcs.n	40375a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
  403744:	6823      	ldr	r3, [r4, #0]
  403746:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  403748:	b153      	cbz	r3, 403760 <timer_add_timer_task+0x40>
  40374a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
  40374c:	6863      	ldr	r3, [r4, #4]
  40374e:	4293      	cmp	r3, r2
  403750:	d8f3      	bhi.n	40373a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
  403752:	68a0      	ldr	r0, [r4, #8]
  403754:	4403      	add	r3, r0
  403756:	1a9b      	subs	r3, r3, r2
  403758:	e7f2      	b.n	403740 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
  40375a:	42a7      	cmp	r7, r4
  40375c:	d004      	beq.n	403768 <timer_add_timer_task+0x48>
  40375e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  403760:	4620      	mov	r0, r4
  403762:	4b04      	ldr	r3, [pc, #16]	; (403774 <timer_add_timer_task+0x54>)
  403764:	4798      	blx	r3
  403766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  403768:	4660      	mov	r0, ip
  40376a:	4b01      	ldr	r3, [pc, #4]	; (403770 <timer_add_timer_task+0x50>)
  40376c:	4798      	blx	r3
  40376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403770:	00403abd 	.word	0x00403abd
  403774:	00403ae9 	.word	0x00403ae9

00403778 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  403778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
  40377c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40377e:	6907      	ldr	r7, [r0, #16]
  403780:	3701      	adds	r7, #1
  403782:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  403784:	7e03      	ldrb	r3, [r0, #24]
  403786:	f013 0f01 	tst.w	r3, #1
  40378a:	d113      	bne.n	4037b4 <timer_process_counted+0x3c>
  40378c:	7e03      	ldrb	r3, [r0, #24]
  40378e:	f013 0f02 	tst.w	r3, #2
  403792:	d10f      	bne.n	4037b4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
  403794:	b354      	cbz	r4, 4037ec <timer_process_counted+0x74>
  403796:	6863      	ldr	r3, [r4, #4]
  403798:	1afb      	subs	r3, r7, r3
  40379a:	68a2      	ldr	r2, [r4, #8]
  40379c:	4293      	cmp	r3, r2
  40379e:	d307      	bcc.n	4037b0 <timer_process_counted+0x38>
  4037a0:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
  4037a2:	f100 0814 	add.w	r8, r0, #20
  4037a6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4037f0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
  4037aa:	f8df a048 	ldr.w	sl, [pc, #72]	; 4037f4 <timer_process_counted+0x7c>
  4037ae:	e012      	b.n	4037d6 <timer_process_counted+0x5e>
  4037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4037b4:	7e03      	ldrb	r3, [r0, #24]
  4037b6:	f043 0302 	orr.w	r3, r3, #2
  4037ba:	7603      	strb	r3, [r0, #24]
		return;
  4037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037c0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4037c2:	68e3      	ldr	r3, [r4, #12]
  4037c4:	4620      	mov	r0, r4
  4037c6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
  4037c8:	b185      	cbz	r5, 4037ec <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4037ca:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
  4037cc:	686b      	ldr	r3, [r5, #4]
  4037ce:	1afb      	subs	r3, r7, r3
  4037d0:	68aa      	ldr	r2, [r5, #8]
  4037d2:	4293      	cmp	r3, r2
  4037d4:	d30a      	bcc.n	4037ec <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
  4037d6:	4640      	mov	r0, r8
  4037d8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4037da:	7c23      	ldrb	r3, [r4, #16]
  4037dc:	2b01      	cmp	r3, #1
  4037de:	d1ef      	bne.n	4037c0 <timer_process_counted+0x48>
			tmp->time_label = time;
  4037e0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4037e2:	463a      	mov	r2, r7
  4037e4:	4621      	mov	r1, r4
  4037e6:	4640      	mov	r0, r8
  4037e8:	47d0      	blx	sl
  4037ea:	e7e9      	b.n	4037c0 <timer_process_counted+0x48>
  4037ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037f0:	00403af1 	.word	0x00403af1
  4037f4:	00403721 	.word	0x00403721

004037f8 <timer_init>:
{
  4037f8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4037fa:	4604      	mov	r4, r0
  4037fc:	460d      	mov	r5, r1
  4037fe:	2800      	cmp	r0, #0
  403800:	bf18      	it	ne
  403802:	2900      	cmpne	r1, #0
  403804:	bf14      	ite	ne
  403806:	2001      	movne	r0, #1
  403808:	2000      	moveq	r0, #0
  40380a:	223b      	movs	r2, #59	; 0x3b
  40380c:	4905      	ldr	r1, [pc, #20]	; (403824 <timer_init+0x2c>)
  40380e:	4b06      	ldr	r3, [pc, #24]	; (403828 <timer_init+0x30>)
  403810:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  403812:	4629      	mov	r1, r5
  403814:	4620      	mov	r0, r4
  403816:	4b05      	ldr	r3, [pc, #20]	; (40382c <timer_init+0x34>)
  403818:	4798      	blx	r3
	descr->time                           = 0;
  40381a:	2000      	movs	r0, #0
  40381c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40381e:	4b04      	ldr	r3, [pc, #16]	; (403830 <timer_init+0x38>)
  403820:	6023      	str	r3, [r4, #0]
}
  403822:	bd38      	pop	{r3, r4, r5, pc}
  403824:	0040c6dc 	.word	0x0040c6dc
  403828:	00403a95 	.word	0x00403a95
  40382c:	00404a09 	.word	0x00404a09
  403830:	00403779 	.word	0x00403779

00403834 <timer_start>:
{
  403834:	b510      	push	{r4, lr}
	ASSERT(descr);
  403836:	4604      	mov	r4, r0
  403838:	2253      	movs	r2, #83	; 0x53
  40383a:	4909      	ldr	r1, [pc, #36]	; (403860 <timer_start+0x2c>)
  40383c:	3000      	adds	r0, #0
  40383e:	bf18      	it	ne
  403840:	2001      	movne	r0, #1
  403842:	4b08      	ldr	r3, [pc, #32]	; (403864 <timer_start+0x30>)
  403844:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  403846:	4620      	mov	r0, r4
  403848:	4b07      	ldr	r3, [pc, #28]	; (403868 <timer_start+0x34>)
  40384a:	4798      	blx	r3
  40384c:	b920      	cbnz	r0, 403858 <timer_start+0x24>
	_timer_start(&descr->device);
  40384e:	4620      	mov	r0, r4
  403850:	4b06      	ldr	r3, [pc, #24]	; (40386c <timer_start+0x38>)
  403852:	4798      	blx	r3
	return ERR_NONE;
  403854:	2000      	movs	r0, #0
  403856:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  403858:	f06f 0010 	mvn.w	r0, #16
}
  40385c:	bd10      	pop	{r4, pc}
  40385e:	bf00      	nop
  403860:	0040c6dc 	.word	0x0040c6dc
  403864:	00403a95 	.word	0x00403a95
  403868:	00404b07 	.word	0x00404b07
  40386c:	00404af9 	.word	0x00404af9

00403870 <timer_set_clock_cycles_per_tick>:
{
  403870:	b538      	push	{r3, r4, r5, lr}
  403872:	460d      	mov	r5, r1
	ASSERT(descr);
  403874:	4604      	mov	r4, r0
  403876:	226f      	movs	r2, #111	; 0x6f
  403878:	4905      	ldr	r1, [pc, #20]	; (403890 <timer_set_clock_cycles_per_tick+0x20>)
  40387a:	3000      	adds	r0, #0
  40387c:	bf18      	it	ne
  40387e:	2001      	movne	r0, #1
  403880:	4b04      	ldr	r3, [pc, #16]	; (403894 <timer_set_clock_cycles_per_tick+0x24>)
  403882:	4798      	blx	r3
	_timer_set_period(&descr->device, clock_cycles);
  403884:	4629      	mov	r1, r5
  403886:	4620      	mov	r0, r4
  403888:	4b03      	ldr	r3, [pc, #12]	; (403898 <timer_set_clock_cycles_per_tick+0x28>)
  40388a:	4798      	blx	r3
}
  40388c:	2000      	movs	r0, #0
  40388e:	bd38      	pop	{r3, r4, r5, pc}
  403890:	0040c6dc 	.word	0x0040c6dc
  403894:	00403a95 	.word	0x00403a95
  403898:	00404b01 	.word	0x00404b01

0040389c <timer_add_task>:
{
  40389c:	b570      	push	{r4, r5, r6, lr}
  40389e:	b082      	sub	sp, #8
	ASSERT(descr && task);
  4038a0:	4604      	mov	r4, r0
  4038a2:	460d      	mov	r5, r1
  4038a4:	2800      	cmp	r0, #0
  4038a6:	bf18      	it	ne
  4038a8:	2900      	cmpne	r1, #0
  4038aa:	bf14      	ite	ne
  4038ac:	2001      	movne	r0, #1
  4038ae:	2000      	moveq	r0, #0
  4038b0:	227a      	movs	r2, #122	; 0x7a
  4038b2:	491d      	ldr	r1, [pc, #116]	; (403928 <timer_add_task+0x8c>)
  4038b4:	4b1d      	ldr	r3, [pc, #116]	; (40392c <timer_add_task+0x90>)
  4038b6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  4038b8:	7e23      	ldrb	r3, [r4, #24]
  4038ba:	f043 0301 	orr.w	r3, r3, #1
  4038be:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  4038c0:	f104 0614 	add.w	r6, r4, #20
  4038c4:	4629      	mov	r1, r5
  4038c6:	4630      	mov	r0, r6
  4038c8:	4b19      	ldr	r3, [pc, #100]	; (403930 <timer_add_task+0x94>)
  4038ca:	4798      	blx	r3
  4038cc:	b988      	cbnz	r0, 4038f2 <timer_add_task+0x56>
	task->time_label = descr->time;
  4038ce:	6923      	ldr	r3, [r4, #16]
  4038d0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  4038d2:	6922      	ldr	r2, [r4, #16]
  4038d4:	4629      	mov	r1, r5
  4038d6:	4630      	mov	r0, r6
  4038d8:	4b16      	ldr	r3, [pc, #88]	; (403934 <timer_add_task+0x98>)
  4038da:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4038dc:	7e23      	ldrb	r3, [r4, #24]
  4038de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4038e2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4038e4:	7e23      	ldrb	r3, [r4, #24]
  4038e6:	f013 0f02 	tst.w	r3, #2
  4038ea:	d10e      	bne.n	40390a <timer_add_task+0x6e>
	return ERR_NONE;
  4038ec:	2000      	movs	r0, #0
}
  4038ee:	b002      	add	sp, #8
  4038f0:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4038f2:	7e23      	ldrb	r3, [r4, #24]
  4038f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4038f8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4038fa:	227f      	movs	r2, #127	; 0x7f
  4038fc:	490a      	ldr	r1, [pc, #40]	; (403928 <timer_add_task+0x8c>)
  4038fe:	2000      	movs	r0, #0
  403900:	4b0a      	ldr	r3, [pc, #40]	; (40392c <timer_add_task+0x90>)
  403902:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  403904:	f06f 0011 	mvn.w	r0, #17
  403908:	e7f1      	b.n	4038ee <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40390a:	a801      	add	r0, sp, #4
  40390c:	4b0a      	ldr	r3, [pc, #40]	; (403938 <timer_add_task+0x9c>)
  40390e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  403910:	7e23      	ldrb	r3, [r4, #24]
  403912:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  403916:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  403918:	4620      	mov	r0, r4
  40391a:	4b08      	ldr	r3, [pc, #32]	; (40393c <timer_add_task+0xa0>)
  40391c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  40391e:	a801      	add	r0, sp, #4
  403920:	4b07      	ldr	r3, [pc, #28]	; (403940 <timer_add_task+0xa4>)
  403922:	4798      	blx	r3
	return ERR_NONE;
  403924:	2000      	movs	r0, #0
  403926:	e7e2      	b.n	4038ee <timer_add_task+0x52>
  403928:	0040c6dc 	.word	0x0040c6dc
  40392c:	00403a95 	.word	0x00403a95
  403930:	00403a9b 	.word	0x00403a9b
  403934:	00403721 	.word	0x00403721
  403938:	00403121 	.word	0x00403121
  40393c:	00404b11 	.word	0x00404b11
  403940:	0040312f 	.word	0x0040312f

00403944 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  403944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  403948:	460f      	mov	r7, r1
  40394a:	4691      	mov	r9, r2
  40394c:	2900      	cmp	r1, #0
  40394e:	bf18      	it	ne
  403950:	2a00      	cmpne	r2, #0
  403952:	bf14      	ite	ne
  403954:	2301      	movne	r3, #1
  403956:	2300      	moveq	r3, #0
  403958:	4604      	mov	r4, r0
  40395a:	22f1      	movs	r2, #241	; 0xf1
  40395c:	4912      	ldr	r1, [pc, #72]	; (4039a8 <usart_sync_write+0x64>)
  40395e:	2800      	cmp	r0, #0
  403960:	bf0c      	ite	eq
  403962:	2000      	moveq	r0, #0
  403964:	f003 0001 	andne.w	r0, r3, #1
  403968:	4b10      	ldr	r3, [pc, #64]	; (4039ac <usart_sync_write+0x68>)
  40396a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  40396c:	3408      	adds	r4, #8
  40396e:	4d10      	ldr	r5, [pc, #64]	; (4039b0 <usart_sync_write+0x6c>)
  403970:	4620      	mov	r0, r4
  403972:	47a8      	blx	r5
  403974:	2800      	cmp	r0, #0
  403976:	d0fb      	beq.n	403970 <usart_sync_write+0x2c>
  403978:	3f01      	subs	r7, #1
  40397a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  40397c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4039b8 <usart_sync_write+0x74>
		while (!_usart_sync_is_ready_to_send(&descr->device))
  403980:	4d0b      	ldr	r5, [pc, #44]	; (4039b0 <usart_sync_write+0x6c>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
  403982:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  403986:	4620      	mov	r0, r4
  403988:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
  40398a:	4620      	mov	r0, r4
  40398c:	47a8      	blx	r5
  40398e:	2800      	cmp	r0, #0
  403990:	d0fb      	beq.n	40398a <usart_sync_write+0x46>
			;
	} while (++offset < length);
  403992:	3601      	adds	r6, #1
  403994:	454e      	cmp	r6, r9
  403996:	d3f4      	bcc.n	403982 <usart_sync_write+0x3e>
	while (!_usart_sync_is_transmit_done(&descr->device))
  403998:	4d06      	ldr	r5, [pc, #24]	; (4039b4 <usart_sync_write+0x70>)
  40399a:	4620      	mov	r0, r4
  40399c:	47a8      	blx	r5
  40399e:	2800      	cmp	r0, #0
  4039a0:	d0fb      	beq.n	40399a <usart_sync_write+0x56>
		;
	return (int32_t)offset;
}
  4039a2:	4630      	mov	r0, r6
  4039a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4039a8:	0040c6f4 	.word	0x0040c6f4
  4039ac:	00403a95 	.word	0x00403a95
  4039b0:	00404cf9 	.word	0x00404cf9
  4039b4:	00404d21 	.word	0x00404d21
  4039b8:	00404cb1 	.word	0x00404cb1

004039bc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4039bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4039c0:	460f      	mov	r7, r1
  4039c2:	4691      	mov	r9, r2
  4039c4:	2900      	cmp	r1, #0
  4039c6:	bf18      	it	ne
  4039c8:	2a00      	cmpne	r2, #0
  4039ca:	bf14      	ite	ne
  4039cc:	2301      	movne	r3, #1
  4039ce:	2300      	moveq	r3, #0
  4039d0:	4604      	mov	r4, r0
  4039d2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4039d6:	490e      	ldr	r1, [pc, #56]	; (403a10 <usart_sync_read+0x54>)
  4039d8:	2800      	cmp	r0, #0
  4039da:	bf0c      	ite	eq
  4039dc:	2000      	moveq	r0, #0
  4039de:	f003 0001 	andne.w	r0, r3, #1
  4039e2:	4b0c      	ldr	r3, [pc, #48]	; (403a14 <usart_sync_read+0x58>)
  4039e4:	4798      	blx	r3
  4039e6:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
  4039e8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4039ea:	3408      	adds	r4, #8
  4039ec:	4d0a      	ldr	r5, [pc, #40]	; (403a18 <usart_sync_read+0x5c>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4039ee:	f8df 802c 	ldr.w	r8, [pc, #44]	; 403a1c <usart_sync_read+0x60>
		while (!_usart_sync_is_byte_received(&descr->device))
  4039f2:	4620      	mov	r0, r4
  4039f4:	47a8      	blx	r5
  4039f6:	2800      	cmp	r0, #0
  4039f8:	d0fb      	beq.n	4039f2 <usart_sync_read+0x36>
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4039fa:	4620      	mov	r0, r4
  4039fc:	47c0      	blx	r8
  4039fe:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
  403a02:	3601      	adds	r6, #1
  403a04:	454e      	cmp	r6, r9
  403a06:	d3f4      	bcc.n	4039f2 <usart_sync_read+0x36>

	return (int32_t)offset;
}
  403a08:	4630      	mov	r0, r6
  403a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a0e:	bf00      	nop
  403a10:	0040c6f4 	.word	0x0040c6f4
  403a14:	00403a95 	.word	0x00403a95
  403a18:	00404d49 	.word	0x00404d49
  403a1c:	00404cd5 	.word	0x00404cd5

00403a20 <usart_sync_init>:
{
  403a20:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  403a22:	4604      	mov	r4, r0
  403a24:	460d      	mov	r5, r1
  403a26:	2800      	cmp	r0, #0
  403a28:	bf18      	it	ne
  403a2a:	2900      	cmpne	r1, #0
  403a2c:	bf14      	ite	ne
  403a2e:	2001      	movne	r0, #1
  403a30:	2000      	moveq	r0, #0
  403a32:	2234      	movs	r2, #52	; 0x34
  403a34:	4907      	ldr	r1, [pc, #28]	; (403a54 <usart_sync_init+0x34>)
  403a36:	4b08      	ldr	r3, [pc, #32]	; (403a58 <usart_sync_init+0x38>)
  403a38:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  403a3a:	4629      	mov	r1, r5
  403a3c:	f104 0008 	add.w	r0, r4, #8
  403a40:	4b06      	ldr	r3, [pc, #24]	; (403a5c <usart_sync_init+0x3c>)
  403a42:	4798      	blx	r3
	if (init_status) {
  403a44:	4603      	mov	r3, r0
  403a46:	b918      	cbnz	r0, 403a50 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  403a48:	4a05      	ldr	r2, [pc, #20]	; (403a60 <usart_sync_init+0x40>)
  403a4a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  403a4c:	4a05      	ldr	r2, [pc, #20]	; (403a64 <usart_sync_init+0x44>)
  403a4e:	6022      	str	r2, [r4, #0]
}
  403a50:	4618      	mov	r0, r3
  403a52:	bd38      	pop	{r3, r4, r5, pc}
  403a54:	0040c6f4 	.word	0x0040c6f4
  403a58:	00403a95 	.word	0x00403a95
  403a5c:	00404c45 	.word	0x00404c45
  403a60:	004039bd 	.word	0x004039bd
  403a64:	00403945 	.word	0x00403945

00403a68 <usart_sync_enable>:
{
  403a68:	b510      	push	{r4, lr}
	ASSERT(descr);
  403a6a:	4604      	mov	r4, r0
  403a6c:	2253      	movs	r2, #83	; 0x53
  403a6e:	4906      	ldr	r1, [pc, #24]	; (403a88 <usart_sync_enable+0x20>)
  403a70:	3000      	adds	r0, #0
  403a72:	bf18      	it	ne
  403a74:	2001      	movne	r0, #1
  403a76:	4b05      	ldr	r3, [pc, #20]	; (403a8c <usart_sync_enable+0x24>)
  403a78:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  403a7a:	f104 0008 	add.w	r0, r4, #8
  403a7e:	4b04      	ldr	r3, [pc, #16]	; (403a90 <usart_sync_enable+0x28>)
  403a80:	4798      	blx	r3
}
  403a82:	2000      	movs	r0, #0
  403a84:	bd10      	pop	{r4, pc}
  403a86:	bf00      	nop
  403a88:	0040c6f4 	.word	0x0040c6f4
  403a8c:	00403a95 	.word	0x00403a95
  403a90:	00404c7d 	.word	0x00404c7d

00403a94 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  403a94:	b900      	cbnz	r0, 403a98 <assert+0x4>
		__asm("BKPT #0");
  403a96:	be00      	bkpt	0x0000
  403a98:	4770      	bx	lr

00403a9a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  403a9a:	6803      	ldr	r3, [r0, #0]
  403a9c:	b14b      	cbz	r3, 403ab2 <is_list_element+0x18>
		if (it == element) {
  403a9e:	428b      	cmp	r3, r1
  403aa0:	d009      	beq.n	403ab6 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
  403aa2:	681b      	ldr	r3, [r3, #0]
  403aa4:	b11b      	cbz	r3, 403aae <is_list_element+0x14>
		if (it == element) {
  403aa6:	4299      	cmp	r1, r3
  403aa8:	d1fb      	bne.n	403aa2 <is_list_element+0x8>
			return true;
  403aaa:	2001      	movs	r0, #1
		}
	}

	return false;
}
  403aac:	4770      	bx	lr
	return false;
  403aae:	2000      	movs	r0, #0
  403ab0:	4770      	bx	lr
  403ab2:	2000      	movs	r0, #0
  403ab4:	4770      	bx	lr
			return true;
  403ab6:	2001      	movs	r0, #1
  403ab8:	4770      	bx	lr
	...

00403abc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  403abc:	b538      	push	{r3, r4, r5, lr}
  403abe:	4604      	mov	r4, r0
  403ac0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  403ac2:	4b06      	ldr	r3, [pc, #24]	; (403adc <list_insert_as_head+0x20>)
  403ac4:	4798      	blx	r3
  403ac6:	f080 0001 	eor.w	r0, r0, #1
  403aca:	2239      	movs	r2, #57	; 0x39
  403acc:	4904      	ldr	r1, [pc, #16]	; (403ae0 <list_insert_as_head+0x24>)
  403ace:	b2c0      	uxtb	r0, r0
  403ad0:	4b04      	ldr	r3, [pc, #16]	; (403ae4 <list_insert_as_head+0x28>)
  403ad2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  403ad4:	6823      	ldr	r3, [r4, #0]
  403ad6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  403ad8:	6025      	str	r5, [r4, #0]
  403ada:	bd38      	pop	{r3, r4, r5, pc}
  403adc:	00403a9b 	.word	0x00403a9b
  403ae0:	0040c710 	.word	0x0040c710
  403ae4:	00403a95 	.word	0x00403a95

00403ae8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  403ae8:	6803      	ldr	r3, [r0, #0]
  403aea:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  403aec:	6001      	str	r1, [r0, #0]
  403aee:	4770      	bx	lr

00403af0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  403af0:	6803      	ldr	r3, [r0, #0]
  403af2:	b10b      	cbz	r3, 403af8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  403af4:	681a      	ldr	r2, [r3, #0]
  403af6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
  403af8:	4618      	mov	r0, r3
  403afa:	4770      	bx	lr

00403afc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  403afc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  403afe:	4a06      	ldr	r2, [pc, #24]	; (403b18 <_sbrk+0x1c>)
  403b00:	6812      	ldr	r2, [r2, #0]
  403b02:	b122      	cbz	r2, 403b0e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403b04:	4a04      	ldr	r2, [pc, #16]	; (403b18 <_sbrk+0x1c>)
  403b06:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  403b08:	4403      	add	r3, r0
  403b0a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  403b0c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403b0e:	4903      	ldr	r1, [pc, #12]	; (403b1c <_sbrk+0x20>)
  403b10:	4a01      	ldr	r2, [pc, #4]	; (403b18 <_sbrk+0x1c>)
  403b12:	6011      	str	r1, [r2, #0]
  403b14:	e7f6      	b.n	403b04 <_sbrk+0x8>
  403b16:	bf00      	nop
  403b18:	204306f0 	.word	0x204306f0
  403b1c:	20430ee0 	.word	0x20430ee0

00403b20 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  403b20:	f04f 30ff 	mov.w	r0, #4294967295
  403b24:	4770      	bx	lr

00403b26 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  403b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403b2a:	604b      	str	r3, [r1, #4]

	return 0;
}
  403b2c:	2000      	movs	r0, #0
  403b2e:	4770      	bx	lr

00403b30 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  403b30:	2001      	movs	r0, #1
  403b32:	4770      	bx	lr

00403b34 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  403b34:	2000      	movs	r0, #0
  403b36:	4770      	bx	lr

00403b38 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  403b38:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  403b3a:	2b00      	cmp	r3, #0
  403b3c:	db09      	blt.n	403b52 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403b3e:	095b      	lsrs	r3, r3, #5
  403b40:	f000 001f 	and.w	r0, r0, #31
  403b44:	2201      	movs	r2, #1
  403b46:	fa02 f000 	lsl.w	r0, r2, r0
  403b4a:	3340      	adds	r3, #64	; 0x40
  403b4c:	4a01      	ldr	r2, [pc, #4]	; (403b54 <_irq_set+0x1c>)
  403b4e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  403b52:	4770      	bx	lr
  403b54:	e000e100 	.word	0xe000e100

00403b58 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  403b58:	f44f 7396 	mov.w	r3, #300	; 0x12c
  403b5c:	fb03 f000 	mul.w	r0, r3, r0
  403b60:	4770      	bx	lr
	...

00403b64 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  403b64:	4b01      	ldr	r3, [pc, #4]	; (403b6c <_get_cycles_for_ms+0x8>)
  403b66:	fb03 f000 	mul.w	r0, r3, r0
  403b6a:	4770      	bx	lr
  403b6c:	000493e0 	.word	0x000493e0

00403b70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  403b70:	b500      	push	{lr}
  403b72:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  403b74:	a801      	add	r0, sp, #4
  403b76:	4b0e      	ldr	r3, [pc, #56]	; (403bb0 <_init_chip+0x40>)
  403b78:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  403b7a:	4a0e      	ldr	r2, [pc, #56]	; (403bb4 <_init_chip+0x44>)
  403b7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  403b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  403b88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403b8c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  403b90:	a801      	add	r0, sp, #4
  403b92:	4b09      	ldr	r3, [pc, #36]	; (403bb8 <_init_chip+0x48>)
  403b94:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  403b96:	4a09      	ldr	r2, [pc, #36]	; (403bbc <_init_chip+0x4c>)
  403b98:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  403b9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  403b9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  403ba2:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  403ba4:	4b06      	ldr	r3, [pc, #24]	; (403bc0 <_init_chip+0x50>)
  403ba6:	4798      	blx	r3
}
  403ba8:	b003      	add	sp, #12
  403baa:	f85d fb04 	ldr.w	pc, [sp], #4
  403bae:	bf00      	nop
  403bb0:	00403121 	.word	0x00403121
  403bb4:	e000ed00 	.word	0xe000ed00
  403bb8:	0040312f 	.word	0x0040312f
  403bbc:	400e0c00 	.word	0x400e0c00
  403bc0:	00404511 	.word	0x00404511

00403bc4 <_mci_reset>:
 * \brief Reset the HSMCI interface
 *
 * \param hw The pointer to MCI hardware instance
 */
static void _mci_reset(const void *const hw)
{
  403bc4:	b570      	push	{r4, r5, r6, lr}
	uint32_t mr, dtor, sdcr, cstor, cfg;

	ASSERT(hw);
  403bc6:	4604      	mov	r4, r0
  403bc8:	223e      	movs	r2, #62	; 0x3e
  403bca:	490b      	ldr	r1, [pc, #44]	; (403bf8 <_mci_reset+0x34>)
  403bcc:	3000      	adds	r0, #0
  403bce:	bf18      	it	ne
  403bd0:	2001      	movne	r0, #1
  403bd2:	4b0a      	ldr	r3, [pc, #40]	; (403bfc <_mci_reset+0x38>)
  403bd4:	4798      	blx	r3
	HSMCI_CRITICAL_SECTION_LEAVE();
}

static inline hri_hsmci_mr_reg_t hri_hsmci_read_MR_reg(const void *const hw)
{
	return ((Hsmci *)hw)->HSMCI_MR;
  403bd6:	6865      	ldr	r5, [r4, #4]
	HSMCI_CRITICAL_SECTION_LEAVE();
}

static inline hri_hsmci_dtor_reg_t hri_hsmci_read_DTOR_reg(const void *const hw)
{
	return ((Hsmci *)hw)->HSMCI_DTOR;
  403bd8:	68a0      	ldr	r0, [r4, #8]
	HSMCI_CRITICAL_SECTION_LEAVE();
}

static inline hri_hsmci_sdcr_reg_t hri_hsmci_read_SDCR_reg(const void *const hw)
{
	return ((Hsmci *)hw)->HSMCI_SDCR;
  403bda:	68e1      	ldr	r1, [r4, #12]
	HSMCI_CRITICAL_SECTION_LEAVE();
}

static inline hri_hsmci_cstor_reg_t hri_hsmci_read_CSTOR_reg(const void *const hw)
{
	return ((Hsmci *)hw)->HSMCI_CSTOR;
  403bdc:	69e2      	ldr	r2, [r4, #28]
	HSMCI_CRITICAL_SECTION_LEAVE();
}

static inline hri_hsmci_cfg_reg_t hri_hsmci_read_CFG_reg(const void *const hw)
{
	return ((Hsmci *)hw)->HSMCI_CFG;
  403bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
}

static inline void hri_hsmci_write_CR_reg(const void *const hw, hri_hsmci_cr_reg_t data)
{
	HSMCI_CRITICAL_SECTION_ENTER();
	((Hsmci *)hw)->HSMCI_CR = data;
  403be0:	2680      	movs	r6, #128	; 0x80
  403be2:	6026      	str	r6, [r4, #0]
	((Hsmci *)hw)->HSMCI_MR = data;
  403be4:	6065      	str	r5, [r4, #4]
	((Hsmci *)hw)->HSMCI_DTOR = data;
  403be6:	60a0      	str	r0, [r4, #8]
	((Hsmci *)hw)->HSMCI_SDCR = data;
  403be8:	60e1      	str	r1, [r4, #12]
	((Hsmci *)hw)->HSMCI_CSTOR = data;
  403bea:	61e2      	str	r2, [r4, #28]
	((Hsmci *)hw)->HSMCI_CFG = data;
  403bec:	6563      	str	r3, [r4, #84]	; 0x54
	((Hsmci *)hw)->HSMCI_DMA = data;
  403bee:	2300      	movs	r3, #0
  403bf0:	6523      	str	r3, [r4, #80]	; 0x50
	((Hsmci *)hw)->HSMCI_CR = data;
  403bf2:	2305      	movs	r3, #5
  403bf4:	6023      	str	r3, [r4, #0]
  403bf6:	bd70      	pop	{r4, r5, r6, pc}
  403bf8:	0040c730 	.word	0x0040c730
  403bfc:	00403a95 	.word	0x00403a95

00403c00 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
  403c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c04:	4688      	mov	r8, r1
  403c06:	4615      	mov	r5, r2
  403c08:	461f      	mov	r7, r3
	uint32_t sr;
	ASSERT(hw);
  403c0a:	4604      	mov	r4, r0
  403c0c:	1c06      	adds	r6, r0, #0
  403c0e:	bf18      	it	ne
  403c10:	2601      	movne	r6, #1
  403c12:	2298      	movs	r2, #152	; 0x98
  403c14:	492b      	ldr	r1, [pc, #172]	; (403cc4 <_mci_send_cmd_execute+0xc4>)
  403c16:	4630      	mov	r0, r6
  403c18:	4b2b      	ldr	r3, [pc, #172]	; (403cc8 <_mci_send_cmd_execute+0xc8>)
  403c1a:	4798      	blx	r3

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  403c1c:	f005 013f 	and.w	r1, r5, #63	; 0x3f
  403c20:	ea41 0108 	orr.w	r1, r1, r8
	if (cmd & MCI_RESP_PRESENT) {
  403c24:	f415 7f80 	tst.w	r5, #256	; 0x100
  403c28:	d004      	beq.n	403c34 <_mci_send_cmd_execute+0x34>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & MCI_RESP_136) {
  403c2a:	f415 6f00 	tst.w	r5, #2048	; 0x800
  403c2e:	d00b      	beq.n	403c48 <_mci_send_cmd_execute+0x48>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  403c30:	f441 5184 	orr.w	r1, r1, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & MCI_CMD_OPENDRAIN) {
  403c34:	f415 4f80 	tst.w	r5, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  403c38:	bf18      	it	ne
  403c3a:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
	((Hsmci *)hw)->HSMCI_ARGR = data;
  403c3e:	6127      	str	r7, [r4, #16]
}

static inline void hri_hsmci_write_CMDR_reg(const void *const hw, hri_hsmci_cmdr_reg_t data)
{
	HSMCI_CRITICAL_SECTION_ENTER();
	((Hsmci *)hw)->HSMCI_CMDR = data;
  403c40:	6161      	str	r1, [r4, #20]
	hri_hsmci_write_CMDR_reg(hw, cmdr);

	/* Wait end of command */
	do {
		sr = hri_hsmci_read_SR_reg(hw);
		if (cmd & MCI_RESP_CRC) {
  403c42:	f405 5280 	and.w	r2, r5, #4096	; 0x1000
  403c46:	e00d      	b.n	403c64 <_mci_send_cmd_execute+0x64>
		} else if (cmd & MCI_RESP_BUSY) {
  403c48:	f415 5f00 	tst.w	r5, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  403c4c:	bf14      	ite	ne
  403c4e:	f441 5186 	orrne.w	r1, r1, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  403c52:	f441 5182 	orreq.w	r1, r1, #4160	; 0x1040
  403c56:	e7ed      	b.n	403c34 <_mci_send_cmd_execute+0x34>
			       | HSMCI_SR_RINDE)) {
				_mci_reset(hw);
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE | HSMCI_SR_RENDE | HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
  403c58:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  403c5c:	d10e      	bne.n	403c7c <_mci_send_cmd_execute+0x7c>
				_mci_reset(hw);
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  403c5e:	f013 0f01 	tst.w	r3, #1
  403c62:	d111      	bne.n	403c88 <_mci_send_cmd_execute+0x88>
	return ((Hsmci *)hw)->HSMCI_SR;
  403c64:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if (cmd & MCI_RESP_CRC) {
  403c66:	2a00      	cmp	r2, #0
  403c68:	d0f6      	beq.n	403c58 <_mci_send_cmd_execute+0x58>
			if (sr
  403c6a:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  403c6e:	d0f6      	beq.n	403c5e <_mci_send_cmd_execute+0x5e>
				_mci_reset(hw);
  403c70:	4620      	mov	r0, r4
  403c72:	4b16      	ldr	r3, [pc, #88]	; (403ccc <_mci_send_cmd_execute+0xcc>)
  403c74:	4798      	blx	r3
				return false;
  403c76:	2000      	movs	r0, #0
  403c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				_mci_reset(hw);
  403c7c:	4620      	mov	r0, r4
  403c7e:	4b13      	ldr	r3, [pc, #76]	; (403ccc <_mci_send_cmd_execute+0xcc>)
  403c80:	4798      	blx	r3
				return false;
  403c82:	2000      	movs	r0, #0
  403c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (cmd & MCI_RESP_BUSY) {
  403c88:	f415 5f00 	tst.w	r5, #8192	; 0x2000
  403c8c:	d102      	bne.n	403c94 <_mci_send_cmd_execute+0x94>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}
	return true;
  403c8e:	2001      	movs	r0, #1
}
  403c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(hw);
  403c94:	227f      	movs	r2, #127	; 0x7f
  403c96:	490b      	ldr	r1, [pc, #44]	; (403cc4 <_mci_send_cmd_execute+0xc4>)
  403c98:	4630      	mov	r0, r6
  403c9a:	4b0b      	ldr	r3, [pc, #44]	; (403cc8 <_mci_send_cmd_execute+0xc8>)
  403c9c:	4798      	blx	r3
  403c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403ca0:	f04f 32ff 	mov.w	r2, #4294967295
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  403ca4:	f003 0330 	and.w	r3, r3, #48	; 0x30
  403ca8:	2b20      	cmp	r3, #32
  403caa:	d008      	beq.n	403cbe <_mci_send_cmd_execute+0xbe>
  403cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if (busy_wait-- == 0) {
  403cae:	3a01      	subs	r2, #1
  403cb0:	d1f8      	bne.n	403ca4 <_mci_send_cmd_execute+0xa4>
			_mci_reset(hw);
  403cb2:	4620      	mov	r0, r4
  403cb4:	4b05      	ldr	r3, [pc, #20]	; (403ccc <_mci_send_cmd_execute+0xcc>)
  403cb6:	4798      	blx	r3
			return false;
  403cb8:	2000      	movs	r0, #0
  403cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
  403cbe:	2001      	movs	r0, #1
  403cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403cc4:	0040c730 	.word	0x0040c730
  403cc8:	00403a95 	.word	0x00403a95
  403ccc:	00403bc5 	.word	0x00403bc5

00403cd0 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
  403cd0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(mci_dev && hw);
  403cd2:	4605      	mov	r5, r0
  403cd4:	460c      	mov	r4, r1
  403cd6:	2800      	cmp	r0, #0
  403cd8:	bf18      	it	ne
  403cda:	2900      	cmpne	r1, #0
  403cdc:	bf14      	ite	ne
  403cde:	2001      	movne	r0, #1
  403ce0:	2000      	moveq	r0, #0
  403ce2:	22cb      	movs	r2, #203	; 0xcb
  403ce4:	4907      	ldr	r1, [pc, #28]	; (403d04 <_mci_sync_init+0x34>)
  403ce6:	4b08      	ldr	r3, [pc, #32]	; (403d08 <_mci_sync_init+0x38>)
  403ce8:	4798      	blx	r3

	mci_dev->hw = hw;
  403cea:	602c      	str	r4, [r5, #0]
	((Hsmci *)hw)->HSMCI_DTOR = data;
  403cec:	2372      	movs	r3, #114	; 0x72
  403cee:	60a3      	str	r3, [r4, #8]
	((Hsmci *)hw)->HSMCI_CSTOR = data;
  403cf0:	61e3      	str	r3, [r4, #28]
	((Hsmci *)hw)->HSMCI_CFG = data;
  403cf2:	2311      	movs	r3, #17
  403cf4:	6563      	str	r3, [r4, #84]	; 0x54
	((Hsmci *)hw)->HSMCI_MR = data;
  403cf6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  403cfa:	6063      	str	r3, [r4, #4]
	((Hsmci *)hw)->HSMCI_CR = data;
  403cfc:	2305      	movs	r3, #5
  403cfe:	6023      	str	r3, [r4, #0]

	/* Enable the HSMCI and the Power Saving */
	hri_hsmci_write_CR_reg(hw, HSMCI_CR_MCIEN | HSMCI_CR_PWSEN);

	return ERR_NONE;
}
  403d00:	2000      	movs	r0, #0
  403d02:	bd38      	pop	{r3, r4, r5, pc}
  403d04:	0040c730 	.word	0x0040c730
  403d08:	00403a95 	.word	0x00403a95

00403d0c <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
  403d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d10:	460d      	mov	r5, r1
  403d12:	4616      	mov	r6, r2
  403d14:	461c      	mov	r4, r3
  403d16:	f89d 8018 	ldrb.w	r8, [sp, #24]
	uint32_t mci_slot      = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t mci_bus_width = HSMCI_SDCR_SDCBUS_1;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
  403d1a:	4607      	mov	r7, r0
  403d1c:	b320      	cbz	r0, 403d68 <_mci_sync_select_device+0x5c>
  403d1e:	6800      	ldr	r0, [r0, #0]
  403d20:	3000      	adds	r0, #0
  403d22:	bf18      	it	ne
  403d24:	2001      	movne	r0, #1
  403d26:	f240 1217 	movw	r2, #279	; 0x117
  403d2a:	4925      	ldr	r1, [pc, #148]	; (403dc0 <_mci_sync_select_device+0xb4>)
  403d2c:	4b25      	ldr	r3, [pc, #148]	; (403dc4 <_mci_sync_select_device+0xb8>)
  403d2e:	4798      	blx	r3
	hw = mci_dev->hw;
  403d30:	683b      	ldr	r3, [r7, #0]

	if (high_speed) {
  403d32:	f1b8 0f00 	cmp.w	r8, #0
  403d36:	d019      	beq.n	403d6c <_mci_sync_select_device+0x60>
	((Hsmci *)hw)->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  403d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  403d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  403d3e:	655a      	str	r2, [r3, #84]	; 0x54
	if ((speed * 2) < mck) {
  403d40:	4a21      	ldr	r2, [pc, #132]	; (403dc8 <_mci_sync_select_device+0xbc>)
  403d42:	ebb2 0f46 	cmp.w	r2, r6, lsl #1
  403d46:	d318      	bcc.n	403d7a <_mci_sync_select_device+0x6e>
		div = (mck / speed) - 2;
  403d48:	3201      	adds	r2, #1
  403d4a:	fbb2 f1f6 	udiv	r1, r2, r6
		if (mck % speed) {
  403d4e:	fb06 2611 	mls	r6, r6, r1, r2
  403d52:	b986      	cbnz	r6, 403d76 <_mci_sync_select_device+0x6a>
		div = (mck / speed) - 2;
  403d54:	3902      	subs	r1, #2
		clkdiv = div >> 1;
  403d56:	084a      	lsrs	r2, r1, #1
	if (clkodd) {
  403d58:	f011 0f01 	tst.w	r1, #1
  403d5c:	d00e      	beq.n	403d7c <_mci_sync_select_device+0x70>
	((Hsmci *)hw)->HSMCI_MR |= HSMCI_MR_CLKODD;
  403d5e:	6859      	ldr	r1, [r3, #4]
  403d60:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403d64:	6059      	str	r1, [r3, #4]
  403d66:	e00d      	b.n	403d84 <_mci_sync_select_device+0x78>
  403d68:	2000      	movs	r0, #0
  403d6a:	e7dc      	b.n	403d26 <_mci_sync_select_device+0x1a>
	((Hsmci *)hw)->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  403d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  403d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  403d72:	655a      	str	r2, [r3, #84]	; 0x54
  403d74:	e7e4      	b.n	403d40 <_mci_sync_select_device+0x34>
			div++;
  403d76:	3901      	subs	r1, #1
  403d78:	e7ed      	b.n	403d56 <_mci_sync_select_device+0x4a>
		clkdiv = 0;
  403d7a:	2200      	movs	r2, #0
	((Hsmci *)hw)->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  403d7c:	6859      	ldr	r1, [r3, #4]
  403d7e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  403d82:	6059      	str	r1, [r3, #4]
	tmp = ((Hsmci *)hw)->HSMCI_MR;
  403d84:	6859      	ldr	r1, [r3, #4]
	tmp &= ~HSMCI_MR_CLKDIV_Msk;
  403d86:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
	tmp |= HSMCI_MR_CLKDIV(data);
  403d8a:	b2d2      	uxtb	r2, r2
  403d8c:	430a      	orrs	r2, r1
	((Hsmci *)hw)->HSMCI_MR = tmp;
  403d8e:	605a      	str	r2, [r3, #4]
		hri_hsmci_clear_CFG_HSMODE_bit(hw);
	}

	_mci_set_speed(hw, clock, CONF_HSMCI_SYS_CLK);

	switch (slot) {
  403d90:	b995      	cbnz	r5, 403db8 <_mci_sync_select_device+0xac>
		break;
	default:
		return ERR_INVALID_ARG;
	}

	switch (bus_width) {
  403d92:	2c04      	cmp	r4, #4
  403d94:	d007      	beq.n	403da6 <_mci_sync_select_device+0x9a>
  403d96:	2c08      	cmp	r4, #8
  403d98:	d00a      	beq.n	403db0 <_mci_sync_select_device+0xa4>
  403d9a:	2c01      	cmp	r4, #1
  403d9c:	d00a      	beq.n	403db4 <_mci_sync_select_device+0xa8>
	case 8:
		mci_bus_width = HSMCI_SDCR_SDCBUS_8;
		break;

	default:
		return ERR_INVALID_ARG;
  403d9e:	f06f 000c 	mvn.w	r0, #12
	}
	hri_hsmci_write_SDCR_reg(hw, mci_slot | mci_bus_width);
	return ERR_NONE;
}
  403da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mci_bus_width = HSMCI_SDCR_SDCBUS_4;
  403da6:	2280      	movs	r2, #128	; 0x80
	((Hsmci *)hw)->HSMCI_SDCR = data;
  403da8:	60da      	str	r2, [r3, #12]
	return ERR_NONE;
  403daa:	2000      	movs	r0, #0
  403dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mci_bus_width = HSMCI_SDCR_SDCBUS_8;
  403db0:	22c0      	movs	r2, #192	; 0xc0
		break;
  403db2:	e7f9      	b.n	403da8 <_mci_sync_select_device+0x9c>
		mci_bus_width = HSMCI_SDCR_SDCBUS_1;
  403db4:	2200      	movs	r2, #0
  403db6:	e7f7      	b.n	403da8 <_mci_sync_select_device+0x9c>
		return ERR_INVALID_ARG;
  403db8:	f06f 000c 	mvn.w	r0, #12
  403dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403dc0:	0040c730 	.word	0x0040c730
  403dc4:	00403a95 	.word	0x00403a95
  403dc8:	11e1a2ff 	.word	0x11e1a2ff

00403dcc <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
  403dcc:	2000      	movs	r0, #0
  403dce:	4770      	bx	lr

00403dd0 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
  403dd0:	2900      	cmp	r1, #0
		return HSMCI_SLOT_0_SIZE;
	default:
		/* Slot number wrong */
		return 0;
	}
}
  403dd2:	bf0c      	ite	eq
  403dd4:	2004      	moveq	r0, #4
  403dd6:	2000      	movne	r0, #0
  403dd8:	4770      	bx	lr

00403dda <_mci_sync_is_high_speed_capable>:
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	(void)(mci_dev);
	return true;
}
  403dda:	2001      	movs	r0, #1
  403ddc:	4770      	bx	lr
	...

00403de0 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
  403de0:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
  403de2:	4604      	mov	r4, r0
  403de4:	b1b8      	cbz	r0, 403e16 <_mci_sync_send_clock+0x36>
  403de6:	6800      	ldr	r0, [r0, #0]
  403de8:	3000      	adds	r0, #0
  403dea:	bf18      	it	ne
  403dec:	2001      	movne	r0, #1
  403dee:	f240 1289 	movw	r2, #393	; 0x189
  403df2:	490a      	ldr	r1, [pc, #40]	; (403e1c <_mci_sync_send_clock+0x3c>)
  403df4:	4b0a      	ldr	r3, [pc, #40]	; (403e20 <_mci_sync_send_clock+0x40>)
  403df6:	4798      	blx	r3
	hw = mci_dev->hw;
  403df8:	6822      	ldr	r2, [r4, #0]
	((Hsmci *)hw)->HSMCI_MR &= ~mask;
  403dfa:	6853      	ldr	r3, [r2, #4]
  403dfc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  403e00:	6053      	str	r3, [r2, #4]
	((Hsmci *)hw)->HSMCI_ARGR = data;
  403e02:	2300      	movs	r3, #0
  403e04:	6113      	str	r3, [r2, #16]
	((Hsmci *)hw)->HSMCI_CMDR = data;
  403e06:	f44f 6310 	mov.w	r3, #2304	; 0x900
  403e0a:	6153      	str	r3, [r2, #20]
	return (((Hsmci *)hw)->HSMCI_SR & HSMCI_SR_CMDRDY) > 0;
  403e0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
	hri_hsmci_clear_MR_reg(hw, HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
	hri_hsmci_write_ARGR_reg(hw, 0);
	/* Write and start initialization command */
	hri_hsmci_write_CMDR_reg(hw, HSMCI_CMDR_RSPTYP_NORESP | HSMCI_CMDR_SPCMD_INIT | HSMCI_CMDR_OPDCMD_OPENDRAIN);
	/* Wait end of initialization command */
	while (!hri_hsmci_get_SR_CMDRDY_bit(hw))
  403e0e:	f013 0f01 	tst.w	r3, #1
  403e12:	d0fb      	beq.n	403e0c <_mci_sync_send_clock+0x2c>
		;
}
  403e14:	bd10      	pop	{r4, pc}
  403e16:	2000      	movs	r0, #0
  403e18:	e7e9      	b.n	403dee <_mci_sync_send_clock+0xe>
  403e1a:	bf00      	nop
  403e1c:	0040c730 	.word	0x0040c730
  403e20:	00403a95 	.word	0x00403a95

00403e24 <_mci_sync_send_cmd>:
}
/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
  403e24:	b570      	push	{r4, r5, r6, lr}
  403e26:	460c      	mov	r4, r1
  403e28:	4615      	mov	r5, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
  403e2a:	4606      	mov	r6, r0
  403e2c:	b1a8      	cbz	r0, 403e5a <_mci_sync_send_cmd+0x36>
  403e2e:	6800      	ldr	r0, [r0, #0]
  403e30:	3000      	adds	r0, #0
  403e32:	bf18      	it	ne
  403e34:	2001      	movne	r0, #1
  403e36:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
  403e3a:	4909      	ldr	r1, [pc, #36]	; (403e60 <_mci_sync_send_cmd+0x3c>)
  403e3c:	4b09      	ldr	r3, [pc, #36]	; (403e64 <_mci_sync_send_cmd+0x40>)
  403e3e:	4798      	blx	r3
	hw = mci_dev->hw;
  403e40:	6830      	ldr	r0, [r6, #0]
	((Hsmci *)hw)->HSMCI_MR &= ~mask;
  403e42:	6843      	ldr	r3, [r0, #4]
  403e44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  403e48:	6043      	str	r3, [r0, #4]
	((Hsmci *)hw)->HSMCI_DMA = data;
  403e4a:	2100      	movs	r1, #0
  403e4c:	6501      	str	r1, [r0, #80]	; 0x50
	((Hsmci *)hw)->HSMCI_BLKR = data;
  403e4e:	6181      	str	r1, [r0, #24]

	/* Configure command */
	hri_hsmci_clear_MR_reg(hw, HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
	hri_hsmci_write_DMA_reg(hw, 0);
	hri_hsmci_write_BLKR_reg(hw, 0);
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
  403e50:	462b      	mov	r3, r5
  403e52:	4622      	mov	r2, r4
  403e54:	4c04      	ldr	r4, [pc, #16]	; (403e68 <_mci_sync_send_cmd+0x44>)
  403e56:	47a0      	blx	r4
}
  403e58:	bd70      	pop	{r4, r5, r6, pc}
  403e5a:	2000      	movs	r0, #0
  403e5c:	e7eb      	b.n	403e36 <_mci_sync_send_cmd+0x12>
  403e5e:	bf00      	nop
  403e60:	0040c730 	.word	0x0040c730
  403e64:	00403a95 	.word	0x00403a95
  403e68:	00403c01 	.word	0x00403c01

00403e6c <_mci_sync_get_response>:
}
/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
  403e6c:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
  403e6e:	4604      	mov	r4, r0
  403e70:	b158      	cbz	r0, 403e8a <_mci_sync_get_response+0x1e>
  403e72:	6800      	ldr	r0, [r0, #0]
  403e74:	3000      	adds	r0, #0
  403e76:	bf18      	it	ne
  403e78:	2001      	movne	r0, #1
  403e7a:	f240 12bb 	movw	r2, #443	; 0x1bb
  403e7e:	4904      	ldr	r1, [pc, #16]	; (403e90 <_mci_sync_get_response+0x24>)
  403e80:	4b04      	ldr	r3, [pc, #16]	; (403e94 <_mci_sync_get_response+0x28>)
  403e82:	4798      	blx	r3
	hw = mci_dev->hw;
  403e84:	6823      	ldr	r3, [r4, #0]
	return ((Hsmci *)hw)->HSMCI_RSPR[index];
  403e86:	6a18      	ldr	r0, [r3, #32]

	return hri_hsmci_read_RSPR_reg(hw, 0);
}
  403e88:	bd10      	pop	{r4, pc}
  403e8a:	2000      	movs	r0, #0
  403e8c:	e7f5      	b.n	403e7a <_mci_sync_get_response+0xe>
  403e8e:	bf00      	nop
  403e90:	0040c730 	.word	0x0040c730
  403e94:	00403a95 	.word	0x00403a95

00403e98 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
  403e98:	b538      	push	{r3, r4, r5, lr}
  403e9a:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
  403e9c:	4605      	mov	r5, r0
  403e9e:	b1e0      	cbz	r0, 403eda <_mci_sync_get_response_128+0x42>
  403ea0:	6800      	ldr	r0, [r0, #0]
  403ea2:	3000      	adds	r0, #0
  403ea4:	bf18      	it	ne
  403ea6:	2001      	movne	r0, #1
  403ea8:	f240 12cf 	movw	r2, #463	; 0x1cf
  403eac:	490c      	ldr	r1, [pc, #48]	; (403ee0 <_mci_sync_get_response_128+0x48>)
  403eae:	4b0d      	ldr	r3, [pc, #52]	; (403ee4 <_mci_sync_get_response_128+0x4c>)
  403eb0:	4798      	blx	r3
	hw = mci_dev->hw;
  403eb2:	682d      	ldr	r5, [r5, #0]
  403eb4:	1d23      	adds	r3, r4, #4
  403eb6:	f104 0114 	add.w	r1, r4, #20
  403eba:	6a2a      	ldr	r2, [r5, #32]

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = hri_hsmci_read_RSPR_reg(hw, 0);
		*response   = (response_32 >> 24) & 0xFF;
  403ebc:	0e10      	lsrs	r0, r2, #24
  403ebe:	f803 0c04 	strb.w	r0, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  403ec2:	0c10      	lsrs	r0, r2, #16
  403ec4:	f803 0c03 	strb.w	r0, [r3, #-3]
		response++;
		*response = (response_32 >> 8) & 0xFF;
  403ec8:	0a10      	lsrs	r0, r2, #8
  403eca:	f803 0c02 	strb.w	r0, [r3, #-2]
		response++;
		*response = (response_32 >> 0) & 0xFF;
  403ece:	f803 2c01 	strb.w	r2, [r3, #-1]
  403ed2:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  403ed4:	428b      	cmp	r3, r1
  403ed6:	d1f0      	bne.n	403eba <_mci_sync_get_response_128+0x22>
		response++;
	}
}
  403ed8:	bd38      	pop	{r3, r4, r5, pc}
  403eda:	2000      	movs	r0, #0
  403edc:	e7e4      	b.n	403ea8 <_mci_sync_get_response_128+0x10>
  403ede:	bf00      	nop
  403ee0:	0040c730 	.word	0x0040c730
  403ee4:	00403a95 	.word	0x00403a95

00403ee8 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
  403ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403eec:	460d      	mov	r5, r1
  403eee:	4690      	mov	r8, r2
  403ef0:	461e      	mov	r6, r3
  403ef2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	uint32_t cmdr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
  403ef6:	4604      	mov	r4, r0
  403ef8:	2800      	cmp	r0, #0
  403efa:	d032      	beq.n	403f62 <_mci_sync_adtc_start+0x7a>
  403efc:	6800      	ldr	r0, [r0, #0]
  403efe:	3000      	adds	r0, #0
  403f00:	bf18      	it	ne
  403f02:	2001      	movne	r0, #1
  403f04:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
  403f08:	4924      	ldr	r1, [pc, #144]	; (403f9c <_mci_sync_adtc_start+0xb4>)
  403f0a:	4b25      	ldr	r3, [pc, #148]	; (403fa0 <_mci_sync_adtc_start+0xb8>)
  403f0c:	4798      	blx	r3
	hw = mci_dev->hw;
  403f0e:	6820      	ldr	r0, [r4, #0]
	((Hsmci *)hw)->HSMCI_MR |= mask;
  403f10:	6843      	ldr	r3, [r0, #4]
  403f12:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
  403f16:	6043      	str	r3, [r0, #4]
	/* No use without dma support */
	(void)access_block;

	hri_hsmci_set_MR_reg(hw, HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF);
	/* Force byte transfer if needed */
	if (block_size & 0x3) {
  403f18:	f016 0f03 	tst.w	r6, #3
  403f1c:	6843      	ldr	r3, [r0, #4]
  403f1e:	bf14      	ite	ne
  403f20:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
	((Hsmci *)hw)->HSMCI_MR &= ~mask;
  403f24:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
  403f28:	6043      	str	r3, [r0, #4]
		hri_hsmci_set_MR_reg(hw, HSMCI_MR_FBYTE);
	} else {
		hri_hsmci_clear_MR_reg(hw, HSMCI_MR_FBYTE);
	}

	if (cmd & MCI_CMD_WRITE) {
  403f2a:	f405 4300 	and.w	r3, r5, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  403f2e:	2b00      	cmp	r3, #0
  403f30:	bf14      	ite	ne
  403f32:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  403f36:	f44f 21a0 	moveq.w	r1, #327680	; 0x50000
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
  403f3a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
  403f3e:	d012      	beq.n	403f66 <_mci_sync_adtc_start+0x7e>
		cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  403f40:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
		/* Value 0 corresponds to a 512-byte transfer */
		hri_hsmci_write_BLKR_reg(hw, (block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  403f44:	f3c6 0308 	ubfx	r3, r6, #0, #9
	((Hsmci *)hw)->HSMCI_BLKR = data;
  403f48:	6183      	str	r3, [r0, #24]
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
		} else {
			return false;
		}
	}
	mci_dev->mci_sync_trans_pos  = 0;
  403f4a:	2200      	movs	r2, #0
  403f4c:	2300      	movs	r3, #0
  403f4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
  403f52:	8226      	strh	r6, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
  403f54:	8267      	strh	r7, [r4, #18]

	return _mci_send_cmd_execute(hw, cmdr, cmd, arg);
  403f56:	4643      	mov	r3, r8
  403f58:	462a      	mov	r2, r5
  403f5a:	4c12      	ldr	r4, [pc, #72]	; (403fa4 <_mci_sync_adtc_start+0xbc>)
  403f5c:	47a0      	blx	r4
  403f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f62:	2000      	movs	r0, #0
  403f64:	e7ce      	b.n	403f04 <_mci_sync_adtc_start+0x1c>
		hri_hsmci_write_BLKR_reg(hw, (block_size << HSMCI_BLKR_BLKLEN_Pos) | (nb_block << HSMCI_BLKR_BCNT_Pos));
  403f66:	ea47 4306 	orr.w	r3, r7, r6, lsl #16
  403f6a:	6183      	str	r3, [r0, #24]
		if (cmd & MCI_CMD_SDIO_BLOCK) {
  403f6c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
  403f70:	d002      	beq.n	403f78 <_mci_sync_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  403f72:	f441 1120 	orr.w	r1, r1, #2621440	; 0x280000
  403f76:	e7e8      	b.n	403f4a <_mci_sync_adtc_start+0x62>
		} else if (cmd & MCI_CMD_STREAM) {
  403f78:	f415 2f80 	tst.w	r5, #262144	; 0x40000
  403f7c:	d002      	beq.n	403f84 <_mci_sync_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  403f7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403f82:	e7e2      	b.n	403f4a <_mci_sync_adtc_start+0x62>
		} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
  403f84:	f415 2f00 	tst.w	r5, #524288	; 0x80000
  403f88:	d1df      	bne.n	403f4a <_mci_sync_adtc_start+0x62>
		} else if (cmd & MCI_CMD_MULTI_BLOCK) {
  403f8a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
  403f8e:	d002      	beq.n	403f96 <_mci_sync_adtc_start+0xae>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  403f90:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403f94:	e7d9      	b.n	403f4a <_mci_sync_adtc_start+0x62>
			return false;
  403f96:	2000      	movs	r0, #0
}
  403f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f9c:	0040c730 	.word	0x0040c730
  403fa0:	00403a95 	.word	0x00403a95
  403fa4:	00403c01 	.word	0x00403c01

00403fa8 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
  403fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403faa:	460d      	mov	r5, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
  403fac:	4604      	mov	r4, r0
  403fae:	2800      	cmp	r0, #0
  403fb0:	d032      	beq.n	404018 <_mci_sync_read_word+0x70>
  403fb2:	6800      	ldr	r0, [r0, #0]
  403fb4:	3000      	adds	r0, #0
  403fb6:	bf18      	it	ne
  403fb8:	2001      	movne	r0, #1
  403fba:	f240 2265 	movw	r2, #613	; 0x265
  403fbe:	491c      	ldr	r1, [pc, #112]	; (404030 <_mci_sync_read_word+0x88>)
  403fc0:	4b1c      	ldr	r3, [pc, #112]	; (404034 <_mci_sync_read_word+0x8c>)
  403fc2:	4798      	blx	r3
	hw = mci_dev->hw;
  403fc4:	6820      	ldr	r0, [r4, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size & 0x3) ? 1 : 4;
  403fc6:	8a23      	ldrh	r3, [r4, #16]
  403fc8:	f003 0303 	and.w	r3, r3, #3
  403fcc:	2b00      	cmp	r3, #0
  403fce:	bf14      	ite	ne
  403fd0:	2601      	movne	r6, #1
  403fd2:	2604      	moveq	r6, #4
	do {
		sr = hri_hsmci_read_SR_reg(hw);
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
  403fd4:	4a18      	ldr	r2, [pc, #96]	; (404038 <_mci_sync_read_word+0x90>)
	return ((Hsmci *)hw)->HSMCI_SR;
  403fd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403fd8:	4213      	tst	r3, r2
  403fda:	d11f      	bne.n	40401c <_mci_sync_read_word+0x74>
			_mci_reset(hw);
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  403fdc:	f013 0f02 	tst.w	r3, #2
  403fe0:	d0f9      	beq.n	403fd6 <_mci_sync_read_word+0x2e>
	return ((Hsmci *)hw)->HSMCI_RDR;
  403fe2:	6b03      	ldr	r3, [r0, #48]	; 0x30

	/* Read data */
	*value = hri_hsmci_read_RDR_reg(hw);
  403fe4:	602b      	str	r3, [r5, #0]
	mci_dev->mci_sync_trans_pos += nbytes;
  403fe6:	b2f6      	uxtb	r6, r6
  403fe8:	2700      	movs	r7, #0
  403fea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  403fee:	1992      	adds	r2, r2, r6
  403ff0:	417b      	adcs	r3, r7
  403ff2:	e9c4 2302 	strd	r2, r3, [r4, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
  403ff6:	8a26      	ldrh	r6, [r4, #16]
  403ff8:	8a64      	ldrh	r4, [r4, #18]
  403ffa:	fba6 4504 	umull	r4, r5, r6, r4
  403ffe:	42ab      	cmp	r3, r5
  404000:	bf08      	it	eq
  404002:	42a2      	cmpeq	r2, r4
  404004:	d312      	bcc.n	40402c <_mci_sync_read_word+0x84>

	/* Wait end of transfer */
	do {
		sr = hri_hsmci_read_SR_reg(hw);

		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
  404006:	4a0c      	ldr	r2, [pc, #48]	; (404038 <_mci_sync_read_word+0x90>)
	return ((Hsmci *)hw)->HSMCI_SR;
  404008:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40400a:	4213      	tst	r3, r2
  40400c:	d10a      	bne.n	404024 <_mci_sync_read_word+0x7c>
			_mci_reset(hw);
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40400e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  404012:	d0f9      	beq.n	404008 <_mci_sync_read_word+0x60>
	return true;
  404014:	2001      	movs	r0, #1
  404016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404018:	2000      	movs	r0, #0
  40401a:	e7ce      	b.n	403fba <_mci_sync_read_word+0x12>
			_mci_reset(hw);
  40401c:	4b07      	ldr	r3, [pc, #28]	; (40403c <_mci_sync_read_word+0x94>)
  40401e:	4798      	blx	r3
			return false;
  404020:	2000      	movs	r0, #0
  404022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
  404024:	4b05      	ldr	r3, [pc, #20]	; (40403c <_mci_sync_read_word+0x94>)
  404026:	4798      	blx	r3
			return false;
  404028:	2000      	movs	r0, #0
  40402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
  40402c:	2001      	movs	r0, #1
}
  40402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404030:	0040c730 	.word	0x0040c730
  404034:	00403a95 	.word	0x00403a95
  404038:	c0600000 	.word	0xc0600000
  40403c:	00403bc5 	.word	0x00403bc5

00404040 <_mci_sync_write_word>:
}
/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
  404040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404042:	460d      	mov	r5, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
  404044:	4604      	mov	r4, r0
  404046:	2800      	cmp	r0, #0
  404048:	d031      	beq.n	4040ae <_mci_sync_write_word+0x6e>
  40404a:	6800      	ldr	r0, [r0, #0]
  40404c:	3000      	adds	r0, #0
  40404e:	bf18      	it	ne
  404050:	2001      	movne	r0, #1
  404052:	f240 2299 	movw	r2, #665	; 0x299
  404056:	491c      	ldr	r1, [pc, #112]	; (4040c8 <_mci_sync_write_word+0x88>)
  404058:	4b1c      	ldr	r3, [pc, #112]	; (4040cc <_mci_sync_write_word+0x8c>)
  40405a:	4798      	blx	r3
	hw = mci_dev->hw;
  40405c:	6820      	ldr	r0, [r4, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size & 0x3) ? 1 : 4;
  40405e:	8a23      	ldrh	r3, [r4, #16]
  404060:	f003 0303 	and.w	r3, r3, #3
  404064:	2b00      	cmp	r3, #0
  404066:	bf14      	ite	ne
  404068:	2601      	movne	r6, #1
  40406a:	2604      	moveq	r6, #4
	do {
		sr = hri_hsmci_read_SR_reg(hw);
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
  40406c:	4a18      	ldr	r2, [pc, #96]	; (4040d0 <_mci_sync_write_word+0x90>)
  40406e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404070:	4213      	tst	r3, r2
  404072:	d11e      	bne.n	4040b2 <_mci_sync_write_word+0x72>
			_mci_reset(hw);
			return false;
		}
	} while (!(sr & HSMCI_SR_TXRDY));
  404074:	f013 0f04 	tst.w	r3, #4
  404078:	d0f9      	beq.n	40406e <_mci_sync_write_word+0x2e>
}

static inline void hri_hsmci_write_TDR_reg(const void *const hw, hri_hsmci_tdr_reg_t data)
{
	HSMCI_CRITICAL_SECTION_ENTER();
	((Hsmci *)hw)->HSMCI_TDR = data;
  40407a:	6345      	str	r5, [r0, #52]	; 0x34

	/* Write data */
	hri_hsmci_write_TDR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
  40407c:	b2f6      	uxtb	r6, r6
  40407e:	2700      	movs	r7, #0
  404080:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  404084:	1992      	adds	r2, r2, r6
  404086:	417b      	adcs	r3, r7
  404088:	e9c4 2302 	strd	r2, r3, [r4, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
  40408c:	8a26      	ldrh	r6, [r4, #16]
  40408e:	8a64      	ldrh	r4, [r4, #18]
  404090:	fba6 4504 	umull	r4, r5, r6, r4
  404094:	42ab      	cmp	r3, r5
  404096:	bf08      	it	eq
  404098:	42a2      	cmpeq	r2, r4
  40409a:	d312      	bcc.n	4040c2 <_mci_sync_write_word+0x82>

	/* Wait end of transfer */
	do {
		sr = hri_hsmci_read_SR_reg(hw);

		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
  40409c:	4a0c      	ldr	r2, [pc, #48]	; (4040d0 <_mci_sync_write_word+0x90>)
	return ((Hsmci *)hw)->HSMCI_SR;
  40409e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4040a0:	4213      	tst	r3, r2
  4040a2:	d10a      	bne.n	4040ba <_mci_sync_write_word+0x7a>
			_mci_reset(hw);
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  4040a4:	f013 0f20 	tst.w	r3, #32
  4040a8:	d0f9      	beq.n	40409e <_mci_sync_write_word+0x5e>
	return true;
  4040aa:	2001      	movs	r0, #1
  4040ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040ae:	2000      	movs	r0, #0
  4040b0:	e7cf      	b.n	404052 <_mci_sync_write_word+0x12>
			_mci_reset(hw);
  4040b2:	4b08      	ldr	r3, [pc, #32]	; (4040d4 <_mci_sync_write_word+0x94>)
  4040b4:	4798      	blx	r3
			return false;
  4040b6:	2000      	movs	r0, #0
  4040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
  4040ba:	4b06      	ldr	r3, [pc, #24]	; (4040d4 <_mci_sync_write_word+0x94>)
  4040bc:	4798      	blx	r3
			return false;
  4040be:	2000      	movs	r0, #0
  4040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
  4040c2:	2001      	movs	r0, #1
}
  4040c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040c6:	bf00      	nop
  4040c8:	0040c730 	.word	0x0040c730
  4040cc:	00403a95 	.word	0x00403a95
  4040d0:	c0600000 	.word	0xc0600000
  4040d4:	00403bc5 	.word	0x00403bc5

004040d8 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
  4040d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040dc:	460d      	mov	r5, r1
  4040de:	4614      	mov	r4, r2
	uint32_t nb_data;
	uint8_t *ptr = (uint8_t *)dst;
	uint8_t  nbytes;

	ASSERT(mci_dev && mci_dev->hw);
  4040e0:	4607      	mov	r7, r0
  4040e2:	b368      	cbz	r0, 404140 <_mci_sync_start_read_blocks+0x68>
  4040e4:	6800      	ldr	r0, [r0, #0]
  4040e6:	3000      	adds	r0, #0
  4040e8:	bf18      	it	ne
  4040ea:	2001      	movne	r0, #1
  4040ec:	f8df 8058 	ldr.w	r8, [pc, #88]	; 404148 <_mci_sync_start_read_blocks+0x70>
  4040f0:	f240 22ce 	movw	r2, #718	; 0x2ce
  4040f4:	4641      	mov	r1, r8
  4040f6:	4e13      	ldr	r6, [pc, #76]	; (404144 <_mci_sync_start_read_blocks+0x6c>)
  4040f8:	47b0      	blx	r6
	ASSERT(nb_block);
  4040fa:	f240 22cf 	movw	r2, #719	; 0x2cf
  4040fe:	4641      	mov	r1, r8
  404100:	1c20      	adds	r0, r4, #0
  404102:	bf18      	it	ne
  404104:	2001      	movne	r0, #1
  404106:	47b0      	blx	r6
	ASSERT(dst);
  404108:	f44f 7234 	mov.w	r2, #720	; 0x2d0
  40410c:	4641      	mov	r1, r8
  40410e:	1c28      	adds	r0, r5, #0
  404110:	bf18      	it	ne
  404112:	2001      	movne	r0, #1
  404114:	47b0      	blx	r6

	nb_data = nb_block * mci_dev->mci_sync_block_size;
  404116:	8a3b      	ldrh	r3, [r7, #16]
  404118:	fb03 f404 	mul.w	r4, r3, r4
	nbytes  = (mci_dev->mci_sync_block_size & 0x3) ? 1 : 4;
  40411c:	f003 0303 	and.w	r3, r3, #3
  404120:	2b00      	cmp	r3, #0
  404122:	bf14      	ite	ne
  404124:	2601      	movne	r6, #1
  404126:	2604      	moveq	r6, #4

	while (nb_data) {
  404128:	b13c      	cbz	r4, 40413a <_mci_sync_start_read_blocks+0x62>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
  40412a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 40414c <_mci_sync_start_read_blocks+0x74>
  40412e:	4629      	mov	r1, r5
  404130:	4638      	mov	r0, r7
  404132:	47c0      	blx	r8
  404134:	4435      	add	r5, r6
	while (nb_data) {
  404136:	1ba4      	subs	r4, r4, r6
  404138:	d1f9      	bne.n	40412e <_mci_sync_start_read_blocks+0x56>
		nb_data -= nbytes;
		ptr += nbytes;
	}

	return true;
}
  40413a:	2001      	movs	r0, #1
  40413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404140:	2000      	movs	r0, #0
  404142:	e7d3      	b.n	4040ec <_mci_sync_start_read_blocks+0x14>
  404144:	00403a95 	.word	0x00403a95
  404148:	0040c730 	.word	0x0040c730
  40414c:	00403fa9 	.word	0x00403fa9

00404150 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
  404150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404154:	460d      	mov	r5, r1
  404156:	4614      	mov	r4, r2
	uint32_t nb_data;
	uint8_t *ptr = (uint8_t *)src;

	ASSERT(mci_dev && mci_dev->hw);
  404158:	4606      	mov	r6, r0
  40415a:	b338      	cbz	r0, 4041ac <_mci_sync_start_write_blocks+0x5c>
  40415c:	6800      	ldr	r0, [r0, #0]
  40415e:	3000      	adds	r0, #0
  404160:	bf18      	it	ne
  404162:	2001      	movne	r0, #1
  404164:	f8df 8068 	ldr.w	r8, [pc, #104]	; 4041d0 <_mci_sync_start_write_blocks+0x80>
  404168:	f240 22e7 	movw	r2, #743	; 0x2e7
  40416c:	4641      	mov	r1, r8
  40416e:	4f16      	ldr	r7, [pc, #88]	; (4041c8 <_mci_sync_start_write_blocks+0x78>)
  404170:	47b8      	blx	r7
	ASSERT(nb_block);
  404172:	f44f 723a 	mov.w	r2, #744	; 0x2e8
  404176:	4641      	mov	r1, r8
  404178:	1c20      	adds	r0, r4, #0
  40417a:	bf18      	it	ne
  40417c:	2001      	movne	r0, #1
  40417e:	47b8      	blx	r7
	ASSERT(src);
  404180:	f240 22e9 	movw	r2, #745	; 0x2e9
  404184:	4641      	mov	r1, r8
  404186:	1c28      	adds	r0, r5, #0
  404188:	bf18      	it	ne
  40418a:	2001      	movne	r0, #1
  40418c:	47b8      	blx	r7

	nb_data = nb_block * mci_dev->mci_sync_block_size;
  40418e:	8a33      	ldrh	r3, [r6, #16]
  404190:	fb03 f404 	mul.w	r4, r3, r4

	if (mci_dev->mci_sync_block_size & 0x3) {
  404194:	f013 0f03 	tst.w	r3, #3
  404198:	d10a      	bne.n	4041b0 <_mci_sync_start_write_blocks+0x60>
			_mci_sync_write_word(mci_dev, *ptr);
			nb_data--;
			ptr++;
		}
	} else {
		while (nb_data) {
  40419a:	b18c      	cbz	r4, 4041c0 <_mci_sync_start_write_blocks+0x70>
			_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
  40419c:	4f0b      	ldr	r7, [pc, #44]	; (4041cc <_mci_sync_start_write_blocks+0x7c>)
  40419e:	f855 1b04 	ldr.w	r1, [r5], #4
  4041a2:	4630      	mov	r0, r6
  4041a4:	47b8      	blx	r7
		while (nb_data) {
  4041a6:	3c04      	subs	r4, #4
  4041a8:	d1f9      	bne.n	40419e <_mci_sync_start_write_blocks+0x4e>
  4041aa:	e009      	b.n	4041c0 <_mci_sync_start_write_blocks+0x70>
  4041ac:	2000      	movs	r0, #0
  4041ae:	e7d9      	b.n	404164 <_mci_sync_start_write_blocks+0x14>
		while (nb_data) {
  4041b0:	b134      	cbz	r4, 4041c0 <_mci_sync_start_write_blocks+0x70>
			_mci_sync_write_word(mci_dev, *ptr);
  4041b2:	4f06      	ldr	r7, [pc, #24]	; (4041cc <_mci_sync_start_write_blocks+0x7c>)
  4041b4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4041b8:	4630      	mov	r0, r6
  4041ba:	47b8      	blx	r7
		while (nb_data) {
  4041bc:	3c01      	subs	r4, #1
  4041be:	d1f9      	bne.n	4041b4 <_mci_sync_start_write_blocks+0x64>
			ptr += 4;
		}
	}

	return true;
}
  4041c0:	2001      	movs	r0, #1
  4041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041c6:	bf00      	nop
  4041c8:	00403a95 	.word	0x00403a95
  4041cc:	00404041 	.word	0x00404041
  4041d0:	0040c730 	.word	0x0040c730

004041d4 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
  4041d4:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
  4041d6:	b150      	cbz	r0, 4041ee <_mci_sync_wait_end_of_read_blocks+0x1a>
  4041d8:	6800      	ldr	r0, [r0, #0]
  4041da:	3000      	adds	r0, #0
  4041dc:	bf18      	it	ne
  4041de:	2001      	movne	r0, #1
  4041e0:	f240 3203 	movw	r2, #771	; 0x303
  4041e4:	4903      	ldr	r1, [pc, #12]	; (4041f4 <_mci_sync_wait_end_of_read_blocks+0x20>)
  4041e6:	4b04      	ldr	r3, [pc, #16]	; (4041f8 <_mci_sync_wait_end_of_read_blocks+0x24>)
  4041e8:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
  4041ea:	2001      	movs	r0, #1
  4041ec:	bd08      	pop	{r3, pc}
  4041ee:	2000      	movs	r0, #0
  4041f0:	e7f6      	b.n	4041e0 <_mci_sync_wait_end_of_read_blocks+0xc>
  4041f2:	bf00      	nop
  4041f4:	0040c730 	.word	0x0040c730
  4041f8:	00403a95 	.word	0x00403a95

004041fc <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
  4041fc:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
  4041fe:	b150      	cbz	r0, 404216 <_mci_sync_wait_end_of_write_blocks+0x1a>
  404200:	6800      	ldr	r0, [r0, #0]
  404202:	3000      	adds	r0, #0
  404204:	bf18      	it	ne
  404206:	2001      	movne	r0, #1
  404208:	f240 320e 	movw	r2, #782	; 0x30e
  40420c:	4903      	ldr	r1, [pc, #12]	; (40421c <_mci_sync_wait_end_of_write_blocks+0x20>)
  40420e:	4b04      	ldr	r3, [pc, #16]	; (404220 <_mci_sync_wait_end_of_write_blocks+0x24>)
  404210:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
  404212:	2001      	movs	r0, #1
  404214:	bd08      	pop	{r3, pc}
  404216:	2000      	movs	r0, #0
  404218:	e7f6      	b.n	404208 <_mci_sync_wait_end_of_write_blocks+0xc>
  40421a:	bf00      	nop
  40421c:	0040c730 	.word	0x0040c730
  404220:	00403a95 	.word	0x00403a95

00404224 <_ffs>:
/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  404224:	b1d9      	cbz	r1, 40425e <_ffs+0x3a>
{
  404226:	b430      	push	{r4, r5}
  404228:	460d      	mov	r5, r1
  40422a:	3804      	subs	r0, #4
	for (i = 0; i < len; i++) {
  40422c:	2400      	movs	r4, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
			if (v[i] & bit) {
  40422e:	f850 1f04 	ldr.w	r1, [r0, #4]!
  404232:	f011 0f01 	tst.w	r1, #1
  404236:	d10d      	bne.n	404254 <_ffs+0x30>
  404238:	2301      	movs	r3, #1
  40423a:	2202      	movs	r2, #2
  40423c:	4211      	tst	r1, r2
  40423e:	d10a      	bne.n	404256 <_ffs+0x32>
				return i * 32 + j;
			}
			bit <<= 1;
  404240:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  404242:	3301      	adds	r3, #1
  404244:	2b20      	cmp	r3, #32
  404246:	d1f9      	bne.n	40423c <_ffs+0x18>
	for (i = 0; i < len; i++) {
  404248:	3401      	adds	r4, #1
  40424a:	42ac      	cmp	r4, r5
  40424c:	d1ef      	bne.n	40422e <_ffs+0xa>
		}
	}

	return -1;
  40424e:	f04f 30ff 	mov.w	r0, #4294967295
  404252:	e002      	b.n	40425a <_ffs+0x36>
			if (v[i] & bit) {
  404254:	2300      	movs	r3, #0
				return i * 32 + j;
  404256:	eb03 1044 	add.w	r0, r3, r4, lsl #5
}
  40425a:	bc30      	pop	{r4, r5}
  40425c:	4770      	bx	lr
	return -1;
  40425e:	f04f 30ff 	mov.w	r0, #4294967295
  404262:	4770      	bx	lr

00404264 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  404264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404268:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  40426a:	2300      	movs	r3, #0
  40426c:	9301      	str	r3, [sp, #4]
  40426e:	9302      	str	r3, [sp, #8]
  404270:	9303      	str	r3, [sp, #12]
  404272:	9304      	str	r3, [sp, #16]
  404274:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  404276:	4b34      	ldr	r3, [pc, #208]	; (404348 <_ext_irq_handler+0xe4>)
  404278:	6818      	ldr	r0, [r3, #0]
  40427a:	22f8      	movs	r2, #248	; 0xf8
  40427c:	4933      	ldr	r1, [pc, #204]	; (40434c <_ext_irq_handler+0xe8>)
  40427e:	3000      	adds	r0, #0
  404280:	bf18      	it	ne
  404282:	2001      	movne	r0, #1
  404284:	4b32      	ldr	r3, [pc, #200]	; (404350 <_ext_irq_handler+0xec>)
  404286:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  404288:	4b32      	ldr	r3, [pc, #200]	; (404354 <_ext_irq_handler+0xf0>)
  40428a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40428e:	4013      	ands	r3, r2
  404290:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  404292:	4a31      	ldr	r2, [pc, #196]	; (404358 <_ext_irq_handler+0xf4>)
  404294:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  404296:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  404298:	400a      	ands	r2, r1
  40429a:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  40429c:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  40429e:	4a2f      	ldr	r2, [pc, #188]	; (40435c <_ext_irq_handler+0xf8>)
  4042a0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4042a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
#endif

#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	flags[2] = hri_pio_read_ISR_reg(PIOC);
	flags[2] &= hri_pio_read_IMR_reg(PIOC);
  4042a4:	400a      	ands	r2, r1
  4042a6:	9203      	str	r2, [sp, #12]
	flag_total |= flags[2];
  4042a8:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  4042aa:	492d      	ldr	r1, [pc, #180]	; (404360 <_ext_irq_handler+0xfc>)
  4042ac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4042ae:	6c89      	ldr	r1, [r1, #72]	; 0x48
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4042b0:	400a      	ands	r2, r1
  4042b2:	9204      	str	r2, [sp, #16]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  4042b4:	4313      	orrs	r3, r2
  4042b6:	d043      	beq.n	404340 <_ext_irq_handler+0xdc>
	return ((Pio *)hw)->PIO_ISR;
  4042b8:	f8df a098 	ldr.w	sl, [pc, #152]	; 404354 <_ext_irq_handler+0xf0>
  4042bc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40435c <_ext_irq_handler+0xf8>
  4042c0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 404360 <_ext_irq_handler+0xfc>
		pos = _ffs(flags, 5);
  4042c4:	2105      	movs	r1, #5
  4042c6:	a801      	add	r0, sp, #4
  4042c8:	4b26      	ldr	r3, [pc, #152]	; (404364 <_ext_irq_handler+0x100>)
  4042ca:	4798      	blx	r3
  4042cc:	4604      	mov	r4, r0
		while (-1 != pos) {
  4042ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4042d2:	d01a      	beq.n	40430a <_ext_irq_handler+0xa6>
			callback(pos);
  4042d4:	4f1c      	ldr	r7, [pc, #112]	; (404348 <_ext_irq_handler+0xe4>)

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4042d6:	2601      	movs	r6, #1
			pos = _ffs(flags, 5);
  4042d8:	4d22      	ldr	r5, [pc, #136]	; (404364 <_ext_irq_handler+0x100>)
			callback(pos);
  4042da:	4620      	mov	r0, r4
  4042dc:	683b      	ldr	r3, [r7, #0]
  4042de:	4798      	blx	r3
			flags[pos >> 5] &= ~(1 << (pos & 31));
  4042e0:	1163      	asrs	r3, r4, #5
  4042e2:	aa06      	add	r2, sp, #24
  4042e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4042e8:	f004 041f 	and.w	r4, r4, #31
  4042ec:	fa06 f404 	lsl.w	r4, r6, r4
  4042f0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4042f4:	ea22 0204 	bic.w	r2, r2, r4
  4042f8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4042fc:	2105      	movs	r1, #5
  4042fe:	a801      	add	r0, sp, #4
  404300:	47a8      	blx	r5
  404302:	4604      	mov	r4, r0
		while (-1 != pos) {
  404304:	f1b0 3fff 	cmp.w	r0, #4294967295
  404308:	d1e7      	bne.n	4042da <_ext_irq_handler+0x76>
  40430a:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40430e:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  404312:	4013      	ands	r3, r2
  404314:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  404316:	4910      	ldr	r1, [pc, #64]	; (404358 <_ext_irq_handler+0xf4>)
  404318:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40431a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40431c:	4002      	ands	r2, r0
  40431e:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  404320:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  404322:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  404326:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
#endif

#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
		flags[2] = hri_pio_read_ISR_reg(PIOC);
		flags[2] &= hri_pio_read_IMR_reg(PIOC);
  40432a:	400a      	ands	r2, r1
  40432c:	9203      	str	r2, [sp, #12]
		flag_total |= flags[2];
  40432e:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  404330:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  404334:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  404338:	400a      	ands	r2, r1
  40433a:	9204      	str	r2, [sp, #16]
	while (flag_total) {
  40433c:	4313      	orrs	r3, r2
  40433e:	d1c1      	bne.n	4042c4 <_ext_irq_handler+0x60>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  404340:	b006      	add	sp, #24
  404342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404346:	bf00      	nop
  404348:	204306f4 	.word	0x204306f4
  40434c:	0040c7c4 	.word	0x0040c7c4
  404350:	00403a95 	.word	0x00403a95
  404354:	400e0e00 	.word	0x400e0e00
  404358:	400e1000 	.word	0x400e1000
  40435c:	400e1200 	.word	0x400e1200
  404360:	400e1400 	.word	0x400e1400
  404364:	00404225 	.word	0x00404225

00404368 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  404368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int8_t i;

	ASSERT(hw);
  40436a:	4605      	mov	r5, r0
  40436c:	1c07      	adds	r7, r0, #0
  40436e:	bf18      	it	ne
  404370:	2701      	movne	r7, #1
  404372:	4e30      	ldr	r6, [pc, #192]	; (404434 <_pio_init+0xcc>)
  404374:	f240 1263 	movw	r2, #355	; 0x163
  404378:	4631      	mov	r1, r6
  40437a:	4638      	mov	r0, r7
  40437c:	4c2e      	ldr	r4, [pc, #184]	; (404438 <_pio_init+0xd0>)
  40437e:	47a0      	blx	r4
	ASSERT(hw);
  404380:	22e0      	movs	r2, #224	; 0xe0
  404382:	4631      	mov	r1, r6
  404384:	4638      	mov	r0, r7
  404386:	47a0      	blx	r4
	ASSERT(hw);
  404388:	22d2      	movs	r2, #210	; 0xd2
  40438a:	4631      	mov	r1, r6
  40438c:	4638      	mov	r0, r7
  40438e:	47a0      	blx	r4
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  404390:	4c2a      	ldr	r4, [pc, #168]	; (40443c <_pio_init+0xd4>)
  404392:	442c      	add	r4, r5
  404394:	0a64      	lsrs	r4, r4, #9
		if (_ext_irq[i].number == offset) {
  404396:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
  40439a:	d008      	beq.n	4043ae <_pio_init+0x46>
  40439c:	2b01      	cmp	r3, #1
  40439e:	d00a      	beq.n	4043b6 <_pio_init+0x4e>
  4043a0:	2b02      	cmp	r3, #2
  4043a2:	d043      	beq.n	40442c <_pio_init+0xc4>
  4043a4:	2b03      	cmp	r3, #3
  4043a6:	d043      	beq.n	404430 <_pio_init+0xc8>

	i = _pio_get_index(hw);
	if (i < 0) {
		return ERR_DENIED;
  4043a8:	f06f 0010 	mvn.w	r0, #16
  4043ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
  4043ae:	2100      	movs	r1, #0
  4043b0:	e003      	b.n	4043ba <_pio_init+0x52>
	i = _pio_irq_n[_pio_get_hardware_index(hw)];
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  4043b2:	2000      	movs	r0, #0
  4043b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4043b6:	2301      	movs	r3, #1
			return i;
  4043b8:	b259      	sxtb	r1, r3
	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4043ba:	4e21      	ldr	r6, [pc, #132]	; (404440 <_pio_init+0xd8>)
  4043bc:	00cb      	lsls	r3, r1, #3
  4043be:	1a5a      	subs	r2, r3, r1
  4043c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  4043c4:	6890      	ldr	r0, [r2, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4043c6:	f8c5 00b0 	str.w	r0, [r5, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4043ca:	68d0      	ldr	r0, [r2, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4043cc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4043d0:	6910      	ldr	r0, [r2, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4043d2:	f8c5 00c4 	str.w	r0, [r5, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4043d6:	6992      	ldr	r2, [r2, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4043d8:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4043dc:	1a5b      	subs	r3, r3, r1
  4043de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4043e2:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4043e4:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
	ASSERT(hw);
  4043e8:	22d2      	movs	r2, #210	; 0xd2
  4043ea:	4912      	ldr	r1, [pc, #72]	; (404434 <_pio_init+0xcc>)
  4043ec:	4638      	mov	r0, r7
  4043ee:	4b12      	ldr	r3, [pc, #72]	; (404438 <_pio_init+0xd0>)
  4043f0:	4798      	blx	r3
	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4043f2:	fa56 f484 	uxtab	r4, r6, r4
  4043f6:	f994 3070 	ldrsb.w	r3, [r4, #112]	; 0x70
  if ((int32_t)(IRQn) >= 0)
  4043fa:	2b00      	cmp	r3, #0
  4043fc:	dbd9      	blt.n	4043b2 <_pio_init+0x4a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4043fe:	0959      	lsrs	r1, r3, #5
  404400:	f003 031f 	and.w	r3, r3, #31
  404404:	2201      	movs	r2, #1
  404406:	fa02 f303 	lsl.w	r3, r2, r3
  40440a:	4a0e      	ldr	r2, [pc, #56]	; (404444 <_pio_init+0xdc>)
  40440c:	f101 0020 	add.w	r0, r1, #32
  404410:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  404414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  404418:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40441c:	f101 0060 	add.w	r0, r1, #96	; 0x60
  404420:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404424:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
  404428:	2000      	movs	r0, #0
  40442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  40442c:	2302      	movs	r3, #2
  40442e:	e7c3      	b.n	4043b8 <_pio_init+0x50>
  404430:	2303      	movs	r3, #3
  404432:	e7c1      	b.n	4043b8 <_pio_init+0x50>
  404434:	0040c7c4 	.word	0x0040c7c4
  404438:	00403a95 	.word	0x00403a95
  40443c:	bff1f200 	.word	0xbff1f200
  404440:	0040c74c 	.word	0x0040c74c
  404444:	e000e100 	.word	0xe000e100

00404448 <PIOB_Handler>:
{
  404448:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40444a:	4b01      	ldr	r3, [pc, #4]	; (404450 <PIOB_Handler+0x8>)
  40444c:	4798      	blx	r3
  40444e:	bd08      	pop	{r3, pc}
  404450:	00404265 	.word	0x00404265

00404454 <PIOA_Handler>:
{
  404454:	b508      	push	{r3, lr}
	_ext_irq_handler();
  404456:	4b01      	ldr	r3, [pc, #4]	; (40445c <PIOA_Handler+0x8>)
  404458:	4798      	blx	r3
  40445a:	bd08      	pop	{r3, pc}
  40445c:	00404265 	.word	0x00404265

00404460 <PIOD_Handler>:
{
  404460:	b508      	push	{r3, lr}
	_ext_irq_handler();
  404462:	4b01      	ldr	r3, [pc, #4]	; (404468 <PIOD_Handler+0x8>)
  404464:	4798      	blx	r3
  404466:	bd08      	pop	{r3, pc}
  404468:	00404265 	.word	0x00404265

0040446c <PIOC_Handler>:
{
  40446c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40446e:	4b01      	ldr	r3, [pc, #4]	; (404474 <PIOC_Handler+0x8>)
  404470:	4798      	blx	r3
  404472:	bd08      	pop	{r3, pc}
  404474:	00404265 	.word	0x00404265

00404478 <_ext_irq_init>:
}

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  404478:	b538      	push	{r3, r4, r5, lr}
  40447a:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  40447c:	4806      	ldr	r0, [pc, #24]	; (404498 <_ext_irq_init+0x20>)
  40447e:	4c07      	ldr	r4, [pc, #28]	; (40449c <_ext_irq_init+0x24>)
  404480:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  404482:	4807      	ldr	r0, [pc, #28]	; (4044a0 <_ext_irq_init+0x28>)
  404484:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
  404486:	4807      	ldr	r0, [pc, #28]	; (4044a4 <_ext_irq_init+0x2c>)
  404488:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40448a:	4807      	ldr	r0, [pc, #28]	; (4044a8 <_ext_irq_init+0x30>)
  40448c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  40448e:	4b07      	ldr	r3, [pc, #28]	; (4044ac <_ext_irq_init+0x34>)
  404490:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  404492:	2000      	movs	r0, #0
  404494:	bd38      	pop	{r3, r4, r5, pc}
  404496:	bf00      	nop
  404498:	400e0e00 	.word	0x400e0e00
  40449c:	00404369 	.word	0x00404369
  4044a0:	400e1000 	.word	0x400e1000
  4044a4:	400e1200 	.word	0x400e1200
  4044a8:	400e1400 	.word	0x400e1400
  4044ac:	204306f4 	.word	0x204306f4

004044b0 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  4044b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044b4:	4604      	mov	r4, r0
  4044b6:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  4044b8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 40450c <_ext_irq_enable+0x5c>
  4044bc:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  4044c0:	4641      	mov	r1, r8
  4044c2:	289f      	cmp	r0, #159	; 0x9f
  4044c4:	bf8c      	ite	hi
  4044c6:	2000      	movhi	r0, #0
  4044c8:	2001      	movls	r0, #1
  4044ca:	4e0e      	ldr	r6, [pc, #56]	; (404504 <_ext_irq_enable+0x54>)
  4044cc:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  4044ce:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  4044d0:	22c3      	movs	r2, #195	; 0xc3
  4044d2:	4641      	mov	r1, r8
  4044d4:	2d9f      	cmp	r5, #159	; 0x9f
  4044d6:	bf8c      	ite	hi
  4044d8:	2000      	movhi	r0, #0
  4044da:	2001      	movls	r0, #1
  4044dc:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4044de:	096d      	lsrs	r5, r5, #5
  4044e0:	4b09      	ldr	r3, [pc, #36]	; (404508 <_ext_irq_enable+0x58>)
  4044e2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4044e6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4044ea:	b937      	cbnz	r7, 4044fa <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4044ec:	2301      	movs	r3, #1
  4044ee:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4044f2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4044f4:	2000      	movs	r0, #0
  4044f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4044fa:	2301      	movs	r3, #1
  4044fc:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  404500:	642c      	str	r4, [r5, #64]	; 0x40
  404502:	e7f7      	b.n	4044f4 <_ext_irq_enable+0x44>
  404504:	00403a95 	.word	0x00403a95
  404508:	400e0e00 	.word	0x400e0e00
  40450c:	0040c7c4 	.word	0x0040c7c4

00404510 <_pmc_init>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  404510:	491d      	ldr	r1, [pc, #116]	; (404588 <_pmc_init+0x78>)
  404512:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  404514:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  404518:	4b1c      	ldr	r3, [pc, #112]	; (40458c <_pmc_init+0x7c>)
  40451a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40451c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40451e:	460a      	mov	r2, r1
  404520:	6e93      	ldr	r3, [r2, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  404522:	f013 0f01 	tst.w	r3, #1
  404526:	d0fb      	beq.n	404520 <_pmc_init+0x10>
	((Pmc *)hw)->CKGR_MOR |= mask;
  404528:	4b17      	ldr	r3, [pc, #92]	; (404588 <_pmc_init+0x78>)
  40452a:	6a19      	ldr	r1, [r3, #32]
  40452c:	4a18      	ldr	r2, [pc, #96]	; (404590 <_pmc_init+0x80>)
  40452e:	430a      	orrs	r2, r1
  404530:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  404532:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  404534:	4a17      	ldr	r2, [pc, #92]	; (404594 <_pmc_init+0x84>)
  404536:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  404538:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40453a:	4a17      	ldr	r2, [pc, #92]	; (404598 <_pmc_init+0x88>)
  40453c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40453e:	461a      	mov	r2, r3
  404540:	6e93      	ldr	r3, [r2, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  404542:	f013 0f02 	tst.w	r3, #2
  404546:	d0fb      	beq.n	404540 <_pmc_init+0x30>

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  404548:	4a0f      	ldr	r2, [pc, #60]	; (404588 <_pmc_init+0x78>)
  40454a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  404550:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  404552:	6e93      	ldr	r3, [r2, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  404554:	f013 0f08 	tst.w	r3, #8
  404558:	d0fb      	beq.n	404552 <_pmc_init+0x42>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40455a:	4a0b      	ldr	r2, [pc, #44]	; (404588 <_pmc_init+0x78>)
  40455c:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  404562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  404566:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  404568:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40456a:	f013 0f08 	tst.w	r3, #8
  40456e:	d0fb      	beq.n	404568 <_pmc_init+0x58>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  404570:	4a05      	ldr	r2, [pc, #20]	; (404588 <_pmc_init+0x78>)
  404572:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  404574:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  404578:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40457c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40457e:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  404580:	f013 0f08 	tst.w	r3, #8
  404584:	d0fb      	beq.n	40457e <_pmc_init+0x6e>
{
	_pmc_init_sources();
	_pmc_init_master_clock();
	_pmc_init_program_clock();
	_pmc_init_fs_clock();
}
  404586:	4770      	bx	lr
  404588:	400e0600 	.word	0x400e0600
  40458c:	00373e01 	.word	0x00373e01
  404590:	01370000 	.word	0x01370000
  404594:	f800ffff 	.word	0xf800ffff
  404598:	20183f01 	.word	0x20183f01

0040459c <_pwm_get_cfg>:
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
		if (_pwms[i].hw == hw) {
  40459c:	4b08      	ldr	r3, [pc, #32]	; (4045c0 <_pwm_get_cfg+0x24>)
  40459e:	4298      	cmp	r0, r3
  4045a0:	d00c      	beq.n	4045bc <_pwm_get_cfg+0x20>
  4045a2:	f503 3370 	add.w	r3, r3, #245760	; 0x3c000
  4045a6:	4298      	cmp	r0, r3
  4045a8:	d001      	beq.n	4045ae <_pwm_get_cfg+0x12>
			return (_pwms + i);
		}
	}

	return NULL;
  4045aa:	2000      	movs	r0, #0
}
  4045ac:	4770      	bx	lr
  4045ae:	2301      	movs	r3, #1
			return (_pwms + i);
  4045b0:	0118      	lsls	r0, r3, #4
  4045b2:	1ac3      	subs	r3, r0, r3
  4045b4:	4803      	ldr	r0, [pc, #12]	; (4045c4 <_pwm_get_cfg+0x28>)
  4045b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4045ba:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4045bc:	2300      	movs	r3, #0
  4045be:	e7f7      	b.n	4045b0 <_pwm_get_cfg+0x14>
  4045c0:	40020000 	.word	0x40020000
  4045c4:	0040c7e0 	.word	0x0040c7e0

004045c8 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  4045c8:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  4045ca:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  4045cc:	69db      	ldr	r3, [r3, #28]
  4045ce:	b113      	cbz	r3, 4045d6 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  4045d0:	6803      	ldr	r3, [r0, #0]
  4045d2:	b103      	cbz	r3, 4045d6 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  4045d4:	4798      	blx	r3
  4045d6:	bd08      	pop	{r3, pc}

004045d8 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  4045d8:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  4045da:	4b02      	ldr	r3, [pc, #8]	; (4045e4 <PWM0_Handler+0xc>)
  4045dc:	6818      	ldr	r0, [r3, #0]
  4045de:	4b02      	ldr	r3, [pc, #8]	; (4045e8 <PWM0_Handler+0x10>)
  4045e0:	4798      	blx	r3
  4045e2:	bd08      	pop	{r3, pc}
  4045e4:	204306f8 	.word	0x204306f8
  4045e8:	004045c9 	.word	0x004045c9

004045ec <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  4045ec:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  4045ee:	4b02      	ldr	r3, [pc, #8]	; (4045f8 <PWM1_Handler+0xc>)
  4045f0:	6858      	ldr	r0, [r3, #4]
  4045f2:	4b02      	ldr	r3, [pc, #8]	; (4045fc <PWM1_Handler+0x10>)
  4045f4:	4798      	blx	r3
  4045f6:	bd08      	pop	{r3, pc}
  4045f8:	204306f8 	.word	0x204306f8
  4045fc:	004045c9 	.word	0x004045c9

00404600 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  404600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404602:	4605      	mov	r5, r0
	ASSERT(hw);
  404604:	460c      	mov	r4, r1
  404606:	1c08      	adds	r0, r1, #0
  404608:	bf18      	it	ne
  40460a:	2001      	movne	r0, #1
  40460c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  404610:	494b      	ldr	r1, [pc, #300]	; (404740 <_pwm_init+0x140>)
  404612:	4b4c      	ldr	r3, [pc, #304]	; (404744 <_pwm_init+0x144>)
  404614:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  404616:	4620      	mov	r0, r4
  404618:	4b4b      	ldr	r3, [pc, #300]	; (404748 <_pwm_init+0x148>)
  40461a:	4798      	blx	r3

	device->hw = hw;
  40461c:	612c      	str	r4, [r5, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40461e:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  404620:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  404622:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  404624:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  404626:	6903      	ldr	r3, [r0, #16]
  404628:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40462c:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40462e:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  404630:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  404632:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  404634:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  404636:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40463a:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40463c:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  40463e:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  404640:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  404644:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  404646:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40464a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40464c:	b1fb      	cbz	r3, 40468e <_pwm_init+0x8e>
  40464e:	2300      	movs	r3, #0
  404650:	461a      	mov	r2, r3
		ch = cfg->ch + i;
  404652:	011b      	lsls	r3, r3, #4
  404654:	6b07      	ldr	r7, [r0, #48]	; 0x30
  404656:	eb07 0e03 	add.w	lr, r7, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  40465a:	f8de 6004 	ldr.w	r6, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40465e:	5cf9      	ldrb	r1, [r7, r3]
  404660:	3110      	adds	r1, #16
  404662:	0149      	lsls	r1, r1, #5
  404664:	5066      	str	r6, [r4, r1]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  404666:	f8de 600c 	ldr.w	r6, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40466a:	5cf9      	ldrb	r1, [r7, r3]
  40466c:	3110      	adds	r1, #16
  40466e:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  404672:	604e      	str	r6, [r1, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  404674:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  404678:	5cfb      	ldrb	r3, [r7, r3]
  40467a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  40467e:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
  404682:	3201      	adds	r2, #1
  404684:	b252      	sxtb	r2, r2
	for (i = 0; i < cfg->ch_num; i++) {
  404686:	4613      	mov	r3, r2
  404688:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40468a:	428a      	cmp	r2, r1
  40468c:	d3e1      	bcc.n	404652 <_pwm_init+0x52>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
  40468e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  404690:	b1db      	cbz	r3, 4046ca <_pwm_init+0xca>
  404692:	2300      	movs	r3, #0
  404694:	461a      	mov	r2, r3
		comp = cfg->comp + i;
  404696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40469a:	6b81      	ldr	r1, [r0, #56]	; 0x38
  40469c:	eb01 0e83 	add.w	lr, r1, r3, lsl #2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4046a0:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4046a4:	f811 6023 	ldrb.w	r6, [r1, r3, lsl #2]
  4046a8:	eb04 1606 	add.w	r6, r4, r6, lsl #4
  4046ac:	f8c6 7138 	str.w	r7, [r6, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4046b0:	f8de 6008 	ldr.w	r6, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4046b4:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
  4046b8:	3313      	adds	r3, #19
  4046ba:	011b      	lsls	r3, r3, #4
  4046bc:	50e6      	str	r6, [r4, r3]
  4046be:	3201      	adds	r2, #1
  4046c0:	b252      	sxtb	r2, r2
	for (i = 0; i < cfg->comp_num; i++) {
  4046c2:	4613      	mov	r3, r2
  4046c4:	6b41      	ldr	r1, [r0, #52]	; 0x34
  4046c6:	428a      	cmp	r2, r1
  4046c8:	d3e5      	bcc.n	404696 <_pwm_init+0x96>
	if (hw == PWM0) {
  4046ca:	4b20      	ldr	r3, [pc, #128]	; (40474c <_pwm_init+0x14c>)
  4046cc:	429c      	cmp	r4, r3
  4046ce:	d031      	beq.n	404734 <_pwm_init+0x134>
	if (hw == PWM1) {
  4046d0:	4b1f      	ldr	r3, [pc, #124]	; (404750 <_pwm_init+0x150>)
  4046d2:	429c      	cmp	r4, r3
  4046d4:	d031      	beq.n	40473a <_pwm_init+0x13a>
	}

	_pwm_init_irq_param(hw, device);
	NVIC_DisableIRQ(cfg->irq);
  4046d6:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  4046da:	2b00      	cmp	r3, #0
  4046dc:	db28      	blt.n	404730 <_pwm_init+0x130>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4046de:	095a      	lsrs	r2, r3, #5
  4046e0:	f003 031f 	and.w	r3, r3, #31
  4046e4:	2101      	movs	r1, #1
  4046e6:	fa01 f303 	lsl.w	r3, r1, r3
  4046ea:	3220      	adds	r2, #32
  4046ec:	4919      	ldr	r1, [pc, #100]	; (404754 <_pwm_init+0x154>)
  4046ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4046f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4046f6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4046fa:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  4046fe:	2b00      	cmp	r3, #0
  404700:	db16      	blt.n	404730 <_pwm_init+0x130>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404702:	095a      	lsrs	r2, r3, #5
  404704:	f003 031f 	and.w	r3, r3, #31
  404708:	2101      	movs	r1, #1
  40470a:	fa01 f303 	lsl.w	r3, r1, r3
  40470e:	3260      	adds	r2, #96	; 0x60
  404710:	4910      	ldr	r1, [pc, #64]	; (404754 <_pwm_init+0x154>)
  404712:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  404716:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40471a:	2b00      	cmp	r3, #0
  40471c:	db08      	blt.n	404730 <_pwm_init+0x130>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40471e:	0959      	lsrs	r1, r3, #5
  404720:	f003 031f 	and.w	r3, r3, #31
  404724:	2201      	movs	r2, #1
  404726:	fa02 f303 	lsl.w	r3, r2, r3
  40472a:	4a0a      	ldr	r2, [pc, #40]	; (404754 <_pwm_init+0x154>)
  40472c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  404730:	2000      	movs	r0, #0
  404732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pwm0_dev = dev;
  404734:	4b08      	ldr	r3, [pc, #32]	; (404758 <_pwm_init+0x158>)
  404736:	601d      	str	r5, [r3, #0]
  404738:	e7cd      	b.n	4046d6 <_pwm_init+0xd6>
		_pwm1_dev = dev;
  40473a:	4b07      	ldr	r3, [pc, #28]	; (404758 <_pwm_init+0x158>)
  40473c:	605d      	str	r5, [r3, #4]
  40473e:	e7ca      	b.n	4046d6 <_pwm_init+0xd6>
  404740:	0040c8b8 	.word	0x0040c8b8
  404744:	00403a95 	.word	0x00403a95
  404748:	0040459d 	.word	0x0040459d
  40474c:	40020000 	.word	0x40020000
  404750:	4005c000 	.word	0x4005c000
  404754:	e000e100 	.word	0xe000e100
  404758:	204306f8 	.word	0x204306f8

0040475c <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  40475c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40475e:	4604      	mov	r4, r0
  404760:	f240 12b5 	movw	r2, #437	; 0x1b5
  404764:	490d      	ldr	r1, [pc, #52]	; (40479c <_pwm_enable+0x40>)
  404766:	3000      	adds	r0, #0
  404768:	bf18      	it	ne
  40476a:	2001      	movne	r0, #1
  40476c:	4b0c      	ldr	r3, [pc, #48]	; (4047a0 <_pwm_enable+0x44>)
  40476e:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  404770:	6920      	ldr	r0, [r4, #16]
  404772:	4b0c      	ldr	r3, [pc, #48]	; (4047a4 <_pwm_enable+0x48>)
  404774:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  404776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  404778:	b17b      	cbz	r3, 40479a <_pwm_enable+0x3e>
  40477a:	2200      	movs	r2, #0
  40477c:	4613      	mov	r3, r2
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40477e:	2601      	movs	r6, #1
  404780:	6921      	ldr	r1, [r4, #16]
  404782:	6b05      	ldr	r5, [r0, #48]	; 0x30
  404784:	0112      	lsls	r2, r2, #4
  404786:	5caa      	ldrb	r2, [r5, r2]
  404788:	fa06 f202 	lsl.w	r2, r6, r2
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40478c:	604a      	str	r2, [r1, #4]
  40478e:	3301      	adds	r3, #1
  404790:	b25b      	sxtb	r3, r3
	for (i = 0; i < cfg->ch_num; i++) {
  404792:	461a      	mov	r2, r3
  404794:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  404796:	428b      	cmp	r3, r1
  404798:	d3f2      	bcc.n	404780 <_pwm_enable+0x24>
  40479a:	bd70      	pop	{r4, r5, r6, pc}
  40479c:	0040c8b8 	.word	0x0040c8b8
  4047a0:	00403a95 	.word	0x00403a95
  4047a4:	0040459d 	.word	0x0040459d

004047a8 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle, const uint8_t channel)
{
  4047a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4047ac:	460e      	mov	r6, r1
  4047ae:	4690      	mov	r8, r2
  4047b0:	461c      	mov	r4, r3
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4047b2:	4607      	mov	r7, r0
  4047b4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4047b8:	490e      	ldr	r1, [pc, #56]	; (4047f4 <_pwm_set_param+0x4c>)
  4047ba:	2800      	cmp	r0, #0
  4047bc:	bf18      	it	ne
  4047be:	45b0      	cmpne	r8, r6
  4047c0:	bf34      	ite	cc
  4047c2:	2001      	movcc	r0, #1
  4047c4:	2000      	movcs	r0, #0
  4047c6:	4b0c      	ldr	r3, [pc, #48]	; (4047f8 <_pwm_set_param+0x50>)
  4047c8:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4047ca:	693d      	ldr	r5, [r7, #16]
  4047cc:	4628      	mov	r0, r5
  4047ce:	4b0b      	ldr	r3, [pc, #44]	; (4047fc <_pwm_set_param+0x54>)
  4047d0:	4798      	blx	r3
	hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[channel].index, duty_cycle);
  4047d2:	0123      	lsls	r3, r4, #4
  4047d4:	6b02      	ldr	r2, [r0, #48]	; 0x30
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4047d6:	5cd2      	ldrb	r2, [r2, r3]
  4047d8:	eb05 1542 	add.w	r5, r5, r2, lsl #5
  4047dc:	f8c5 8208 	str.w	r8, [r5, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[channel].index, period);
  4047e0:	693a      	ldr	r2, [r7, #16]
  4047e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4047e4:	5ccb      	ldrb	r3, [r1, r3]
  4047e6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
  4047ea:	f8c3 6210 	str.w	r6, [r3, #528]	; 0x210
  4047ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047f2:	bf00      	nop
  4047f4:	0040c8b8 	.word	0x0040c8b8
  4047f8:	00403a95 	.word	0x00403a95
  4047fc:	0040459d 	.word	0x0040459d

00404800 <_pwm_is_enabled>:
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  404800:	b510      	push	{r4, lr}
	ASSERT(device);
  404802:	4604      	mov	r4, r0
  404804:	f240 12db 	movw	r2, #475	; 0x1db
  404808:	4906      	ldr	r1, [pc, #24]	; (404824 <_pwm_is_enabled+0x24>)
  40480a:	3000      	adds	r0, #0
  40480c:	bf18      	it	ne
  40480e:	2001      	movne	r0, #1
  404810:	4b05      	ldr	r3, [pc, #20]	; (404828 <_pwm_is_enabled+0x28>)
  404812:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  404814:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  404816:	68d8      	ldr	r0, [r3, #12]
	if (status == 0) {
		return false;
	} else {
		return true;
	}
}
  404818:	f010 000f 	ands.w	r0, r0, #15
  40481c:	bf18      	it	ne
  40481e:	2001      	movne	r0, #1
  404820:	bd10      	pop	{r4, pc}
  404822:	bf00      	nop
  404824:	0040c8b8 	.word	0x0040c8b8
  404828:	00403a95 	.word	0x00403a95

0040482c <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  40482c:	2000      	movs	r0, #0
  40482e:	4770      	bx	lr

00404830 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
  404830:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
  404832:	4604      	mov	r4, r0
  404834:	b168      	cbz	r0, 404852 <_calendar_init+0x22>
  404836:	6800      	ldr	r0, [r0, #0]
  404838:	3000      	adds	r0, #0
  40483a:	bf18      	it	ne
  40483c:	2001      	movne	r0, #1
  40483e:	223f      	movs	r2, #63	; 0x3f
  404840:	4905      	ldr	r1, [pc, #20]	; (404858 <_calendar_init+0x28>)
  404842:	4b06      	ldr	r3, [pc, #24]	; (40485c <_calendar_init+0x2c>)
  404844:	4798      	blx	r3

	_rtc_dev = dev;
  404846:	4b06      	ldr	r3, [pc, #24]	; (404860 <_calendar_init+0x30>)
  404848:	601c      	str	r4, [r3, #0]
	hri_rtc_write_MR_reg(dev->hw, RTC_MR_VALUE);
  40484a:	6823      	ldr	r3, [r4, #0]
}

static inline void hri_rtc_write_MR_reg(const void *const hw, hri_rtc_mr_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->RTC_MR = data;
  40484c:	2000      	movs	r0, #0
  40484e:	6058      	str	r0, [r3, #4]

	return ERR_NONE;
}
  404850:	bd10      	pop	{r4, pc}
  404852:	2000      	movs	r0, #0
  404854:	e7f3      	b.n	40483e <_calendar_init+0xe>
  404856:	bf00      	nop
  404858:	0040c8d0 	.word	0x0040c8d0
  40485c:	00403a95 	.word	0x00403a95
  404860:	20430718 	.word	0x20430718

00404864 <_calendar_get_date_time>:
/**
 * \brief Get the time for calendar HAL instance and hardware
 *  Retrieve the time from calendar instance.
 */
uint32_t _calendar_get_date_time(struct calendar_dev *const dev, struct calendar_date_time *const date_time)
{
  404864:	b538      	push	{r3, r4, r5, lr}
  404866:	460c      	mov	r4, r1
	uint32_t ul_date;
	uint32_t ul_time;
	uint32_t ul_cent;
	uint32_t ul_temp;

	ASSERT(dev && dev->hw);
  404868:	4605      	mov	r5, r0
  40486a:	2800      	cmp	r0, #0
  40486c:	d069      	beq.n	404942 <_calendar_get_date_time+0xde>
  40486e:	6800      	ldr	r0, [r0, #0]
  404870:	3000      	adds	r0, #0
  404872:	bf18      	it	ne
  404874:	2001      	movne	r0, #1
  404876:	22c1      	movs	r2, #193	; 0xc1
  404878:	4933      	ldr	r1, [pc, #204]	; (404948 <_calendar_get_date_time+0xe4>)
  40487a:	4b34      	ldr	r3, [pc, #208]	; (40494c <_calendar_get_date_time+0xe8>)
  40487c:	4798      	blx	r3

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = hri_rtc_read_CALR_reg(dev->hw);
  40487e:	682a      	ldr	r2, [r5, #0]
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtc_calr_reg_t hri_rtc_read_CALR_reg(const void *const hw)
{
	return ((Rtc *)hw)->RTC_CALR;
  404880:	68d1      	ldr	r1, [r2, #12]
  404882:	68d3      	ldr	r3, [r2, #12]
	while (ul_date != hri_rtc_read_CALR_reg(dev->hw)) {
  404884:	4299      	cmp	r1, r3
  404886:	d003      	beq.n	404890 <_calendar_get_date_time+0x2c>
  404888:	68d3      	ldr	r3, [r2, #12]
  40488a:	68d1      	ldr	r1, [r2, #12]
  40488c:	428b      	cmp	r3, r1
  40488e:	d1fb      	bne.n	404888 <_calendar_get_date_time+0x24>
	}

	/* Get year */
	ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
	ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  404890:	f3c3 2107 	ubfx	r1, r3, #8, #8
	ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404894:	f3c3 1202 	ubfx	r2, r3, #4, #3
  404898:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  40489c:	f003 020f 	and.w	r2, r3, #15
  4048a0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
	date_time->date.year
	    = (ul_cent * BCD_FACTOR * BCD_FACTOR) + (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4048a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4048a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4048ac:	0908      	lsrs	r0, r1, #4
  4048ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4048b2:	f001 010f 	and.w	r1, r1, #15
  4048b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  4048ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4048be:	80e2      	strh	r2, [r4, #6]

	/* Get month */
	ul_temp               = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  4048c0:	f3c3 4204 	ubfx	r2, r3, #16, #5
	date_time->date.month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4048c4:	0911      	lsrs	r1, r2, #4
  4048c6:	0088      	lsls	r0, r1, #2
  4048c8:	4401      	add	r1, r0
  4048ca:	f002 020f 	and.w	r2, r2, #15
  4048ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  4048d2:	7162      	strb	r2, [r4, #5]

	/* Get day */
	ul_temp             = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  4048d4:	f3c3 6305 	ubfx	r3, r3, #24, #6
	date_time->date.day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4048d8:	091a      	lsrs	r2, r3, #4
  4048da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4048de:	f003 030f 	and.w	r3, r3, #15
  4048e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4048e6:	7123      	strb	r3, [r4, #4]

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = hri_rtc_read_TIMR_reg(dev->hw);
  4048e8:	682a      	ldr	r2, [r5, #0]
	return ((Rtc *)hw)->RTC_TIMR;
  4048ea:	6891      	ldr	r1, [r2, #8]
  4048ec:	6893      	ldr	r3, [r2, #8]
	while (ul_time != hri_rtc_read_TIMR_reg(dev->hw)) {
  4048ee:	4299      	cmp	r1, r3
  4048f0:	d003      	beq.n	4048fa <_calendar_get_date_time+0x96>
  4048f2:	6893      	ldr	r3, [r2, #8]
  4048f4:	6891      	ldr	r1, [r2, #8]
  4048f6:	428b      	cmp	r3, r1
  4048f8:	d1fb      	bne.n	4048f2 <_calendar_get_date_time+0x8e>
		ul_time = hri_rtc_read_TIMR_reg(dev->hw);
	}

	/* Get Hour */
	ul_temp              = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  4048fa:	f3c3 4205 	ubfx	r2, r3, #16, #6
	date_time->time.hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4048fe:	0911      	lsrs	r1, r2, #4
  404900:	f002 020f 	and.w	r2, r2, #15
  404904:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404908:	eb02 0241 	add.w	r2, r2, r1, lsl #1

	if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40490c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
		date_time->time.hour += 12;
  404910:	bf18      	it	ne
  404912:	320c      	addne	r2, #12
  404914:	70a2      	strb	r2, [r4, #2]
	}

	/* Get Minute */
	ul_temp             = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  404916:	f3c3 2206 	ubfx	r2, r3, #8, #7
	date_time->time.min = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40491a:	0911      	lsrs	r1, r2, #4
  40491c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404920:	f002 020f 	and.w	r2, r2, #15
  404924:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  404928:	7062      	strb	r2, [r4, #1]

	/* Second */
	ul_temp             = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  40492a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	date_time->time.sec = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40492e:	091a      	lsrs	r2, r3, #4
  404930:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404934:	f003 030f 	and.w	r3, r3, #15
  404938:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  40493c:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
  40493e:	2000      	movs	r0, #0
  404940:	bd38      	pop	{r3, r4, r5, pc}
  404942:	2000      	movs	r0, #0
  404944:	e797      	b.n	404876 <_calendar_get_date_time+0x12>
  404946:	bf00      	nop
  404948:	0040c8d0 	.word	0x0040c8d0
  40494c:	00403a95 	.word	0x00403a95

00404950 <RTC_Handler>:

/**
 * \brief RTC interrupt handler
 */
void RTC_Handler(void)
{
  404950:	b508      	push	{r3, lr}
	hri_rtc_clear_IMR_ALR_bit(_rtc_dev->hw);
  404952:	4b0a      	ldr	r3, [pc, #40]	; (40497c <RTC_Handler+0x2c>)
  404954:	6818      	ldr	r0, [r3, #0]
  404956:	6803      	ldr	r3, [r0, #0]
	((Rtc *)hw)->RTC_IDR = RTC_IMR_ALR;
  404958:	2202      	movs	r2, #2
  40495a:	625a      	str	r2, [r3, #36]	; 0x24

	/* Read and mask interrupt flag register */
	if (hri_rtc_get_SR_ALARM_bit(_rtc_dev->hw)) {
  40495c:	6803      	ldr	r3, [r0, #0]
	return (((Rtc *)hw)->RTC_SR & RTC_SR_ALARM) > 0;
  40495e:	699a      	ldr	r2, [r3, #24]
  404960:	f012 0f02 	tst.w	r2, #2
  404964:	d105      	bne.n	404972 <RTC_Handler+0x22>
		hri_rtc_write_SCCR_reg(_rtc_dev->hw, RTC_SCCR_ALRCLR);
		_rtc_dev->callback(_rtc_dev);
	}

	hri_rtc_set_IMR_ALR_bit(_rtc_dev->hw);
  404966:	4b05      	ldr	r3, [pc, #20]	; (40497c <RTC_Handler+0x2c>)
  404968:	681b      	ldr	r3, [r3, #0]
  40496a:	681b      	ldr	r3, [r3, #0]
	((Rtc *)hw)->RTC_IER = RTC_IMR_ALR;
  40496c:	2202      	movs	r2, #2
  40496e:	621a      	str	r2, [r3, #32]
  404970:	bd08      	pop	{r3, pc}
}

static inline void hri_rtc_write_SCCR_reg(const void *const hw, hri_rtc_sccr_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->RTC_SCCR = data;
  404972:	2202      	movs	r2, #2
  404974:	61da      	str	r2, [r3, #28]
		_rtc_dev->callback(_rtc_dev);
  404976:	6843      	ldr	r3, [r0, #4]
  404978:	4798      	blx	r3
  40497a:	e7f4      	b.n	404966 <RTC_Handler+0x16>
  40497c:	20430718 	.word	0x20430718

00404980 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  404980:	4b03      	ldr	r3, [pc, #12]	; (404990 <_delay_init+0x10>)
  404982:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  404986:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  404988:	2205      	movs	r2, #5
  40498a:	601a      	str	r2, [r3, #0]
  40498c:	4770      	bx	lr
  40498e:	bf00      	nop
  404990:	e000e010 	.word	0xe000e010

00404994 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  404994:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  404996:	b1fb      	cbz	r3, 4049d8 <_delay_cycles+0x44>
{
  404998:	b430      	push	{r4, r5}
  40499a:	1e5d      	subs	r5, r3, #1
  40499c:	b2ed      	uxtb	r5, r5
	while (n--) {
  40499e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
  4049a0:	4a12      	ldr	r2, [pc, #72]	; (4049ec <_delay_cycles+0x58>)
  4049a2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
  4049a6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
  4049a8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4049aa:	6813      	ldr	r3, [r2, #0]
  4049ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4049b0:	d0fb      	beq.n	4049aa <_delay_cycles+0x16>
	while (n--) {
  4049b2:	3801      	subs	r0, #1
  4049b4:	b2c0      	uxtb	r0, r0
  4049b6:	28ff      	cmp	r0, #255	; 0xff
  4049b8:	d1f5      	bne.n	4049a6 <_delay_cycles+0x12>
  4049ba:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
  4049be:	4b0c      	ldr	r3, [pc, #48]	; (4049f0 <_delay_cycles+0x5c>)
  4049c0:	440b      	add	r3, r1
  4049c2:	18e9      	adds	r1, r5, r3
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
  4049c4:	4b09      	ldr	r3, [pc, #36]	; (4049ec <_delay_cycles+0x58>)
  4049c6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4049c8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4049ca:	461a      	mov	r2, r3
  4049cc:	6813      	ldr	r3, [r2, #0]
  4049ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4049d2:	d0fb      	beq.n	4049cc <_delay_cycles+0x38>
		;
}
  4049d4:	bc30      	pop	{r4, r5}
  4049d6:	4770      	bx	lr
	SysTick->LOAD = buf;
  4049d8:	4b04      	ldr	r3, [pc, #16]	; (4049ec <_delay_cycles+0x58>)
  4049da:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4049dc:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4049de:	461a      	mov	r2, r3
  4049e0:	6813      	ldr	r3, [r2, #0]
  4049e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4049e6:	d0fb      	beq.n	4049e0 <_delay_cycles+0x4c>
  4049e8:	4770      	bx	lr
  4049ea:	bf00      	nop
  4049ec:	e000e010 	.word	0xe000e010
  4049f0:	ff000001 	.word	0xff000001

004049f4 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4049f4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4049f6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4049f8:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4049fa:	f013 0f10 	tst.w	r3, #16
  4049fe:	d100      	bne.n	404a02 <tc_interrupt_handler+0xe>
  404a00:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  404a02:	6803      	ldr	r3, [r0, #0]
  404a04:	4798      	blx	r3
	}
}
  404a06:	e7fb      	b.n	404a00 <tc_interrupt_handler+0xc>

00404a08 <_timer_init>:
{
  404a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a0a:	4607      	mov	r7, r0
  404a0c:	460c      	mov	r4, r1
		if (_tcs[i].hw == hw) {
  404a0e:	4b33      	ldr	r3, [pc, #204]	; (404adc <_timer_init+0xd4>)
  404a10:	681b      	ldr	r3, [r3, #0]
  404a12:	4299      	cmp	r1, r3
  404a14:	d05a      	beq.n	404acc <_timer_init+0xc4>
  404a16:	4b31      	ldr	r3, [pc, #196]	; (404adc <_timer_init+0xd4>)
  404a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  404a1a:	4299      	cmp	r1, r3
  404a1c:	d04f      	beq.n	404abe <_timer_init+0xb6>
	return NULL;
  404a1e:	2500      	movs	r5, #0
	uint32_t                 ch_mode = cfg->channel_mode;
  404a20:	68ae      	ldr	r6, [r5, #8]
	device->hw = hw;
  404a22:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  404a24:	2296      	movs	r2, #150	; 0x96
  404a26:	492e      	ldr	r1, [pc, #184]	; (404ae0 <_timer_init+0xd8>)
  404a28:	2001      	movs	r0, #1
  404a2a:	4b2e      	ldr	r3, [pc, #184]	; (404ae4 <_timer_init+0xdc>)
  404a2c:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  404a2e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  404a32:	bf18      	it	ne
  404a34:	f446 2614 	orrne.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  404a38:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  404a3a:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  404a3c:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  404a3e:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  404a40:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  404a42:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  404a44:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  404a46:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  404a48:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  404a4a:	2310      	movs	r3, #16
  404a4c:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  404a4e:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  404a50:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (hw == TC0) {
  404a54:	4b24      	ldr	r3, [pc, #144]	; (404ae8 <_timer_init+0xe0>)
  404a56:	429c      	cmp	r4, r3
  404a58:	d03a      	beq.n	404ad0 <_timer_init+0xc8>
	if (hw == TC2) {
  404a5a:	4b24      	ldr	r3, [pc, #144]	; (404aec <_timer_init+0xe4>)
  404a5c:	429c      	cmp	r4, r3
  404a5e:	d03a      	beq.n	404ad6 <_timer_init+0xce>
	NVIC_DisableIRQ(cfg->irq);
  404a60:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  404a64:	2b00      	cmp	r3, #0
  404a66:	db28      	blt.n	404aba <_timer_init+0xb2>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404a68:	095a      	lsrs	r2, r3, #5
  404a6a:	f003 031f 	and.w	r3, r3, #31
  404a6e:	2101      	movs	r1, #1
  404a70:	fa01 f303 	lsl.w	r3, r1, r3
  404a74:	3220      	adds	r2, #32
  404a76:	491e      	ldr	r1, [pc, #120]	; (404af0 <_timer_init+0xe8>)
  404a78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  404a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  404a80:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  404a84:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  404a88:	2b00      	cmp	r3, #0
  404a8a:	db16      	blt.n	404aba <_timer_init+0xb2>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404a8c:	095a      	lsrs	r2, r3, #5
  404a8e:	f003 031f 	and.w	r3, r3, #31
  404a92:	2101      	movs	r1, #1
  404a94:	fa01 f303 	lsl.w	r3, r1, r3
  404a98:	3260      	adds	r2, #96	; 0x60
  404a9a:	4915      	ldr	r1, [pc, #84]	; (404af0 <_timer_init+0xe8>)
  404a9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  404aa0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  404aa4:	2b00      	cmp	r3, #0
  404aa6:	db08      	blt.n	404aba <_timer_init+0xb2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404aa8:	0959      	lsrs	r1, r3, #5
  404aaa:	f003 031f 	and.w	r3, r3, #31
  404aae:	2201      	movs	r2, #1
  404ab0:	fa02 f303 	lsl.w	r3, r2, r3
  404ab4:	4a0e      	ldr	r2, [pc, #56]	; (404af0 <_timer_init+0xe8>)
  404ab6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  404aba:	2000      	movs	r0, #0
  404abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (_tcs[i].hw == hw) {
  404abe:	2301      	movs	r3, #1
			return &(_tcs[i]);
  404ac0:	00dd      	lsls	r5, r3, #3
  404ac2:	442b      	add	r3, r5
  404ac4:	4d05      	ldr	r5, [pc, #20]	; (404adc <_timer_init+0xd4>)
  404ac6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404aca:	e7a9      	b.n	404a20 <_timer_init+0x18>
		if (_tcs[i].hw == hw) {
  404acc:	2300      	movs	r3, #0
  404ace:	e7f7      	b.n	404ac0 <_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
  404ad0:	4b08      	ldr	r3, [pc, #32]	; (404af4 <_timer_init+0xec>)
  404ad2:	601f      	str	r7, [r3, #0]
  404ad4:	e7c4      	b.n	404a60 <_timer_init+0x58>
		_tc2_dev = (struct _timer_device *)dev;
  404ad6:	4b07      	ldr	r3, [pc, #28]	; (404af4 <_timer_init+0xec>)
  404ad8:	605f      	str	r7, [r3, #4]
  404ada:	e7c1      	b.n	404a60 <_timer_init+0x58>
  404adc:	20400000 	.word	0x20400000
  404ae0:	0040c8e8 	.word	0x0040c8e8
  404ae4:	00403a95 	.word	0x00403a95
  404ae8:	4000c000 	.word	0x4000c000
  404aec:	40014000 	.word	0x40014000
  404af0:	e000e100 	.word	0xe000e100
  404af4:	2043071c 	.word	0x2043071c

00404af8 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  404af8:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  404afa:	2205      	movs	r2, #5
  404afc:	601a      	str	r2, [r3, #0]
  404afe:	4770      	bx	lr

00404b00 <_timer_set_period>:
	hri_tc_write_RC_reg(device->hw, 0, clock_cycles);
  404b00:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  404b02:	61d9      	str	r1, [r3, #28]
  404b04:	4770      	bx	lr

00404b06 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  404b06:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  404b08:	6a18      	ldr	r0, [r3, #32]
}
  404b0a:	f3c0 4000 	ubfx	r0, r0, #16, #1
  404b0e:	4770      	bx	lr

00404b10 <_timer_set_irq>:
{
  404b10:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  404b12:	68c3      	ldr	r3, [r0, #12]
		if (_tcs[i].hw == hw) {
  404b14:	4a0a      	ldr	r2, [pc, #40]	; (404b40 <_timer_set_irq+0x30>)
  404b16:	6812      	ldr	r2, [r2, #0]
  404b18:	4293      	cmp	r3, r2
  404b1a:	d00f      	beq.n	404b3c <_timer_set_irq+0x2c>
  404b1c:	4a08      	ldr	r2, [pc, #32]	; (404b40 <_timer_set_irq+0x30>)
  404b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
  404b20:	4293      	cmp	r3, r2
  404b22:	d004      	beq.n	404b2e <_timer_set_irq+0x1e>
	return NULL;
  404b24:	2300      	movs	r3, #0
	_irq_set((IRQn_Type)(cfg->irq));
  404b26:	7918      	ldrb	r0, [r3, #4]
  404b28:	4b06      	ldr	r3, [pc, #24]	; (404b44 <_timer_set_irq+0x34>)
  404b2a:	4798      	blx	r3
  404b2c:	bd08      	pop	{r3, pc}
		if (_tcs[i].hw == hw) {
  404b2e:	2201      	movs	r2, #1
			return &(_tcs[i]);
  404b30:	00d3      	lsls	r3, r2, #3
  404b32:	441a      	add	r2, r3
  404b34:	4b02      	ldr	r3, [pc, #8]	; (404b40 <_timer_set_irq+0x30>)
  404b36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  404b3a:	e7f4      	b.n	404b26 <_timer_set_irq+0x16>
		if (_tcs[i].hw == hw) {
  404b3c:	2200      	movs	r2, #0
  404b3e:	e7f7      	b.n	404b30 <_timer_set_irq+0x20>
  404b40:	20400000 	.word	0x20400000
  404b44:	00403b39 	.word	0x00403b39

00404b48 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  404b48:	2000      	movs	r0, #0
  404b4a:	4770      	bx	lr

00404b4c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  404b4c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  404b4e:	4b02      	ldr	r3, [pc, #8]	; (404b58 <TC0_Handler+0xc>)
  404b50:	6818      	ldr	r0, [r3, #0]
  404b52:	4b02      	ldr	r3, [pc, #8]	; (404b5c <TC0_Handler+0x10>)
  404b54:	4798      	blx	r3
  404b56:	bd08      	pop	{r3, pc}
  404b58:	2043071c 	.word	0x2043071c
  404b5c:	004049f5 	.word	0x004049f5

00404b60 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
  404b60:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
  404b62:	4b02      	ldr	r3, [pc, #8]	; (404b6c <TC6_Handler+0xc>)
  404b64:	6858      	ldr	r0, [r3, #4]
  404b66:	4b02      	ldr	r3, [pc, #8]	; (404b70 <TC6_Handler+0x10>)
  404b68:	4798      	blx	r3
  404b6a:	bd08      	pop	{r3, pc}
  404b6c:	2043071c 	.word	0x2043071c
  404b70:	004049f5 	.word	0x004049f5

00404b74 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  404b74:	b510      	push	{r4, lr}
	ASSERT(hw);
  404b76:	4604      	mov	r4, r0
  404b78:	f240 222b 	movw	r2, #555	; 0x22b
  404b7c:	4905      	ldr	r1, [pc, #20]	; (404b94 <_usart_get_hardware_index+0x20>)
  404b7e:	3000      	adds	r0, #0
  404b80:	bf18      	it	ne
  404b82:	2001      	movne	r0, #1
  404b84:	4b04      	ldr	r3, [pc, #16]	; (404b98 <_usart_get_hardware_index+0x24>)
  404b86:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  404b88:	4804      	ldr	r0, [pc, #16]	; (404b9c <_usart_get_hardware_index+0x28>)
  404b8a:	4420      	add	r0, r4
}
  404b8c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  404b90:	bd10      	pop	{r4, pc}
  404b92:	bf00      	nop
  404b94:	0040c908 	.word	0x0040c908
  404b98:	00403a95 	.word	0x00403a95
  404b9c:	bffdc000 	.word	0xbffdc000

00404ba0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  404ba0:	b510      	push	{r4, lr}
	ASSERT(hw);
  404ba2:	4604      	mov	r4, r0
  404ba4:	f240 2287 	movw	r2, #647	; 0x287
  404ba8:	4909      	ldr	r1, [pc, #36]	; (404bd0 <_get_usart_index+0x30>)
  404baa:	3000      	adds	r0, #0
  404bac:	bf18      	it	ne
  404bae:	2001      	movne	r0, #1
  404bb0:	4b08      	ldr	r3, [pc, #32]	; (404bd4 <_get_usart_index+0x34>)
  404bb2:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  404bb4:	4620      	mov	r0, r4
  404bb6:	4b08      	ldr	r3, [pc, #32]	; (404bd8 <_get_usart_index+0x38>)
  404bb8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == usart_offset) {
  404bba:	2801      	cmp	r0, #1
  404bbc:	d005      	beq.n	404bca <_get_usart_index+0x2a>
			return i;
		}
	}

	ASSERT(false);
  404bbe:	f240 2291 	movw	r2, #657	; 0x291
  404bc2:	4903      	ldr	r1, [pc, #12]	; (404bd0 <_get_usart_index+0x30>)
  404bc4:	2000      	movs	r0, #0
  404bc6:	4b03      	ldr	r3, [pc, #12]	; (404bd4 <_get_usart_index+0x34>)
  404bc8:	4798      	blx	r3
	return 0;
}
  404bca:	2000      	movs	r0, #0
  404bcc:	bd10      	pop	{r4, pc}
  404bce:	bf00      	nop
  404bd0:	0040c908 	.word	0x0040c908
  404bd4:	00403a95 	.word	0x00403a95
  404bd8:	00404b75 	.word	0x00404b75

00404bdc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  404bdc:	b510      	push	{r4, lr}
	ASSERT(hw);
  404bde:	4604      	mov	r4, r0
  404be0:	f240 229e 	movw	r2, #670	; 0x29e
  404be4:	4911      	ldr	r1, [pc, #68]	; (404c2c <_usart_init+0x50>)
  404be6:	3000      	adds	r0, #0
  404be8:	bf18      	it	ne
  404bea:	2001      	movne	r0, #1
  404bec:	4b10      	ldr	r3, [pc, #64]	; (404c30 <_usart_init+0x54>)
  404bee:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  404bf0:	4620      	mov	r0, r4
  404bf2:	4b10      	ldr	r3, [pc, #64]	; (404c34 <_usart_init+0x58>)
  404bf4:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  404bf6:	4b10      	ldr	r3, [pc, #64]	; (404c38 <_usart_init+0x5c>)
  404bf8:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  404bfc:	2300      	movs	r3, #0
  404bfe:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  404c00:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  404c02:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  404c04:	22ac      	movs	r2, #172	; 0xac
  404c06:	6022      	str	r2, [r4, #0]
  404c08:	f44f 7280 	mov.w	r2, #256	; 0x100
  404c0c:	6022      	str	r2, [r4, #0]
  404c0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404c12:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  404c14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  404c18:	4a08      	ldr	r2, [pc, #32]	; (404c3c <_usart_init+0x60>)
  404c1a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  404c1e:	6842      	ldr	r2, [r0, #4]
	((Usart *)hw)->US_MR = data;
  404c20:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  404c22:	4a07      	ldr	r2, [pc, #28]	; (404c40 <_usart_init+0x64>)
  404c24:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  404c26:	4618      	mov	r0, r3
  404c28:	bd10      	pop	{r4, pc}
  404c2a:	bf00      	nop
  404c2c:	0040c908 	.word	0x0040c908
  404c30:	00403a95 	.word	0x00403a95
  404c34:	00404ba1 	.word	0x00404ba1
  404c38:	55534100 	.word	0x55534100
  404c3c:	0040c8fc 	.word	0x0040c8fc
  404c40:	00010a2c 	.word	0x00010a2c

00404c44 <_usart_sync_init>:
{
  404c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c46:	460c      	mov	r4, r1
	ASSERT(device);
  404c48:	4e09      	ldr	r6, [pc, #36]	; (404c70 <_usart_sync_init+0x2c>)
  404c4a:	4607      	mov	r7, r0
  404c4c:	22bd      	movs	r2, #189	; 0xbd
  404c4e:	4631      	mov	r1, r6
  404c50:	3000      	adds	r0, #0
  404c52:	bf18      	it	ne
  404c54:	2001      	movne	r0, #1
  404c56:	4d07      	ldr	r5, [pc, #28]	; (404c74 <_usart_sync_init+0x30>)
  404c58:	47a8      	blx	r5
	ASSERT(hw);
  404c5a:	22be      	movs	r2, #190	; 0xbe
  404c5c:	4631      	mov	r1, r6
  404c5e:	1c20      	adds	r0, r4, #0
  404c60:	bf18      	it	ne
  404c62:	2001      	movne	r0, #1
  404c64:	47a8      	blx	r5
	device->hw = hw;
  404c66:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  404c68:	4620      	mov	r0, r4
  404c6a:	4b03      	ldr	r3, [pc, #12]	; (404c78 <_usart_sync_init+0x34>)
  404c6c:	4798      	blx	r3
}
  404c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c70:	0040c908 	.word	0x0040c908
  404c74:	00403a95 	.word	0x00403a95
  404c78:	00404bdd 	.word	0x00404bdd

00404c7c <_usart_sync_enable>:
{
  404c7c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  404c7e:	4e0a      	ldr	r6, [pc, #40]	; (404ca8 <_usart_sync_enable+0x2c>)
  404c80:	4604      	mov	r4, r0
  404c82:	f240 1205 	movw	r2, #261	; 0x105
  404c86:	4631      	mov	r1, r6
  404c88:	3000      	adds	r0, #0
  404c8a:	bf18      	it	ne
  404c8c:	2001      	movne	r0, #1
  404c8e:	4d07      	ldr	r5, [pc, #28]	; (404cac <_usart_sync_enable+0x30>)
  404c90:	47a8      	blx	r5
	_usart_enable(device->hw);
  404c92:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  404c94:	f240 22c7 	movw	r2, #711	; 0x2c7
  404c98:	4631      	mov	r1, r6
  404c9a:	1c20      	adds	r0, r4, #0
  404c9c:	bf18      	it	ne
  404c9e:	2001      	movne	r0, #1
  404ca0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  404ca2:	2350      	movs	r3, #80	; 0x50
  404ca4:	6023      	str	r3, [r4, #0]
  404ca6:	bd70      	pop	{r4, r5, r6, pc}
  404ca8:	0040c908 	.word	0x0040c908
  404cac:	00403a95 	.word	0x00403a95

00404cb0 <_usart_sync_write_byte>:
{
  404cb0:	b538      	push	{r3, r4, r5, lr}
  404cb2:	460c      	mov	r4, r1
	ASSERT(device);
  404cb4:	4605      	mov	r5, r0
  404cb6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  404cba:	4904      	ldr	r1, [pc, #16]	; (404ccc <_usart_sync_write_byte+0x1c>)
  404cbc:	3000      	adds	r0, #0
  404cbe:	bf18      	it	ne
  404cc0:	2001      	movne	r0, #1
  404cc2:	4b03      	ldr	r3, [pc, #12]	; (404cd0 <_usart_sync_write_byte+0x20>)
  404cc4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  404cc6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  404cc8:	61dc      	str	r4, [r3, #28]
  404cca:	bd38      	pop	{r3, r4, r5, pc}
  404ccc:	0040c908 	.word	0x0040c908
  404cd0:	00403a95 	.word	0x00403a95

00404cd4 <_usart_sync_read_byte>:
{
  404cd4:	b510      	push	{r4, lr}
	ASSERT(device);
  404cd6:	4604      	mov	r4, r0
  404cd8:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  404cdc:	4904      	ldr	r1, [pc, #16]	; (404cf0 <_usart_sync_read_byte+0x1c>)
  404cde:	3000      	adds	r0, #0
  404ce0:	bf18      	it	ne
  404ce2:	2001      	movne	r0, #1
  404ce4:	4b03      	ldr	r3, [pc, #12]	; (404cf4 <_usart_sync_read_byte+0x20>)
  404ce6:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  404ce8:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  404cea:	6998      	ldr	r0, [r3, #24]
}
  404cec:	b2c0      	uxtb	r0, r0
  404cee:	bd10      	pop	{r4, pc}
  404cf0:	0040c908 	.word	0x0040c908
  404cf4:	00403a95 	.word	0x00403a95

00404cf8 <_usart_sync_is_ready_to_send>:
{
  404cf8:	b510      	push	{r4, lr}
	ASSERT(device);
  404cfa:	4604      	mov	r4, r0
  404cfc:	f240 12c3 	movw	r2, #451	; 0x1c3
  404d00:	4905      	ldr	r1, [pc, #20]	; (404d18 <_usart_sync_is_ready_to_send+0x20>)
  404d02:	3000      	adds	r0, #0
  404d04:	bf18      	it	ne
  404d06:	2001      	movne	r0, #1
  404d08:	4b04      	ldr	r3, [pc, #16]	; (404d1c <_usart_sync_is_ready_to_send+0x24>)
  404d0a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  404d0c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  404d0e:	6958      	ldr	r0, [r3, #20]
}
  404d10:	f3c0 0040 	ubfx	r0, r0, #1, #1
  404d14:	bd10      	pop	{r4, pc}
  404d16:	bf00      	nop
  404d18:	0040c908 	.word	0x0040c908
  404d1c:	00403a95 	.word	0x00403a95

00404d20 <_usart_sync_is_transmit_done>:
{
  404d20:	b510      	push	{r4, lr}
	ASSERT(device);
  404d22:	4604      	mov	r4, r0
  404d24:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  404d28:	4905      	ldr	r1, [pc, #20]	; (404d40 <_usart_sync_is_transmit_done+0x20>)
  404d2a:	3000      	adds	r0, #0
  404d2c:	bf18      	it	ne
  404d2e:	2001      	movne	r0, #1
  404d30:	4b04      	ldr	r3, [pc, #16]	; (404d44 <_usart_sync_is_transmit_done+0x24>)
  404d32:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  404d34:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  404d36:	6958      	ldr	r0, [r3, #20]
}
  404d38:	f3c0 2040 	ubfx	r0, r0, #9, #1
  404d3c:	bd10      	pop	{r4, pc}
  404d3e:	bf00      	nop
  404d40:	0040c908 	.word	0x0040c908
  404d44:	00403a95 	.word	0x00403a95

00404d48 <_usart_sync_is_byte_received>:
{
  404d48:	b510      	push	{r4, lr}
	ASSERT(device);
  404d4a:	4604      	mov	r4, r0
  404d4c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  404d50:	4905      	ldr	r1, [pc, #20]	; (404d68 <_usart_sync_is_byte_received+0x20>)
  404d52:	3000      	adds	r0, #0
  404d54:	bf18      	it	ne
  404d56:	2001      	movne	r0, #1
  404d58:	4b04      	ldr	r3, [pc, #16]	; (404d6c <_usart_sync_is_byte_received+0x24>)
  404d5a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  404d5c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  404d5e:	6958      	ldr	r0, [r3, #20]
}
  404d60:	f000 0001 	and.w	r0, r0, #1
  404d64:	bd10      	pop	{r4, pc}
  404d66:	bf00      	nop
  404d68:	0040c908 	.word	0x0040c908
  404d6c:	00403a95 	.word	0x00403a95

00404d70 <_usart_get_usart_sync>:
}
  404d70:	2000      	movs	r0, #0
  404d72:	4770      	bx	lr

00404d74 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  404d74:	b510      	push	{r4, lr}
  404d76:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  404d78:	4807      	ldr	r0, [pc, #28]	; (404d98 <sd_mmc_configure_slot+0x24>)
  404d7a:	6804      	ldr	r4, [r0, #0]
	driver_select_device(
  404d7c:	7b63      	ldrb	r3, [r4, #13]
  404d7e:	6822      	ldr	r2, [r4, #0]
  404d80:	7901      	ldrb	r1, [r0, #4]
  404d82:	6880      	ldr	r0, [r0, #8]
  404d84:	7fa4      	ldrb	r4, [r4, #30]
  404d86:	3400      	adds	r4, #0
  404d88:	bf18      	it	ne
  404d8a:	2401      	movne	r4, #1
  404d8c:	9400      	str	r4, [sp, #0]
  404d8e:	4c03      	ldr	r4, [pc, #12]	; (404d9c <sd_mmc_configure_slot+0x28>)
  404d90:	47a0      	blx	r4
}
  404d92:	b002      	add	sp, #8
  404d94:	bd10      	pop	{r4, pc}
  404d96:	bf00      	nop
  404d98:	20430724 	.word	0x20430724
  404d9c:	004033f1 	.word	0x004033f1

00404da0 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
  404da0:	b108      	cbz	r0, 404da6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  404da2:	2004      	movs	r0, #4
  404da4:	4770      	bx	lr
	if (_cd && _cd[slot].pin != -1) {
  404da6:	4b34      	ldr	r3, [pc, #208]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404da8:	68da      	ldr	r2, [r3, #12]
  404daa:	2a00      	cmp	r2, #0
  404dac:	d034      	beq.n	404e18 <sd_mmc_select_slot+0x78>
  404dae:	f9b2 3000 	ldrsh.w	r3, [r2]
  404db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  404db6:	d02f      	beq.n	404e18 <sd_mmc_select_slot+0x78>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
  404db8:	b2db      	uxtb	r3, r3
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  404dba:	0958      	lsrs	r0, r3, #5
  404dbc:	492f      	ldr	r1, [pc, #188]	; (404e7c <sd_mmc_select_slot+0xdc>)
  404dbe:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	return ((Pio *)hw)->PIO_PDSR;
  404dc2:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  404dc4:	f003 031f 	and.w	r3, r3, #31
  404dc8:	2101      	movs	r1, #1
  404dca:	fa01 f303 	lsl.w	r3, r1, r3
  404dce:	4203      	tst	r3, r0
  404dd0:	bf08      	it	eq
  404dd2:	2100      	moveq	r1, #0
  404dd4:	8853      	ldrh	r3, [r2, #2]
  404dd6:	4299      	cmp	r1, r3
  404dd8:	d004      	beq.n	404de4 <sd_mmc_select_slot+0x44>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  404dda:	2204      	movs	r2, #4
  404ddc:	4b26      	ldr	r3, [pc, #152]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404dde:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
  404de0:	2002      	movs	r0, #2
  404de2:	4770      	bx	lr
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  404de4:	4b24      	ldr	r3, [pc, #144]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404de6:	7e9b      	ldrb	r3, [r3, #26]
  404de8:	2b04      	cmp	r3, #4
  404dea:	d005      	beq.n	404df8 <sd_mmc_select_slot+0x58>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  404dec:	2b01      	cmp	r3, #1
  404dee:	d008      	beq.n	404e02 <sd_mmc_select_slot+0x62>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  404df0:	2b03      	cmp	r3, #3
  404df2:	d117      	bne.n	404e24 <sd_mmc_select_slot+0x84>
			return SD_MMC_ERR_UNUSABLE;
  404df4:	2003      	movs	r0, #3
  404df6:	4770      	bx	lr
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  404df8:	2201      	movs	r2, #1
  404dfa:	4b1f      	ldr	r3, [pc, #124]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404dfc:	769a      	strb	r2, [r3, #26]
			return SD_MMC_ERR_NO_CARD;
  404dfe:	2002      	movs	r0, #2
  404e00:	4770      	bx	lr
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  404e02:	4b1d      	ldr	r3, [pc, #116]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404e04:	2202      	movs	r2, #2
  404e06:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
  404e08:	4a1d      	ldr	r2, [pc, #116]	; (404e80 <sd_mmc_select_slot+0xe0>)
  404e0a:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
  404e0c:	2201      	movs	r2, #1
  404e0e:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
  404e10:	2200      	movs	r2, #0
  404e12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  404e16:	e005      	b.n	404e24 <sd_mmc_select_slot+0x84>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  404e18:	4b17      	ldr	r3, [pc, #92]	; (404e78 <sd_mmc_select_slot+0xd8>)
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  404e1a:	7e9b      	ldrb	r3, [r3, #26]
  404e1c:	3b03      	subs	r3, #3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  404e1e:	b2db      	uxtb	r3, r3
  404e20:	2b01      	cmp	r3, #1
  404e22:	d91b      	bls.n	404e5c <sd_mmc_select_slot+0xbc>
{
  404e24:	b510      	push	{r4, lr}
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
  404e26:	4b14      	ldr	r3, [pc, #80]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404e28:	791b      	ldrb	r3, [r3, #4]
  404e2a:	b313      	cbz	r3, 404e72 <sd_mmc_select_slot+0xd2>
  404e2c:	4b12      	ldr	r3, [pc, #72]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404e2e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
  404e30:	fab0 f080 	clz	r0, r0
  404e34:	0940      	lsrs	r0, r0, #5
  404e36:	f240 422c 	movw	r2, #1068	; 0x42c
  404e3a:	4912      	ldr	r1, [pc, #72]	; (404e84 <sd_mmc_select_slot+0xe4>)
  404e3c:	4b12      	ldr	r3, [pc, #72]	; (404e88 <sd_mmc_select_slot+0xe8>)
  404e3e:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
  404e40:	4c0d      	ldr	r4, [pc, #52]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404e42:	2300      	movs	r3, #0
  404e44:	7123      	strb	r3, [r4, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
  404e46:	f104 0310 	add.w	r3, r4, #16
  404e4a:	6023      	str	r3, [r4, #0]
	sd_mmc_configure_slot();
  404e4c:	4b0f      	ldr	r3, [pc, #60]	; (404e8c <sd_mmc_select_slot+0xec>)
  404e4e:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
  404e50:	7ea0      	ldrb	r0, [r4, #26]
  404e52:	2802      	cmp	r0, #2
  404e54:	bf14      	ite	ne
  404e56:	2000      	movne	r0, #0
  404e58:	2001      	moveq	r0, #1
  404e5a:	bd10      	pop	{r4, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  404e5c:	4b06      	ldr	r3, [pc, #24]	; (404e78 <sd_mmc_select_slot+0xd8>)
  404e5e:	2202      	movs	r2, #2
  404e60:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
  404e62:	4a07      	ldr	r2, [pc, #28]	; (404e80 <sd_mmc_select_slot+0xe0>)
  404e64:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
  404e66:	2201      	movs	r2, #1
  404e68:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
  404e6a:	2200      	movs	r2, #0
  404e6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  404e70:	e7d8      	b.n	404e24 <sd_mmc_select_slot+0x84>
  404e72:	2001      	movs	r0, #1
  404e74:	e7df      	b.n	404e36 <sd_mmc_select_slot+0x96>
  404e76:	bf00      	nop
  404e78:	20430724 	.word	0x20430724
  404e7c:	400e0e00 	.word	0x400e0e00
  404e80:	00061a80 	.word	0x00061a80
  404e84:	0040c9c0 	.word	0x0040c9c0
  404e88:	00403a95 	.word	0x00403a95
  404e8c:	00404d75 	.word	0x00404d75

00404e90 <sdio_cmd52>:
{
  404e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e94:	4606      	mov	r6, r0
  404e96:	460f      	mov	r7, r1
  404e98:	4614      	mov	r4, r2
  404e9a:	4698      	mov	r8, r3
  404e9c:	9d06      	ldr	r5, [sp, #24]
	ASSERT(io_data != NULL);
  404e9e:	f240 3276 	movw	r2, #886	; 0x376
  404ea2:	4910      	ldr	r1, [pc, #64]	; (404ee4 <sdio_cmd52+0x54>)
  404ea4:	1c28      	adds	r0, r5, #0
  404ea6:	bf18      	it	ne
  404ea8:	2001      	movne	r0, #1
  404eaa:	4b0f      	ldr	r3, [pc, #60]	; (404ee8 <sdio_cmd52+0x58>)
  404eac:	4798      	blx	r3
	                         | ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  404eae:	0260      	lsls	r0, r4, #9
	if (!driver_send_cmd(sd_mmc_hal,
  404eb0:	ea40 60c8 	orr.w	r0, r0, r8, lsl #27
  404eb4:	ea40 7007 	orr.w	r0, r0, r7, lsl #28
  404eb8:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
  404ebc:	782a      	ldrb	r2, [r5, #0]
	if (!driver_send_cmd(sd_mmc_hal,
  404ebe:	4302      	orrs	r2, r0
  404ec0:	f241 3134 	movw	r1, #4916	; 0x1334
  404ec4:	4b09      	ldr	r3, [pc, #36]	; (404eec <sdio_cmd52+0x5c>)
  404ec6:	6898      	ldr	r0, [r3, #8]
  404ec8:	4b09      	ldr	r3, [pc, #36]	; (404ef0 <sdio_cmd52+0x60>)
  404eca:	4798      	blx	r3
  404ecc:	4604      	mov	r4, r0
  404ece:	b910      	cbnz	r0, 404ed6 <sdio_cmd52+0x46>
}
  404ed0:	4620      	mov	r0, r4
  404ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
  404ed6:	4b05      	ldr	r3, [pc, #20]	; (404eec <sdio_cmd52+0x5c>)
  404ed8:	6898      	ldr	r0, [r3, #8]
  404eda:	4b06      	ldr	r3, [pc, #24]	; (404ef4 <sdio_cmd52+0x64>)
  404edc:	4798      	blx	r3
  404ede:	7028      	strb	r0, [r5, #0]
	return true;
  404ee0:	e7f6      	b.n	404ed0 <sdio_cmd52+0x40>
  404ee2:	bf00      	nop
  404ee4:	0040c9c0 	.word	0x0040c9c0
  404ee8:	00403a95 	.word	0x00403a95
  404eec:	20430724 	.word	0x20430724
  404ef0:	004034d5 	.word	0x004034d5
  404ef4:	00403505 	.word	0x00403505

00404ef8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  404ef8:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
  404efa:	4b05      	ldr	r3, [pc, #20]	; (404f10 <sd_mmc_deselect_slot+0x18>)
  404efc:	791b      	ldrb	r3, [r3, #4]
  404efe:	b103      	cbz	r3, 404f02 <sd_mmc_deselect_slot+0xa>
  404f00:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
  404f02:	2100      	movs	r1, #0
  404f04:	4b02      	ldr	r3, [pc, #8]	; (404f10 <sd_mmc_deselect_slot+0x18>)
  404f06:	6898      	ldr	r0, [r3, #8]
  404f08:	4b02      	ldr	r3, [pc, #8]	; (404f14 <sd_mmc_deselect_slot+0x1c>)
  404f0a:	4798      	blx	r3
	}
}
  404f0c:	e7f8      	b.n	404f00 <sd_mmc_deselect_slot+0x8>
  404f0e:	bf00      	nop
  404f10:	20430724 	.word	0x20430724
  404f14:	0040342d 	.word	0x0040342d

00404f18 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
  404f18:	b410      	push	{r4}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  404f1a:	4b05      	ldr	r3, [pc, #20]	; (404f30 <sd_mmc_init+0x18>)
  404f1c:	2404      	movs	r4, #4
  404f1e:	769c      	strb	r4, [r3, #26]
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
  404f20:	24ff      	movs	r4, #255	; 0xff
  404f22:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
  404f24:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
  404f26:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
  404f28:	635a      	str	r2, [r3, #52]	; 0x34
}
  404f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  404f2e:	4770      	bx	lr
  404f30:	20430724 	.word	0x20430724

00404f34 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  404f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404f38:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404f3a:	4baa      	ldr	r3, [pc, #680]	; (4051e4 <sd_mmc_check+0x2b0>)
  404f3c:	4798      	blx	r3
  404f3e:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  404f40:	2801      	cmp	r0, #1
  404f42:	d005      	beq.n	404f50 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  404f44:	4ba8      	ldr	r3, [pc, #672]	; (4051e8 <sd_mmc_check+0x2b4>)
  404f46:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  404f48:	4620      	mov	r0, r4
  404f4a:	b015      	add	sp, #84	; 0x54
  404f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  404f50:	af14      	add	r7, sp, #80	; 0x50
  404f52:	2308      	movs	r3, #8
  404f54:	f807 3d45 	strb.w	r3, [r7, #-69]!
	sd_mmc_card->type    = CARD_TYPE_SD;
  404f58:	4ea4      	ldr	r6, [pc, #656]	; (4051ec <sd_mmc_check+0x2b8>)
  404f5a:	6833      	ldr	r3, [r6, #0]
  404f5c:	f04f 0801 	mov.w	r8, #1
  404f60:	f883 800b 	strb.w	r8, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  404f64:	2500      	movs	r5, #0
  404f66:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca     = 0;
  404f68:	811d      	strh	r5, [r3, #8]
	driver_send_clock(sd_mmc_hal);
  404f6a:	68b0      	ldr	r0, [r6, #8]
  404f6c:	4ba0      	ldr	r3, [pc, #640]	; (4051f0 <sd_mmc_check+0x2bc>)
  404f6e:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
  404f70:	9700      	str	r7, [sp, #0]
  404f72:	462b      	mov	r3, r5
  404f74:	2206      	movs	r2, #6
  404f76:	4629      	mov	r1, r5
  404f78:	4640      	mov	r0, r8
  404f7a:	4f9e      	ldr	r7, [pc, #632]	; (4051f4 <sd_mmc_check+0x2c0>)
  404f7c:	47b8      	blx	r7
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  404f7e:	462a      	mov	r2, r5
  404f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  404f84:	68b0      	ldr	r0, [r6, #8]
  404f86:	4b9c      	ldr	r3, [pc, #624]	; (4051f8 <sd_mmc_check+0x2c4>)
  404f88:	4798      	blx	r3
  404f8a:	b930      	cbnz	r0, 404f9a <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  404f8c:	4b97      	ldr	r3, [pc, #604]	; (4051ec <sd_mmc_check+0x2b8>)
  404f8e:	681b      	ldr	r3, [r3, #0]
  404f90:	2403      	movs	r4, #3
  404f92:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  404f94:	4b94      	ldr	r3, [pc, #592]	; (4051e8 <sd_mmc_check+0x2b4>)
  404f96:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  404f98:	e7d6      	b.n	404f48 <sd_mmc_check+0x14>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
  404f9a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  404f9e:	f245 5108 	movw	r1, #21768	; 0x5508
  404fa2:	68b0      	ldr	r0, [r6, #8]
  404fa4:	4b94      	ldr	r3, [pc, #592]	; (4051f8 <sd_mmc_check+0x2c4>)
  404fa6:	4798      	blx	r3
  404fa8:	2800      	cmp	r0, #0
  404faa:	f040 80a4 	bne.w	4050f6 <sd_mmc_check+0x1c2>
	*v2 = 0;
  404fae:	f04f 0800 	mov.w	r8, #0
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
  404fb2:	2200      	movs	r2, #0
  404fb4:	f244 5105 	movw	r1, #17669	; 0x4505
  404fb8:	4b8c      	ldr	r3, [pc, #560]	; (4051ec <sd_mmc_check+0x2b8>)
  404fba:	6898      	ldr	r0, [r3, #8]
  404fbc:	4b8e      	ldr	r3, [pc, #568]	; (4051f8 <sd_mmc_check+0x2c4>)
  404fbe:	4798      	blx	r3
  404fc0:	2800      	cmp	r0, #0
  404fc2:	f040 80a6 	bne.w	405112 <sd_mmc_check+0x1de>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404fc6:	4b89      	ldr	r3, [pc, #548]	; (4051ec <sd_mmc_check+0x2b8>)
  404fc8:	681b      	ldr	r3, [r3, #0]
  404fca:	7adb      	ldrb	r3, [r3, #11]
  404fcc:	f013 0f01 	tst.w	r3, #1
  404fd0:	f040 80c9 	bne.w	405166 <sd_mmc_check+0x232>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  404fd4:	2200      	movs	r2, #0
  404fd6:	f245 1103 	movw	r1, #20739	; 0x5103
  404fda:	4b84      	ldr	r3, [pc, #528]	; (4051ec <sd_mmc_check+0x2b8>)
  404fdc:	6898      	ldr	r0, [r3, #8]
  404fde:	4b86      	ldr	r3, [pc, #536]	; (4051f8 <sd_mmc_check+0x2c4>)
  404fe0:	4798      	blx	r3
  404fe2:	2800      	cmp	r0, #0
  404fe4:	d0d2      	beq.n	404f8c <sd_mmc_check+0x58>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
  404fe6:	4d81      	ldr	r5, [pc, #516]	; (4051ec <sd_mmc_check+0x2b8>)
  404fe8:	682e      	ldr	r6, [r5, #0]
  404fea:	68a8      	ldr	r0, [r5, #8]
  404fec:	4b83      	ldr	r3, [pc, #524]	; (4051fc <sd_mmc_check+0x2c8>)
  404fee:	4798      	blx	r3
  404ff0:	0c00      	lsrs	r0, r0, #16
  404ff2:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404ff4:	682b      	ldr	r3, [r5, #0]
  404ff6:	7ada      	ldrb	r2, [r3, #11]
  404ff8:	f012 0f01 	tst.w	r2, #1
  404ffc:	d03e      	beq.n	40507c <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  404ffe:	891a      	ldrh	r2, [r3, #8]
  405000:	0412      	lsls	r2, r2, #16
  405002:	f641 3109 	movw	r1, #6921	; 0x1b09
  405006:	68a8      	ldr	r0, [r5, #8]
  405008:	4b7b      	ldr	r3, [pc, #492]	; (4051f8 <sd_mmc_check+0x2c4>)
  40500a:	4798      	blx	r3
  40500c:	2800      	cmp	r0, #0
  40500e:	d0bd      	beq.n	404f8c <sd_mmc_check+0x58>
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
  405010:	6829      	ldr	r1, [r5, #0]
  405012:	310e      	adds	r1, #14
  405014:	68a8      	ldr	r0, [r5, #8]
  405016:	4b7a      	ldr	r3, [pc, #488]	; (405200 <sd_mmc_check+0x2cc>)
  405018:	4798      	blx	r3
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40501a:	682a      	ldr	r2, [r5, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40501c:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
  40501e:	4b79      	ldr	r3, [pc, #484]	; (405204 <sd_mmc_check+0x2d0>)
  405020:	f001 0007 	and.w	r0, r1, #7
	sd_mmc_card->clock = unit * mul * 1000;
  405024:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  405028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40502c:	fb00 f005 	mul.w	r0, r0, r5
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  405030:	f3c1 01c3 	ubfx	r1, r1, #3, #4
  405034:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
  405038:	69db      	ldr	r3, [r3, #28]
  40503a:	fb03 f300 	mul.w	r3, r3, r0
  40503e:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  405040:	7b93      	ldrb	r3, [r2, #14]
  405042:	099b      	lsrs	r3, r3, #6
  405044:	f040 80e2 	bne.w	40520c <sd_mmc_check+0x2d8>
  405048:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40504a:	7d50      	ldrb	r0, [r2, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40504c:	7d13      	ldrb	r3, [r2, #20]
  40504e:	029b      	lsls	r3, r3, #10
  405050:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  405054:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405058:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40505a:	7dd1      	ldrb	r1, [r2, #23]
  40505c:	0049      	lsls	r1, r1, #1
  40505e:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
  405062:	f3c3 030b 	ubfx	r3, r3, #0, #12
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  405066:	3301      	adds	r3, #1
  405068:	f001 0107 	and.w	r1, r1, #7
  40506c:	3102      	adds	r1, #2
		uint32_t blocknr
  40506e:	408b      	lsls	r3, r1
  405070:	7cd1      	ldrb	r1, [r2, #19]
  405072:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  405076:	408b      	lsls	r3, r1
  405078:	0a9b      	lsrs	r3, r3, #10
  40507a:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40507c:	4b5b      	ldr	r3, [pc, #364]	; (4051ec <sd_mmc_check+0x2b8>)
  40507e:	681a      	ldr	r2, [r3, #0]
  405080:	8912      	ldrh	r2, [r2, #8]
  405082:	0412      	lsls	r2, r2, #16
  405084:	f243 1107 	movw	r1, #12551	; 0x3107
  405088:	6898      	ldr	r0, [r3, #8]
  40508a:	4b5b      	ldr	r3, [pc, #364]	; (4051f8 <sd_mmc_check+0x2c4>)
  40508c:	4798      	blx	r3
  40508e:	2800      	cmp	r0, #0
  405090:	f43f af7c 	beq.w	404f8c <sd_mmc_check+0x58>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  405094:	4b55      	ldr	r3, [pc, #340]	; (4051ec <sd_mmc_check+0x2b8>)
  405096:	681b      	ldr	r3, [r3, #0]
  405098:	7ada      	ldrb	r2, [r3, #11]
  40509a:	f012 0f01 	tst.w	r2, #1
  40509e:	f040 80c2 	bne.w	405226 <sd_mmc_check+0x2f2>
	if (IS_SDIO()) {
  4050a2:	4b52      	ldr	r3, [pc, #328]	; (4051ec <sd_mmc_check+0x2b8>)
  4050a4:	681b      	ldr	r3, [r3, #0]
  4050a6:	7adb      	ldrb	r3, [r3, #11]
  4050a8:	f013 0f04 	tst.w	r3, #4
  4050ac:	f000 8152 	beq.w	405354 <sd_mmc_check+0x420>
  4050b0:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4050b2:	2700      	movs	r7, #0
  4050b4:	4e4f      	ldr	r6, [pc, #316]	; (4051f4 <sd_mmc_check+0x2c0>)
  4050b6:	f1a5 0309 	sub.w	r3, r5, #9
  4050ba:	aa03      	add	r2, sp, #12
  4050bc:	4413      	add	r3, r2
  4050be:	9300      	str	r3, [sp, #0]
  4050c0:	463b      	mov	r3, r7
  4050c2:	462a      	mov	r2, r5
  4050c4:	4639      	mov	r1, r7
  4050c6:	4638      	mov	r0, r7
  4050c8:	47b0      	blx	r6
		addr_old++;
  4050ca:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
  4050cc:	2d0d      	cmp	r5, #13
  4050ce:	d1f2      	bne.n	4050b6 <sd_mmc_check+0x182>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
  4050d0:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4050d4:	f89d 900c 	ldrb.w	r9, [sp, #12]
  4050d8:	eb09 2903 	add.w	r9, r9, r3, lsl #8
  4050dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4050e0:	eb09 4903 	add.w	r9, r9, r3, lsl #16
  4050e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
  4050e8:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  4050ec:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4050ee:	f04f 0800 	mov.w	r8, #0
  4050f2:	4f40      	ldr	r7, [pc, #256]	; (4051f4 <sd_mmc_check+0x2c0>)
  4050f4:	e0ed      	b.n	4052d2 <sd_mmc_check+0x39e>
	resp = driver_get_response(sd_mmc_hal);
  4050f6:	68b0      	ldr	r0, [r6, #8]
  4050f8:	4b40      	ldr	r3, [pc, #256]	; (4051fc <sd_mmc_check+0x2c8>)
  4050fa:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4050fc:	f1b0 3fff 	cmp.w	r0, #4294967295
  405100:	f000 8227 	beq.w	405552 <sd_mmc_check+0x61e>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
  405104:	f3c0 000b 	ubfx	r0, r0, #0, #12
  405108:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40510c:	f47f af3e 	bne.w	404f8c <sd_mmc_check+0x58>
  405110:	e74f      	b.n	404fb2 <sd_mmc_check+0x7e>
	resp = driver_get_response(sd_mmc_hal);
  405112:	4b36      	ldr	r3, [pc, #216]	; (4051ec <sd_mmc_check+0x2b8>)
  405114:	6898      	ldr	r0, [r3, #8]
  405116:	4b39      	ldr	r3, [pc, #228]	; (4051fc <sd_mmc_check+0x2c8>)
  405118:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40511a:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  40511e:	f43f af52 	beq.w	404fc6 <sd_mmc_check+0x92>
  405122:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
  405126:	4e31      	ldr	r6, [pc, #196]	; (4051ec <sd_mmc_check+0x2b8>)
  405128:	4f33      	ldr	r7, [pc, #204]	; (4051f8 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
  40512a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4051fc <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
  40512e:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
  405132:	f244 5105 	movw	r1, #17669	; 0x4505
  405136:	68b0      	ldr	r0, [r6, #8]
  405138:	47b8      	blx	r7
  40513a:	2800      	cmp	r0, #0
  40513c:	f43f af26 	beq.w	404f8c <sd_mmc_check+0x58>
		resp = driver_get_response(sd_mmc_hal);
  405140:	68b0      	ldr	r0, [r6, #8]
  405142:	47c8      	blx	r9
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  405144:	2800      	cmp	r0, #0
  405146:	db02      	blt.n	40514e <sd_mmc_check+0x21a>
		if (cmd5_retry-- == 0) {
  405148:	3d01      	subs	r5, #1
  40514a:	d1f0      	bne.n	40512e <sd_mmc_check+0x1fa>
  40514c:	e71e      	b.n	404f8c <sd_mmc_check+0x58>
	if ((resp & OCR_SDIO_MP) > 0) {
  40514e:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  405152:	d104      	bne.n	40515e <sd_mmc_check+0x22a>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  405154:	4b25      	ldr	r3, [pc, #148]	; (4051ec <sd_mmc_check+0x2b8>)
  405156:	681b      	ldr	r3, [r3, #0]
  405158:	2204      	movs	r2, #4
  40515a:	72da      	strb	r2, [r3, #11]
  40515c:	e73a      	b.n	404fd4 <sd_mmc_check+0xa0>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40515e:	4b23      	ldr	r3, [pc, #140]	; (4051ec <sd_mmc_check+0x2b8>)
  405160:	681b      	ldr	r3, [r3, #0]
  405162:	2205      	movs	r2, #5
  405164:	72da      	strb	r2, [r3, #11]
  405166:	f1b8 0f00 	cmp.w	r8, #0
  40516a:	4b27      	ldr	r3, [pc, #156]	; (405208 <sd_mmc_check+0x2d4>)
  40516c:	bf14      	ite	ne
  40516e:	4698      	movne	r8, r3
  405170:	f44f 18fc 	moveq.w	r8, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  405174:	f640 0635 	movw	r6, #2101	; 0x835
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
  405178:	4d1c      	ldr	r5, [pc, #112]	; (4051ec <sd_mmc_check+0x2b8>)
  40517a:	4f1f      	ldr	r7, [pc, #124]	; (4051f8 <sd_mmc_check+0x2c4>)
		resp = driver_get_response(sd_mmc_hal);
  40517c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4051fc <sd_mmc_check+0x2c8>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
  405180:	2200      	movs	r2, #0
  405182:	f241 1137 	movw	r1, #4407	; 0x1137
  405186:	68a8      	ldr	r0, [r5, #8]
  405188:	47b8      	blx	r7
  40518a:	b158      	cbz	r0, 4051a4 <sd_mmc_check+0x270>
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40518c:	4642      	mov	r2, r8
  40518e:	f244 5129 	movw	r1, #17705	; 0x4529
  405192:	68a8      	ldr	r0, [r5, #8]
  405194:	47b8      	blx	r7
  405196:	b128      	cbz	r0, 4051a4 <sd_mmc_check+0x270>
		resp = driver_get_response(sd_mmc_hal);
  405198:	68a8      	ldr	r0, [r5, #8]
  40519a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  40519c:	2800      	cmp	r0, #0
  40519e:	db06      	blt.n	4051ae <sd_mmc_check+0x27a>
		if (retry-- == 0) {
  4051a0:	3e01      	subs	r6, #1
  4051a2:	d1ed      	bne.n	405180 <sd_mmc_check+0x24c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
  4051a4:	4b11      	ldr	r3, [pc, #68]	; (4051ec <sd_mmc_check+0x2b8>)
  4051a6:	681b      	ldr	r3, [r3, #0]
  4051a8:	2200      	movs	r2, #0
  4051aa:	72da      	strb	r2, [r3, #11]
  4051ac:	e6ee      	b.n	404f8c <sd_mmc_check+0x58>
			if ((resp & OCR_CCS) != 0) {
  4051ae:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4051b2:	d005      	beq.n	4051c0 <sd_mmc_check+0x28c>
				sd_mmc_card->type |= CARD_TYPE_HC;
  4051b4:	4b0d      	ldr	r3, [pc, #52]	; (4051ec <sd_mmc_check+0x2b8>)
  4051b6:	681a      	ldr	r2, [r3, #0]
  4051b8:	7ad3      	ldrb	r3, [r2, #11]
  4051ba:	f043 0308 	orr.w	r3, r3, #8
  4051be:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4051c0:	4b0a      	ldr	r3, [pc, #40]	; (4051ec <sd_mmc_check+0x2b8>)
  4051c2:	681b      	ldr	r3, [r3, #0]
  4051c4:	7adb      	ldrb	r3, [r3, #11]
  4051c6:	f013 0f01 	tst.w	r3, #1
  4051ca:	f43f af03 	beq.w	404fd4 <sd_mmc_check+0xa0>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4051ce:	2200      	movs	r2, #0
  4051d0:	f645 3102 	movw	r1, #23298	; 0x5b02
  4051d4:	4b05      	ldr	r3, [pc, #20]	; (4051ec <sd_mmc_check+0x2b8>)
  4051d6:	6898      	ldr	r0, [r3, #8]
  4051d8:	4b07      	ldr	r3, [pc, #28]	; (4051f8 <sd_mmc_check+0x2c4>)
  4051da:	4798      	blx	r3
  4051dc:	2800      	cmp	r0, #0
  4051de:	f47f aef9 	bne.w	404fd4 <sd_mmc_check+0xa0>
  4051e2:	e6d3      	b.n	404f8c <sd_mmc_check+0x58>
  4051e4:	00404da1 	.word	0x00404da1
  4051e8:	00404ef9 	.word	0x00404ef9
  4051ec:	20430724 	.word	0x20430724
  4051f0:	004034ad 	.word	0x004034ad
  4051f4:	00404e91 	.word	0x00404e91
  4051f8:	004034d5 	.word	0x004034d5
  4051fc:	00403505 	.word	0x00403505
  405200:	0040352d 	.word	0x0040352d
  405204:	0040c924 	.word	0x0040c924
  405208:	401f8000 	.word	0x401f8000
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40520c:	7dd1      	ldrb	r1, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40520e:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405210:	7d53      	ldrb	r3, [r2, #21]
  405212:	041b      	lsls	r3, r3, #16
  405214:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405218:	430b      	orrs	r3, r1
	value &= ((uint32_t)1 << size) - 1;
  40521a:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
  40521e:	3301      	adds	r3, #1
  405220:	025b      	lsls	r3, r3, #9
  405222:	6053      	str	r3, [r2, #4]
  405224:	e72a      	b.n	40507c <sd_mmc_check+0x148>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  405226:	891a      	ldrh	r2, [r3, #8]
  405228:	0412      	lsls	r2, r2, #16
  40522a:	f241 1137 	movw	r1, #4407	; 0x1137
  40522e:	4b9a      	ldr	r3, [pc, #616]	; (405498 <sd_mmc_check+0x564>)
  405230:	6898      	ldr	r0, [r3, #8]
  405232:	4b9a      	ldr	r3, [pc, #616]	; (40549c <sd_mmc_check+0x568>)
  405234:	4798      	blx	r3
  405236:	2800      	cmp	r0, #0
  405238:	f43f aea8 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
  40523c:	2301      	movs	r3, #1
  40523e:	9301      	str	r3, [sp, #4]
  405240:	9300      	str	r3, [sp, #0]
  405242:	2308      	movs	r3, #8
  405244:	2200      	movs	r2, #0
  405246:	4996      	ldr	r1, [pc, #600]	; (4054a0 <sd_mmc_check+0x56c>)
  405248:	4893      	ldr	r0, [pc, #588]	; (405498 <sd_mmc_check+0x564>)
  40524a:	6880      	ldr	r0, [r0, #8]
  40524c:	4d95      	ldr	r5, [pc, #596]	; (4054a4 <sd_mmc_check+0x570>)
  40524e:	47a8      	blx	r5
  405250:	2800      	cmp	r0, #0
  405252:	f43f ae9b 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
  405256:	2201      	movs	r2, #1
  405258:	a904      	add	r1, sp, #16
  40525a:	4b8f      	ldr	r3, [pc, #572]	; (405498 <sd_mmc_check+0x564>)
  40525c:	6898      	ldr	r0, [r3, #8]
  40525e:	4b92      	ldr	r3, [pc, #584]	; (4054a8 <sd_mmc_check+0x574>)
  405260:	4798      	blx	r3
  405262:	2800      	cmp	r0, #0
  405264:	f43f ae92 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
  405268:	4b8b      	ldr	r3, [pc, #556]	; (405498 <sd_mmc_check+0x564>)
  40526a:	6898      	ldr	r0, [r3, #8]
  40526c:	4b8f      	ldr	r3, [pc, #572]	; (4054ac <sd_mmc_check+0x578>)
  40526e:	4798      	blx	r3
  405270:	2800      	cmp	r0, #0
  405272:	f43f ae8b 	beq.w	404f8c <sd_mmc_check+0x58>
	switch (SD_SCR_SD_SPEC(scr)) {
  405276:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40527a:	f003 030f 	and.w	r3, r3, #15
  40527e:	2b01      	cmp	r3, #1
  405280:	d00c      	beq.n	40529c <sd_mmc_check+0x368>
  405282:	b133      	cbz	r3, 405292 <sd_mmc_check+0x35e>
  405284:	2b02      	cmp	r3, #2
  405286:	d00e      	beq.n	4052a6 <sd_mmc_check+0x372>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  405288:	4b83      	ldr	r3, [pc, #524]	; (405498 <sd_mmc_check+0x564>)
  40528a:	681b      	ldr	r3, [r3, #0]
  40528c:	2210      	movs	r2, #16
  40528e:	731a      	strb	r2, [r3, #12]
  405290:	e707      	b.n	4050a2 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  405292:	4b81      	ldr	r3, [pc, #516]	; (405498 <sd_mmc_check+0x564>)
  405294:	681b      	ldr	r3, [r3, #0]
  405296:	2210      	movs	r2, #16
  405298:	731a      	strb	r2, [r3, #12]
  40529a:	e702      	b.n	4050a2 <sd_mmc_check+0x16e>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40529c:	4b7e      	ldr	r3, [pc, #504]	; (405498 <sd_mmc_check+0x564>)
  40529e:	681b      	ldr	r3, [r3, #0]
  4052a0:	221a      	movs	r2, #26
  4052a2:	731a      	strb	r2, [r3, #12]
  4052a4:	e6fd      	b.n	4050a2 <sd_mmc_check+0x16e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  4052a6:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4052aa:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  4052ac:	4b7a      	ldr	r3, [pc, #488]	; (405498 <sd_mmc_check+0x564>)
  4052ae:	681b      	ldr	r3, [r3, #0]
  4052b0:	bf14      	ite	ne
  4052b2:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  4052b4:	2220      	moveq	r2, #32
  4052b6:	731a      	strb	r2, [r3, #12]
  4052b8:	e6f3      	b.n	4050a2 <sd_mmc_check+0x16e>
		if (buf[1] == 0) {
  4052ba:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4052be:	2b00      	cmp	r3, #0
  4052c0:	f43f ae64 	beq.w	404f8c <sd_mmc_check+0x58>
		addr_new += buf[1] - 1;
  4052c4:	3302      	adds	r3, #2
  4052c6:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  4052c8:	f509 7380 	add.w	r3, r9, #256	; 0x100
  4052cc:	429e      	cmp	r6, r3
  4052ce:	f63f ae5d 	bhi.w	404f8c <sd_mmc_check+0x58>
	addr_new = addr_old;
  4052d2:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4052d4:	ab04      	add	r3, sp, #16
  4052d6:	442b      	add	r3, r5
  4052d8:	9300      	str	r3, [sp, #0]
  4052da:	4643      	mov	r3, r8
  4052dc:	19aa      	adds	r2, r5, r6
  4052de:	4641      	mov	r1, r8
  4052e0:	4640      	mov	r0, r8
  4052e2:	47b8      	blx	r7
  4052e4:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
  4052e6:	2d03      	cmp	r5, #3
  4052e8:	d1f4      	bne.n	4052d4 <sd_mmc_check+0x3a0>
		if (buf[0] == SDIO_CISTPL_END) {
  4052ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4052ee:	2bff      	cmp	r3, #255	; 0xff
  4052f0:	f43f ae4c 	beq.w	404f8c <sd_mmc_check+0x58>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4052f4:	2b22      	cmp	r3, #34	; 0x22
  4052f6:	d1e0      	bne.n	4052ba <sd_mmc_check+0x386>
  4052f8:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4052fc:	2b00      	cmp	r3, #0
  4052fe:	d1dc      	bne.n	4052ba <sd_mmc_check+0x386>
  405300:	f106 0906 	add.w	r9, r6, #6
	addr_new -= 3;
  405304:	4635      	mov	r5, r6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  405306:	f04f 0800 	mov.w	r8, #0
  40530a:	4f69      	ldr	r7, [pc, #420]	; (4054b0 <sd_mmc_check+0x57c>)
  40530c:	1bab      	subs	r3, r5, r6
  40530e:	aa04      	add	r2, sp, #16
  405310:	4413      	add	r3, r2
  405312:	9300      	str	r3, [sp, #0]
  405314:	4643      	mov	r3, r8
  405316:	462a      	mov	r2, r5
  405318:	4641      	mov	r1, r8
  40531a:	4640      	mov	r0, r8
  40531c:	47b8      	blx	r7
		addr_new++;
  40531e:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
  405320:	45a9      	cmp	r9, r5
  405322:	d1f3      	bne.n	40530c <sd_mmc_check+0x3d8>
	tplfe_max_tran_speed = buf[5];
  405324:	f89d 3015 	ldrb.w	r3, [sp, #21]
  405328:	2b32      	cmp	r3, #50	; 0x32
  40532a:	bf28      	it	cs
  40532c:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  40532e:	4a5a      	ldr	r2, [pc, #360]	; (405498 <sd_mmc_check+0x564>)
  405330:	6810      	ldr	r0, [r2, #0]
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  405332:	4a60      	ldr	r2, [pc, #384]	; (4054b4 <sd_mmc_check+0x580>)
  405334:	f003 0107 	and.w	r1, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  405338:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
  40533c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  405340:	fb01 f105 	mul.w	r1, r1, r5
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  405344:	f3c3 03c3 	ubfx	r3, r3, #3, #4
  405348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	sd_mmc_card->clock = unit * mul * 1000;
  40534c:	69db      	ldr	r3, [r3, #28]
  40534e:	fb03 f301 	mul.w	r3, r3, r1
  405352:	6003      	str	r3, [r0, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
  405354:	4b50      	ldr	r3, [pc, #320]	; (405498 <sd_mmc_check+0x564>)
  405356:	7919      	ldrb	r1, [r3, #4]
  405358:	6898      	ldr	r0, [r3, #8]
  40535a:	4b57      	ldr	r3, [pc, #348]	; (4054b8 <sd_mmc_check+0x584>)
  40535c:	4798      	blx	r3
  40535e:	2803      	cmp	r0, #3
  405360:	d926      	bls.n	4053b0 <sd_mmc_check+0x47c>
		if (IS_SDIO()) {
  405362:	4b4d      	ldr	r3, [pc, #308]	; (405498 <sd_mmc_check+0x564>)
  405364:	681b      	ldr	r3, [r3, #0]
  405366:	7adb      	ldrb	r3, [r3, #11]
  405368:	f013 0f04 	tst.w	r3, #4
  40536c:	d14e      	bne.n	40540c <sd_mmc_check+0x4d8>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  40536e:	4b4a      	ldr	r3, [pc, #296]	; (405498 <sd_mmc_check+0x564>)
  405370:	681b      	ldr	r3, [r3, #0]
  405372:	7ada      	ldrb	r2, [r3, #11]
  405374:	f012 0f01 	tst.w	r2, #1
  405378:	d018      	beq.n	4053ac <sd_mmc_check+0x478>
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40537a:	891a      	ldrh	r2, [r3, #8]
  40537c:	0412      	lsls	r2, r2, #16
  40537e:	f241 1137 	movw	r1, #4407	; 0x1137
  405382:	4b45      	ldr	r3, [pc, #276]	; (405498 <sd_mmc_check+0x564>)
  405384:	6898      	ldr	r0, [r3, #8]
  405386:	4b45      	ldr	r3, [pc, #276]	; (40549c <sd_mmc_check+0x568>)
  405388:	4798      	blx	r3
  40538a:	2800      	cmp	r0, #0
  40538c:	f43f adfe 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  405390:	2202      	movs	r2, #2
  405392:	f241 1106 	movw	r1, #4358	; 0x1106
  405396:	4b40      	ldr	r3, [pc, #256]	; (405498 <sd_mmc_check+0x564>)
  405398:	6898      	ldr	r0, [r3, #8]
  40539a:	4b40      	ldr	r3, [pc, #256]	; (40549c <sd_mmc_check+0x568>)
  40539c:	4798      	blx	r3
  40539e:	2800      	cmp	r0, #0
  4053a0:	f43f adf4 	beq.w	404f8c <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
  4053a4:	4b3c      	ldr	r3, [pc, #240]	; (405498 <sd_mmc_check+0x564>)
  4053a6:	681b      	ldr	r3, [r3, #0]
  4053a8:	2204      	movs	r2, #4
  4053aa:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  4053ac:	4b43      	ldr	r3, [pc, #268]	; (4054bc <sd_mmc_check+0x588>)
  4053ae:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
  4053b0:	4b39      	ldr	r3, [pc, #228]	; (405498 <sd_mmc_check+0x564>)
  4053b2:	6898      	ldr	r0, [r3, #8]
  4053b4:	4b42      	ldr	r3, [pc, #264]	; (4054c0 <sd_mmc_check+0x58c>)
  4053b6:	4798      	blx	r3
  4053b8:	b180      	cbz	r0, 4053dc <sd_mmc_check+0x4a8>
		if (IS_SDIO()) {
  4053ba:	4b37      	ldr	r3, [pc, #220]	; (405498 <sd_mmc_check+0x564>)
  4053bc:	681b      	ldr	r3, [r3, #0]
  4053be:	7adb      	ldrb	r3, [r3, #11]
  4053c0:	f013 0f04 	tst.w	r3, #4
  4053c4:	d143      	bne.n	40544e <sd_mmc_check+0x51a>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4053c6:	4b34      	ldr	r3, [pc, #208]	; (405498 <sd_mmc_check+0x564>)
  4053c8:	681b      	ldr	r3, [r3, #0]
  4053ca:	7ada      	ldrb	r2, [r3, #11]
  4053cc:	f012 0f01 	tst.w	r2, #1
  4053d0:	d002      	beq.n	4053d8 <sd_mmc_check+0x4a4>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  4053d2:	7b1b      	ldrb	r3, [r3, #12]
  4053d4:	2b10      	cmp	r3, #16
  4053d6:	d877      	bhi.n	4054c8 <sd_mmc_check+0x594>
		sd_mmc_configure_slot();
  4053d8:	4b38      	ldr	r3, [pc, #224]	; (4054bc <sd_mmc_check+0x588>)
  4053da:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4053dc:	4b2e      	ldr	r3, [pc, #184]	; (405498 <sd_mmc_check+0x564>)
  4053de:	681b      	ldr	r3, [r3, #0]
  4053e0:	7adb      	ldrb	r3, [r3, #11]
  4053e2:	f013 0f01 	tst.w	r3, #1
  4053e6:	d00a      	beq.n	4053fe <sd_mmc_check+0x4ca>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4053e8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4053ec:	f241 1110 	movw	r1, #4368	; 0x1110
  4053f0:	4b29      	ldr	r3, [pc, #164]	; (405498 <sd_mmc_check+0x564>)
  4053f2:	6898      	ldr	r0, [r3, #8]
  4053f4:	4b29      	ldr	r3, [pc, #164]	; (40549c <sd_mmc_check+0x568>)
  4053f6:	4798      	blx	r3
	if (sd_mmc_mci_card_init()) {
  4053f8:	2800      	cmp	r0, #0
  4053fa:	f43f adc7 	beq.w	404f8c <sd_mmc_check+0x58>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  4053fe:	4b26      	ldr	r3, [pc, #152]	; (405498 <sd_mmc_check+0x564>)
  405400:	681b      	ldr	r3, [r3, #0]
  405402:	2200      	movs	r2, #0
  405404:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  405406:	4b2f      	ldr	r3, [pc, #188]	; (4054c4 <sd_mmc_check+0x590>)
  405408:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  40540a:	e59d      	b.n	404f48 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
  40540c:	ab04      	add	r3, sp, #16
  40540e:	9300      	str	r3, [sp, #0]
  405410:	2300      	movs	r3, #0
  405412:	2208      	movs	r2, #8
  405414:	4619      	mov	r1, r3
  405416:	4618      	mov	r0, r3
  405418:	4d25      	ldr	r5, [pc, #148]	; (4054b0 <sd_mmc_check+0x57c>)
  40541a:	47a8      	blx	r5
  40541c:	2800      	cmp	r0, #0
  40541e:	f43f adb5 	beq.w	404f8c <sd_mmc_check+0x58>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  405422:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  405426:	2b00      	cmp	r3, #0
  405428:	daa1      	bge.n	40536e <sd_mmc_check+0x43a>
	u8_value = SDIO_BUSWIDTH_4B;
  40542a:	ab14      	add	r3, sp, #80	; 0x50
  40542c:	2202      	movs	r2, #2
  40542e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
  405432:	9300      	str	r3, [sp, #0]
  405434:	2301      	movs	r3, #1
  405436:	2207      	movs	r2, #7
  405438:	2100      	movs	r1, #0
  40543a:	4618      	mov	r0, r3
  40543c:	47a8      	blx	r5
  40543e:	2800      	cmp	r0, #0
  405440:	f43f ada4 	beq.w	404f8c <sd_mmc_check+0x58>
	sd_mmc_card->bus_width = 4;
  405444:	4b14      	ldr	r3, [pc, #80]	; (405498 <sd_mmc_check+0x564>)
  405446:	681b      	ldr	r3, [r3, #0]
  405448:	2204      	movs	r2, #4
  40544a:	735a      	strb	r2, [r3, #13]
  40544c:	e78f      	b.n	40536e <sd_mmc_check+0x43a>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  40544e:	ab04      	add	r3, sp, #16
  405450:	9300      	str	r3, [sp, #0]
  405452:	2300      	movs	r3, #0
  405454:	2213      	movs	r2, #19
  405456:	4619      	mov	r1, r3
  405458:	4618      	mov	r0, r3
  40545a:	4d15      	ldr	r5, [pc, #84]	; (4054b0 <sd_mmc_check+0x57c>)
  40545c:	47a8      	blx	r5
  40545e:	2800      	cmp	r0, #0
  405460:	f43f ad94 	beq.w	404f8c <sd_mmc_check+0x58>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  405464:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405468:	f013 0f01 	tst.w	r3, #1
  40546c:	d0ab      	beq.n	4053c6 <sd_mmc_check+0x492>
	u8_value = SDIO_EHS;
  40546e:	ab14      	add	r3, sp, #80	; 0x50
  405470:	2202      	movs	r2, #2
  405472:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
  405476:	9300      	str	r3, [sp, #0]
  405478:	2301      	movs	r3, #1
  40547a:	2213      	movs	r2, #19
  40547c:	2100      	movs	r1, #0
  40547e:	4618      	mov	r0, r3
  405480:	47a8      	blx	r5
  405482:	2800      	cmp	r0, #0
  405484:	f43f ad82 	beq.w	404f8c <sd_mmc_check+0x58>
	sd_mmc_card->high_speed = 1;
  405488:	4b03      	ldr	r3, [pc, #12]	; (405498 <sd_mmc_check+0x564>)
  40548a:	681b      	ldr	r3, [r3, #0]
  40548c:	2201      	movs	r2, #1
  40548e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  405490:	681a      	ldr	r2, [r3, #0]
  405492:	0052      	lsls	r2, r2, #1
  405494:	601a      	str	r2, [r3, #0]
  405496:	e796      	b.n	4053c6 <sd_mmc_check+0x492>
  405498:	20430724 	.word	0x20430724
  40549c:	004034d5 	.word	0x004034d5
  4054a0:	00081133 	.word	0x00081133
  4054a4:	0040355d 	.word	0x0040355d
  4054a8:	004035a1 	.word	0x004035a1
  4054ac:	00403609 	.word	0x00403609
  4054b0:	00404e91 	.word	0x00404e91
  4054b4:	0040c924 	.word	0x0040c924
  4054b8:	00403459 	.word	0x00403459
  4054bc:	00404d75 	.word	0x00404d75
  4054c0:	00403485 	.word	0x00403485
  4054c4:	00404ef9 	.word	0x00404ef9
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4054c8:	2540      	movs	r5, #64	; 0x40
  4054ca:	462a      	mov	r2, r5
  4054cc:	2100      	movs	r1, #0
  4054ce:	a804      	add	r0, sp, #16
  4054d0:	4b21      	ldr	r3, [pc, #132]	; (405558 <sd_mmc_check+0x624>)
  4054d2:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
  4054d4:	2301      	movs	r3, #1
  4054d6:	9301      	str	r3, [sp, #4]
  4054d8:	9300      	str	r3, [sp, #0]
  4054da:	462b      	mov	r3, r5
  4054dc:	4a1f      	ldr	r2, [pc, #124]	; (40555c <sd_mmc_check+0x628>)
  4054de:	4920      	ldr	r1, [pc, #128]	; (405560 <sd_mmc_check+0x62c>)
  4054e0:	4820      	ldr	r0, [pc, #128]	; (405564 <sd_mmc_check+0x630>)
  4054e2:	6880      	ldr	r0, [r0, #8]
  4054e4:	4d20      	ldr	r5, [pc, #128]	; (405568 <sd_mmc_check+0x634>)
  4054e6:	47a8      	blx	r5
  4054e8:	2800      	cmp	r0, #0
  4054ea:	f43f ad4f 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
  4054ee:	2201      	movs	r2, #1
  4054f0:	a904      	add	r1, sp, #16
  4054f2:	4b1c      	ldr	r3, [pc, #112]	; (405564 <sd_mmc_check+0x630>)
  4054f4:	6898      	ldr	r0, [r3, #8]
  4054f6:	4b1d      	ldr	r3, [pc, #116]	; (40556c <sd_mmc_check+0x638>)
  4054f8:	4798      	blx	r3
  4054fa:	2800      	cmp	r0, #0
  4054fc:	f43f ad46 	beq.w	404f8c <sd_mmc_check+0x58>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
  405500:	4b18      	ldr	r3, [pc, #96]	; (405564 <sd_mmc_check+0x630>)
  405502:	6898      	ldr	r0, [r3, #8]
  405504:	4b1a      	ldr	r3, [pc, #104]	; (405570 <sd_mmc_check+0x63c>)
  405506:	4798      	blx	r3
  405508:	2800      	cmp	r0, #0
  40550a:	f43f ad3f 	beq.w	404f8c <sd_mmc_check+0x58>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
  40550e:	4b15      	ldr	r3, [pc, #84]	; (405564 <sd_mmc_check+0x630>)
  405510:	6898      	ldr	r0, [r3, #8]
  405512:	4b18      	ldr	r3, [pc, #96]	; (405574 <sd_mmc_check+0x640>)
  405514:	4798      	blx	r3
  405516:	f010 0f80 	tst.w	r0, #128	; 0x80
  40551a:	f47f ad37 	bne.w	404f8c <sd_mmc_check+0x58>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
  40551e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  405522:	f003 030f 	and.w	r3, r3, #15
  405526:	2b0f      	cmp	r3, #15
  405528:	f43f af56 	beq.w	4053d8 <sd_mmc_check+0x4a4>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40552c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405530:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  405534:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  405538:	f47f ad28 	bne.w	404f8c <sd_mmc_check+0x58>
	driver_send_clock(sd_mmc_hal);
  40553c:	4d09      	ldr	r5, [pc, #36]	; (405564 <sd_mmc_check+0x630>)
  40553e:	68a8      	ldr	r0, [r5, #8]
  405540:	4b0d      	ldr	r3, [pc, #52]	; (405578 <sd_mmc_check+0x644>)
  405542:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  405544:	682b      	ldr	r3, [r5, #0]
  405546:	2201      	movs	r2, #1
  405548:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  40554a:	681a      	ldr	r2, [r3, #0]
  40554c:	0052      	lsls	r2, r2, #1
  40554e:	601a      	str	r2, [r3, #0]
  405550:	e742      	b.n	4053d8 <sd_mmc_check+0x4a4>
	*v2 = 0;
  405552:	f04f 0800 	mov.w	r8, #0
  405556:	e52c      	b.n	404fb2 <sd_mmc_check+0x7e>
  405558:	00407847 	.word	0x00407847
  40555c:	80ffff01 	.word	0x80ffff01
  405560:	00081106 	.word	0x00081106
  405564:	20430724 	.word	0x20430724
  405568:	0040355d 	.word	0x0040355d
  40556c:	004035a1 	.word	0x004035a1
  405570:	00403609 	.word	0x00403609
  405574:	00403505 	.word	0x00403505
  405578:	004034ad 	.word	0x004034ad

0040557c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  40557c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40557e:	4b05      	ldr	r3, [pc, #20]	; (405594 <sd_mmc_get_type+0x18>)
  405580:	4798      	blx	r3
  405582:	b108      	cbz	r0, 405588 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  405584:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  405586:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  405588:	4b03      	ldr	r3, [pc, #12]	; (405598 <sd_mmc_get_type+0x1c>)
  40558a:	4798      	blx	r3
	return sd_mmc_card->type;
  40558c:	4b03      	ldr	r3, [pc, #12]	; (40559c <sd_mmc_get_type+0x20>)
  40558e:	681b      	ldr	r3, [r3, #0]
  405590:	7ad8      	ldrb	r0, [r3, #11]
  405592:	bd08      	pop	{r3, pc}
  405594:	00404da1 	.word	0x00404da1
  405598:	00404ef9 	.word	0x00404ef9
  40559c:	20430724 	.word	0x20430724

004055a0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  4055a0:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4055a2:	4b05      	ldr	r3, [pc, #20]	; (4055b8 <sd_mmc_get_capacity+0x18>)
  4055a4:	4798      	blx	r3
  4055a6:	b108      	cbz	r0, 4055ac <sd_mmc_get_capacity+0xc>
		return 0;
  4055a8:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  4055aa:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  4055ac:	4b03      	ldr	r3, [pc, #12]	; (4055bc <sd_mmc_get_capacity+0x1c>)
  4055ae:	4798      	blx	r3
	return sd_mmc_card->capacity;
  4055b0:	4b03      	ldr	r3, [pc, #12]	; (4055c0 <sd_mmc_get_capacity+0x20>)
  4055b2:	681b      	ldr	r3, [r3, #0]
  4055b4:	6858      	ldr	r0, [r3, #4]
  4055b6:	bd08      	pop	{r3, pc}
  4055b8:	00404da1 	.word	0x00404da1
  4055bc:	00404ef9 	.word	0x00404ef9
  4055c0:	20430724 	.word	0x20430724

004055c4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
  4055c4:	4b11      	ldr	r3, [pc, #68]	; (40560c <sd_mmc_is_write_protected+0x48>)
  4055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4055c8:	b1db      	cbz	r3, 405602 <sd_mmc_is_write_protected+0x3e>
  4055ca:	eb03 0180 	add.w	r1, r3, r0, lsl #2
  4055ce:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
  4055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4055d6:	d016      	beq.n	405606 <sd_mmc_is_write_protected+0x42>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
  4055d8:	b2db      	uxtb	r3, r3
  4055da:	0958      	lsrs	r0, r3, #5
  4055dc:	4a0c      	ldr	r2, [pc, #48]	; (405610 <sd_mmc_is_write_protected+0x4c>)
  4055de:	eb02 2240 	add.w	r2, r2, r0, lsl #9
  4055e2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  4055e4:	f003 031f 	and.w	r3, r3, #31
  4055e8:	2201      	movs	r2, #1
  4055ea:	fa02 f303 	lsl.w	r3, r2, r3
  4055ee:	4203      	tst	r3, r0
  4055f0:	bf14      	ite	ne
  4055f2:	4610      	movne	r0, r2
  4055f4:	2000      	moveq	r0, #0
  4055f6:	884b      	ldrh	r3, [r1, #2]
  4055f8:	4298      	cmp	r0, r3
  4055fa:	bf14      	ite	ne
  4055fc:	2000      	movne	r0, #0
  4055fe:	2001      	moveq	r0, #1
  405600:	4770      	bx	lr
		return false;
  405602:	2000      	movs	r0, #0
  405604:	4770      	bx	lr
  405606:	2000      	movs	r0, #0
		return true;
	}
	return false;
}
  405608:	4770      	bx	lr
  40560a:	bf00      	nop
  40560c:	20430724 	.word	0x20430724
  405610:	400e0e00 	.word	0x400e0e00

00405614 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
  405614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405618:	b082      	sub	sp, #8
  40561a:	468a      	mov	sl, r1
  40561c:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40561e:	4b29      	ldr	r3, [pc, #164]	; (4056c4 <sd_mmc_init_read_blocks+0xb0>)
  405620:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  405622:	4680      	mov	r8, r0
  405624:	b118      	cbz	r0, 40562e <sd_mmc_init_read_blocks+0x1a>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  405626:	4640      	mov	r0, r8
  405628:	b002      	add	sp, #8
  40562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40562e:	4d26      	ldr	r5, [pc, #152]	; (4056c8 <sd_mmc_init_read_blocks+0xb4>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
  405630:	4c26      	ldr	r4, [pc, #152]	; (4056cc <sd_mmc_init_read_blocks+0xb8>)
  405632:	4e27      	ldr	r6, [pc, #156]	; (4056d0 <sd_mmc_init_read_blocks+0xbc>)
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
  405634:	4f27      	ldr	r7, [pc, #156]	; (4056d4 <sd_mmc_init_read_blocks+0xc0>)
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
  405636:	6823      	ldr	r3, [r4, #0]
  405638:	891a      	ldrh	r2, [r3, #8]
  40563a:	0412      	lsls	r2, r2, #16
  40563c:	f241 110d 	movw	r1, #4365	; 0x110d
  405640:	68a0      	ldr	r0, [r4, #8]
  405642:	47b0      	blx	r6
  405644:	b130      	cbz	r0, 405654 <sd_mmc_init_read_blocks+0x40>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
  405646:	68a0      	ldr	r0, [r4, #8]
  405648:	47b8      	blx	r7
  40564a:	f410 7f80 	tst.w	r0, #256	; 0x100
  40564e:	d118      	bne.n	405682 <sd_mmc_init_read_blocks+0x6e>
		if (nec_timeout-- == 0) {
  405650:	3d01      	subs	r5, #1
  405652:	d1f0      	bne.n	405636 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  405654:	4b20      	ldr	r3, [pc, #128]	; (4056d8 <sd_mmc_init_read_blocks+0xc4>)
  405656:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  405658:	f04f 0805 	mov.w	r8, #5
  40565c:	e7e3      	b.n	405626 <sd_mmc_init_read_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
  40565e:	4b1b      	ldr	r3, [pc, #108]	; (4056cc <sd_mmc_init_read_blocks+0xb8>)
  405660:	6898      	ldr	r0, [r3, #8]
  405662:	4b1c      	ldr	r3, [pc, #112]	; (4056d4 <sd_mmc_init_read_blocks+0xc0>)
  405664:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
  405666:	4b1d      	ldr	r3, [pc, #116]	; (4056dc <sd_mmc_init_read_blocks+0xc8>)
  405668:	4003      	ands	r3, r0
  40566a:	b92b      	cbnz	r3, 405678 <sd_mmc_init_read_blocks+0x64>
	sd_mmc_nb_block_remaining  = nb_block;
  40566c:	4b17      	ldr	r3, [pc, #92]	; (4056cc <sd_mmc_init_read_blocks+0xb8>)
  40566e:	f8a3 9030 	strh.w	r9, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
  405672:	f8a3 9038 	strh.w	r9, [r3, #56]	; 0x38
	return SD_MMC_OK;
  405676:	e7d6      	b.n	405626 <sd_mmc_init_read_blocks+0x12>
		sd_mmc_deselect_slot();
  405678:	4b17      	ldr	r3, [pc, #92]	; (4056d8 <sd_mmc_init_read_blocks+0xc4>)
  40567a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40567c:	f04f 0805 	mov.w	r8, #5
  405680:	e7d1      	b.n	405626 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  405682:	4b17      	ldr	r3, [pc, #92]	; (4056e0 <sd_mmc_init_read_blocks+0xcc>)
  405684:	4917      	ldr	r1, [pc, #92]	; (4056e4 <sd_mmc_init_read_blocks+0xd0>)
  405686:	f1b9 0f01 	cmp.w	r9, #1
  40568a:	bf98      	it	ls
  40568c:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40568e:	4b0f      	ldr	r3, [pc, #60]	; (4056cc <sd_mmc_init_read_blocks+0xb8>)
  405690:	681b      	ldr	r3, [r3, #0]
  405692:	7adb      	ldrb	r3, [r3, #11]
  405694:	f013 0f08 	tst.w	r3, #8
  405698:	d101      	bne.n	40569e <sd_mmc_init_read_blocks+0x8a>
		arg = (start * SD_MMC_BLOCK_SIZE);
  40569a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40569e:	4b0b      	ldr	r3, [pc, #44]	; (4056cc <sd_mmc_init_read_blocks+0xb8>)
  4056a0:	6898      	ldr	r0, [r3, #8]
  4056a2:	2301      	movs	r3, #1
  4056a4:	9301      	str	r3, [sp, #4]
  4056a6:	f8cd 9000 	str.w	r9, [sp]
  4056aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  4056ae:	4652      	mov	r2, sl
  4056b0:	4c0d      	ldr	r4, [pc, #52]	; (4056e8 <sd_mmc_init_read_blocks+0xd4>)
  4056b2:	47a0      	blx	r4
  4056b4:	2800      	cmp	r0, #0
  4056b6:	d1d2      	bne.n	40565e <sd_mmc_init_read_blocks+0x4a>
		sd_mmc_deselect_slot();
  4056b8:	4b07      	ldr	r3, [pc, #28]	; (4056d8 <sd_mmc_init_read_blocks+0xc4>)
  4056ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4056bc:	f04f 0805 	mov.w	r8, #5
  4056c0:	e7b1      	b.n	405626 <sd_mmc_init_read_blocks+0x12>
  4056c2:	bf00      	nop
  4056c4:	00404da1 	.word	0x00404da1
  4056c8:	00030d41 	.word	0x00030d41
  4056cc:	20430724 	.word	0x20430724
  4056d0:	004034d5 	.word	0x004034d5
  4056d4:	00403505 	.word	0x00403505
  4056d8:	00404ef9 	.word	0x00404ef9
  4056dc:	e4580000 	.word	0xe4580000
  4056e0:	00081111 	.word	0x00081111
  4056e4:	00101112 	.word	0x00101112
  4056e8:	0040355d 	.word	0x0040355d

004056ec <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  4056ec:	b570      	push	{r4, r5, r6, lr}
  4056ee:	4606      	mov	r6, r0
  4056f0:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
  4056f2:	4d0d      	ldr	r5, [pc, #52]	; (405728 <sd_mmc_start_read_blocks+0x3c>)
  4056f4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
  4056f6:	f240 52a7 	movw	r2, #1447	; 0x5a7
  4056fa:	490c      	ldr	r1, [pc, #48]	; (40572c <sd_mmc_start_read_blocks+0x40>)
  4056fc:	42a0      	cmp	r0, r4
  4056fe:	bf34      	ite	cc
  405700:	2000      	movcc	r0, #0
  405702:	2001      	movcs	r0, #1
  405704:	4b0a      	ldr	r3, [pc, #40]	; (405730 <sd_mmc_start_read_blocks+0x44>)
  405706:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
  405708:	4622      	mov	r2, r4
  40570a:	4631      	mov	r1, r6
  40570c:	68a8      	ldr	r0, [r5, #8]
  40570e:	4b09      	ldr	r3, [pc, #36]	; (405734 <sd_mmc_start_read_blocks+0x48>)
  405710:	4798      	blx	r3
  405712:	b918      	cbnz	r0, 40571c <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
  405714:	2200      	movs	r2, #0
  405716:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
  405718:	2005      	movs	r0, #5
  40571a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  40571c:	4a02      	ldr	r2, [pc, #8]	; (405728 <sd_mmc_start_read_blocks+0x3c>)
  40571e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
  405720:	1b1c      	subs	r4, r3, r4
  405722:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
  405724:	2000      	movs	r0, #0
}
  405726:	bd70      	pop	{r4, r5, r6, pc}
  405728:	20430724 	.word	0x20430724
  40572c:	0040c9c0 	.word	0x0040c9c0
  405730:	00403a95 	.word	0x00403a95
  405734:	004035a1 	.word	0x004035a1

00405738 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  405738:	b510      	push	{r4, lr}
  40573a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
  40573c:	4b16      	ldr	r3, [pc, #88]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  40573e:	6898      	ldr	r0, [r3, #8]
  405740:	4b16      	ldr	r3, [pc, #88]	; (40579c <sd_mmc_wait_end_of_read_blocks+0x64>)
  405742:	4798      	blx	r3
  405744:	b908      	cbnz	r0, 40574a <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
  405746:	2005      	movs	r0, #5
  405748:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  40574a:	b194      	cbz	r4, 405772 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
  40574c:	2200      	movs	r2, #0
  40574e:	4b12      	ldr	r3, [pc, #72]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  405750:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
  405752:	4b11      	ldr	r3, [pc, #68]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  405754:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  405756:	2b01      	cmp	r3, #1
  405758:	d011      	beq.n	40577e <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  40575a:	2200      	movs	r2, #0
  40575c:	f243 110c 	movw	r1, #12556	; 0x310c
  405760:	4b0d      	ldr	r3, [pc, #52]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  405762:	6898      	ldr	r0, [r3, #8]
  405764:	4b0e      	ldr	r3, [pc, #56]	; (4057a0 <sd_mmc_wait_end_of_read_blocks+0x68>)
  405766:	4798      	blx	r3
  405768:	b168      	cbz	r0, 405786 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  40576a:	4b0e      	ldr	r3, [pc, #56]	; (4057a4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
  40576c:	4798      	blx	r3
	return SD_MMC_OK;
  40576e:	2000      	movs	r0, #0
  405770:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  405772:	4b09      	ldr	r3, [pc, #36]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  405774:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  405776:	2b00      	cmp	r3, #0
  405778:	d0eb      	beq.n	405752 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
  40577a:	2000      	movs	r0, #0
}
  40577c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  40577e:	4b09      	ldr	r3, [pc, #36]	; (4057a4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
  405780:	4798      	blx	r3
		return SD_MMC_OK;
  405782:	2000      	movs	r0, #0
  405784:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
  405786:	2200      	movs	r2, #0
  405788:	f243 110c 	movw	r1, #12556	; 0x310c
  40578c:	4b02      	ldr	r3, [pc, #8]	; (405798 <sd_mmc_wait_end_of_read_blocks+0x60>)
  40578e:	6898      	ldr	r0, [r3, #8]
  405790:	4b03      	ldr	r3, [pc, #12]	; (4057a0 <sd_mmc_wait_end_of_read_blocks+0x68>)
  405792:	4798      	blx	r3
  405794:	e7e9      	b.n	40576a <sd_mmc_wait_end_of_read_blocks+0x32>
  405796:	bf00      	nop
  405798:	20430724 	.word	0x20430724
  40579c:	00403609 	.word	0x00403609
  4057a0:	004034d5 	.word	0x004034d5
  4057a4:	00404ef9 	.word	0x00404ef9

004057a8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
  4057a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4057aa:	b083      	sub	sp, #12
  4057ac:	4607      	mov	r7, r0
  4057ae:	460e      	mov	r6, r1
  4057b0:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4057b2:	4b1c      	ldr	r3, [pc, #112]	; (405824 <sd_mmc_init_write_blocks+0x7c>)
  4057b4:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  4057b6:	4604      	mov	r4, r0
  4057b8:	b110      	cbz	r0, 4057c0 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  4057ba:	4620      	mov	r0, r4
  4057bc:	b003      	add	sp, #12
  4057be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
  4057c0:	4638      	mov	r0, r7
  4057c2:	4b19      	ldr	r3, [pc, #100]	; (405828 <sd_mmc_init_write_blocks+0x80>)
  4057c4:	4798      	blx	r3
  4057c6:	b9d0      	cbnz	r0, 4057fe <sd_mmc_init_write_blocks+0x56>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  4057c8:	4b18      	ldr	r3, [pc, #96]	; (40582c <sd_mmc_init_write_blocks+0x84>)
  4057ca:	4919      	ldr	r1, [pc, #100]	; (405830 <sd_mmc_init_write_blocks+0x88>)
  4057cc:	2d01      	cmp	r5, #1
  4057ce:	bf98      	it	ls
  4057d0:	4619      	movls	r1, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4057d2:	4b18      	ldr	r3, [pc, #96]	; (405834 <sd_mmc_init_write_blocks+0x8c>)
  4057d4:	681b      	ldr	r3, [r3, #0]
  4057d6:	7adb      	ldrb	r3, [r3, #11]
  4057d8:	f013 0f08 	tst.w	r3, #8
		arg = (start * SD_MMC_BLOCK_SIZE);
  4057dc:	bf08      	it	eq
  4057de:	0276      	lsleq	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4057e0:	4b14      	ldr	r3, [pc, #80]	; (405834 <sd_mmc_init_write_blocks+0x8c>)
  4057e2:	6898      	ldr	r0, [r3, #8]
  4057e4:	2301      	movs	r3, #1
  4057e6:	9301      	str	r3, [sp, #4]
  4057e8:	9500      	str	r5, [sp, #0]
  4057ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  4057ee:	4632      	mov	r2, r6
  4057f0:	4e11      	ldr	r6, [pc, #68]	; (405838 <sd_mmc_init_write_blocks+0x90>)
  4057f2:	47b0      	blx	r6
  4057f4:	b938      	cbnz	r0, 405806 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
  4057f6:	4b11      	ldr	r3, [pc, #68]	; (40583c <sd_mmc_init_write_blocks+0x94>)
  4057f8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4057fa:	2405      	movs	r4, #5
  4057fc:	e7dd      	b.n	4057ba <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
  4057fe:	4b0f      	ldr	r3, [pc, #60]	; (40583c <sd_mmc_init_write_blocks+0x94>)
  405800:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  405802:	2407      	movs	r4, #7
  405804:	e7d9      	b.n	4057ba <sd_mmc_init_write_blocks+0x12>
	resp = driver_get_response(sd_mmc_hal);
  405806:	4b0b      	ldr	r3, [pc, #44]	; (405834 <sd_mmc_init_write_blocks+0x8c>)
  405808:	6898      	ldr	r0, [r3, #8]
  40580a:	4b0d      	ldr	r3, [pc, #52]	; (405840 <sd_mmc_init_write_blocks+0x98>)
  40580c:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
  40580e:	4b0d      	ldr	r3, [pc, #52]	; (405844 <sd_mmc_init_write_blocks+0x9c>)
  405810:	4003      	ands	r3, r0
  405812:	b91b      	cbnz	r3, 40581c <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
  405814:	4b07      	ldr	r3, [pc, #28]	; (405834 <sd_mmc_init_write_blocks+0x8c>)
  405816:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
  405818:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
  40581a:	e7ce      	b.n	4057ba <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
  40581c:	4b07      	ldr	r3, [pc, #28]	; (40583c <sd_mmc_init_write_blocks+0x94>)
  40581e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  405820:	2405      	movs	r4, #5
  405822:	e7ca      	b.n	4057ba <sd_mmc_init_write_blocks+0x12>
  405824:	00404da1 	.word	0x00404da1
  405828:	004055c5 	.word	0x004055c5
  40582c:	00089118 	.word	0x00089118
  405830:	00109119 	.word	0x00109119
  405834:	20430724 	.word	0x20430724
  405838:	0040355d 	.word	0x0040355d
  40583c:	00404ef9 	.word	0x00404ef9
  405840:	00403505 	.word	0x00403505
  405844:	e4580000 	.word	0xe4580000

00405848 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  405848:	b570      	push	{r4, r5, r6, lr}
  40584a:	4606      	mov	r6, r0
  40584c:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
  40584e:	4d0d      	ldr	r5, [pc, #52]	; (405884 <sd_mmc_start_write_blocks+0x3c>)
  405850:	8e28      	ldrh	r0, [r5, #48]	; 0x30
  405852:	f240 52fa 	movw	r2, #1530	; 0x5fa
  405856:	490c      	ldr	r1, [pc, #48]	; (405888 <sd_mmc_start_write_blocks+0x40>)
  405858:	42a0      	cmp	r0, r4
  40585a:	bf34      	ite	cc
  40585c:	2000      	movcc	r0, #0
  40585e:	2001      	movcs	r0, #1
  405860:	4b0a      	ldr	r3, [pc, #40]	; (40588c <sd_mmc_start_write_blocks+0x44>)
  405862:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
  405864:	4622      	mov	r2, r4
  405866:	4631      	mov	r1, r6
  405868:	68a8      	ldr	r0, [r5, #8]
  40586a:	4b09      	ldr	r3, [pc, #36]	; (405890 <sd_mmc_start_write_blocks+0x48>)
  40586c:	4798      	blx	r3
  40586e:	b918      	cbnz	r0, 405878 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
  405870:	2200      	movs	r2, #0
  405872:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
  405874:	2005      	movs	r0, #5
  405876:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  405878:	4a02      	ldr	r2, [pc, #8]	; (405884 <sd_mmc_start_write_blocks+0x3c>)
  40587a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
  40587c:	1b1c      	subs	r4, r3, r4
  40587e:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
  405880:	2000      	movs	r0, #0
}
  405882:	bd70      	pop	{r4, r5, r6, pc}
  405884:	20430724 	.word	0x20430724
  405888:	0040c9c0 	.word	0x0040c9c0
  40588c:	00403a95 	.word	0x00403a95
  405890:	004035d5 	.word	0x004035d5

00405894 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  405894:	b510      	push	{r4, lr}
  405896:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
  405898:	4b14      	ldr	r3, [pc, #80]	; (4058ec <sd_mmc_wait_end_of_write_blocks+0x58>)
  40589a:	6898      	ldr	r0, [r3, #8]
  40589c:	4b14      	ldr	r3, [pc, #80]	; (4058f0 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  40589e:	4798      	blx	r3
  4058a0:	b908      	cbnz	r0, 4058a6 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
  4058a2:	2005      	movs	r0, #5
  4058a4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  4058a6:	b194      	cbz	r4, 4058ce <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
  4058a8:	2200      	movs	r2, #0
  4058aa:	4b10      	ldr	r3, [pc, #64]	; (4058ec <sd_mmc_wait_end_of_write_blocks+0x58>)
  4058ac:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
  4058ae:	4b0f      	ldr	r3, [pc, #60]	; (4058ec <sd_mmc_wait_end_of_write_blocks+0x58>)
  4058b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
  4058b2:	2b01      	cmp	r3, #1
  4058b4:	d011      	beq.n	4058da <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4058b6:	2200      	movs	r2, #0
  4058b8:	f243 110c 	movw	r1, #12556	; 0x310c
  4058bc:	4b0b      	ldr	r3, [pc, #44]	; (4058ec <sd_mmc_wait_end_of_write_blocks+0x58>)
  4058be:	6898      	ldr	r0, [r3, #8]
  4058c0:	4b0c      	ldr	r3, [pc, #48]	; (4058f4 <sd_mmc_wait_end_of_write_blocks+0x60>)
  4058c2:	4798      	blx	r3
  4058c4:	b968      	cbnz	r0, 4058e2 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
  4058c6:	4b0c      	ldr	r3, [pc, #48]	; (4058f8 <sd_mmc_wait_end_of_write_blocks+0x64>)
  4058c8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4058ca:	2005      	movs	r0, #5
  4058cc:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  4058ce:	4b07      	ldr	r3, [pc, #28]	; (4058ec <sd_mmc_wait_end_of_write_blocks+0x58>)
  4058d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  4058d2:	2b00      	cmp	r3, #0
  4058d4:	d0eb      	beq.n	4058ae <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
  4058d6:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  4058d8:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  4058da:	4b07      	ldr	r3, [pc, #28]	; (4058f8 <sd_mmc_wait_end_of_write_blocks+0x64>)
  4058dc:	4798      	blx	r3
		return SD_MMC_OK;
  4058de:	2000      	movs	r0, #0
  4058e0:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  4058e2:	4b05      	ldr	r3, [pc, #20]	; (4058f8 <sd_mmc_wait_end_of_write_blocks+0x64>)
  4058e4:	4798      	blx	r3
	return SD_MMC_OK;
  4058e6:	2000      	movs	r0, #0
  4058e8:	bd10      	pop	{r4, pc}
  4058ea:	bf00      	nop
  4058ec:	20430724 	.word	0x20430724
  4058f0:	00403631 	.word	0x00403631
  4058f4:	004034d5 	.word	0x004034d5
  4058f8:	00404ef9 	.word	0x00404ef9

004058fc <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
  4058fc:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
  4058fe:	4903      	ldr	r1, [pc, #12]	; (40590c <sd_mmc_stack_init+0x10>)
  405900:	460a      	mov	r2, r1
  405902:	3104      	adds	r1, #4
  405904:	4802      	ldr	r0, [pc, #8]	; (405910 <sd_mmc_stack_init+0x14>)
  405906:	4b03      	ldr	r3, [pc, #12]	; (405914 <sd_mmc_stack_init+0x18>)
  405908:	4798      	blx	r3
  40590a:	bd08      	pop	{r3, pc}
  40590c:	20400048 	.word	0x20400048
  405910:	20430870 	.word	0x20430870
  405914:	00404f19 	.word	0x00404f19

00405918 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  405918:	b940      	cbnz	r0, 40592c <_read+0x14>
{
  40591a:	b508      	push	{r3, lr}
  40591c:	460b      	mov	r3, r1
  40591e:	4611      	mov	r1, r2
  405920:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  405922:	4b04      	ldr	r3, [pc, #16]	; (405934 <_read+0x1c>)
  405924:	4798      	blx	r3
  405926:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40592a:	bd08      	pop	{r3, pc}
		return -1;
  40592c:	f04f 30ff 	mov.w	r0, #4294967295
  405930:	4770      	bx	lr
  405932:	bf00      	nop
  405934:	00405989 	.word	0x00405989

00405938 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  405938:	3801      	subs	r0, #1
  40593a:	2802      	cmp	r0, #2
  40593c:	d808      	bhi.n	405950 <_write+0x18>
{
  40593e:	b508      	push	{r3, lr}
  405940:	460b      	mov	r3, r1
  405942:	4611      	mov	r1, r2
  405944:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  405946:	4b04      	ldr	r3, [pc, #16]	; (405958 <_write+0x20>)
  405948:	4798      	blx	r3
  40594a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40594e:	bd08      	pop	{r3, pc}
		return -1;
  405950:	f04f 30ff 	mov.w	r0, #4294967295
  405954:	4770      	bx	lr
  405956:	bf00      	nop
  405958:	004059ad 	.word	0x004059ad

0040595c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  40595c:	b570      	push	{r4, r5, r6, lr}
  40595e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  405960:	4d06      	ldr	r5, [pc, #24]	; (40597c <stdio_io_init+0x20>)
  405962:	682b      	ldr	r3, [r5, #0]
  405964:	2100      	movs	r1, #0
  405966:	6898      	ldr	r0, [r3, #8]
  405968:	4c05      	ldr	r4, [pc, #20]	; (405980 <stdio_io_init+0x24>)
  40596a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40596c:	682b      	ldr	r3, [r5, #0]
  40596e:	2100      	movs	r1, #0
  405970:	6858      	ldr	r0, [r3, #4]
  405972:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  405974:	4b03      	ldr	r3, [pc, #12]	; (405984 <stdio_io_init+0x28>)
  405976:	601e      	str	r6, [r3, #0]
  405978:	bd70      	pop	{r4, r5, r6, pc}
  40597a:	bf00      	nop
  40597c:	20400050 	.word	0x20400050
  405980:	00408415 	.word	0x00408415
  405984:	20430760 	.word	0x20430760

00405988 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  405988:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40598a:	4b06      	ldr	r3, [pc, #24]	; (4059a4 <stdio_io_read+0x1c>)
  40598c:	681b      	ldr	r3, [r3, #0]
  40598e:	b133      	cbz	r3, 40599e <stdio_io_read+0x16>
  405990:	460a      	mov	r2, r1
  405992:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  405994:	b292      	uxth	r2, r2
  405996:	4618      	mov	r0, r3
  405998:	4b03      	ldr	r3, [pc, #12]	; (4059a8 <stdio_io_read+0x20>)
  40599a:	4798      	blx	r3
  40599c:	bd08      	pop	{r3, pc}
		return 0;
  40599e:	2000      	movs	r0, #0
}
  4059a0:	bd08      	pop	{r3, pc}
  4059a2:	bf00      	nop
  4059a4:	20430760 	.word	0x20430760
  4059a8:	00403391 	.word	0x00403391

004059ac <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4059ac:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4059ae:	4b06      	ldr	r3, [pc, #24]	; (4059c8 <stdio_io_write+0x1c>)
  4059b0:	681b      	ldr	r3, [r3, #0]
  4059b2:	b133      	cbz	r3, 4059c2 <stdio_io_write+0x16>
  4059b4:	460a      	mov	r2, r1
  4059b6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4059b8:	b292      	uxth	r2, r2
  4059ba:	4618      	mov	r0, r3
  4059bc:	4b03      	ldr	r3, [pc, #12]	; (4059cc <stdio_io_write+0x20>)
  4059be:	4798      	blx	r3
  4059c0:	bd08      	pop	{r3, pc}
		return 0;
  4059c2:	2000      	movs	r0, #0
}
  4059c4:	bd08      	pop	{r3, pc}
  4059c6:	bf00      	nop
  4059c8:	20430760 	.word	0x20430760
  4059cc:	00403361 	.word	0x00403361

004059d0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4059d0:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  4059d2:	4c04      	ldr	r4, [pc, #16]	; (4059e4 <stdio_redirect_init+0x14>)
  4059d4:	4620      	mov	r0, r4
  4059d6:	4b04      	ldr	r3, [pc, #16]	; (4059e8 <stdio_redirect_init+0x18>)
  4059d8:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  4059da:	4620      	mov	r0, r4
  4059dc:	4b03      	ldr	r3, [pc, #12]	; (4059ec <stdio_redirect_init+0x1c>)
  4059de:	4798      	blx	r3
  4059e0:	bd10      	pop	{r4, pc}
  4059e2:	bf00      	nop
  4059e4:	20430844 	.word	0x20430844
  4059e8:	00403a69 	.word	0x00403a69
  4059ec:	0040595d 	.word	0x0040595d

004059f0 <ceil>:
  4059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4059f4:	f3c1 590a 	ubfx	r9, r1, #20, #11
  4059f8:	f2a9 36ff 	subw	r6, r9, #1023	; 0x3ff
  4059fc:	2e13      	cmp	r6, #19
  4059fe:	460b      	mov	r3, r1
  405a00:	460d      	mov	r5, r1
  405a02:	4604      	mov	r4, r0
  405a04:	4607      	mov	r7, r0
  405a06:	4688      	mov	r8, r1
  405a08:	4682      	mov	sl, r0
  405a0a:	dc22      	bgt.n	405a52 <ceil+0x62>
  405a0c:	2e00      	cmp	r6, #0
  405a0e:	db4f      	blt.n	405ab0 <ceil+0xc0>
  405a10:	4a3d      	ldr	r2, [pc, #244]	; (405b08 <ceil+0x118>)
  405a12:	fa42 f906 	asr.w	r9, r2, r6
  405a16:	ea01 0209 	and.w	r2, r1, r9
  405a1a:	4302      	orrs	r2, r0
  405a1c:	d01e      	beq.n	405a5c <ceil+0x6c>
  405a1e:	a338      	add	r3, pc, #224	; (adr r3, 405b00 <ceil+0x110>)
  405a20:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a24:	f005 ff7c 	bl	40b920 <__adddf3>
  405a28:	2200      	movs	r2, #0
  405a2a:	2300      	movs	r3, #0
  405a2c:	f006 fbba 	bl	40c1a4 <__aeabi_dcmpgt>
  405a30:	b150      	cbz	r0, 405a48 <ceil+0x58>
  405a32:	2d00      	cmp	r5, #0
  405a34:	dd04      	ble.n	405a40 <ceil+0x50>
  405a36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  405a3a:	fa43 f606 	asr.w	r6, r3, r6
  405a3e:	44b0      	add	r8, r6
  405a40:	ea28 0509 	bic.w	r5, r8, r9
  405a44:	f04f 0a00 	mov.w	sl, #0
  405a48:	4654      	mov	r4, sl
  405a4a:	4629      	mov	r1, r5
  405a4c:	4620      	mov	r0, r4
  405a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a52:	2e33      	cmp	r6, #51	; 0x33
  405a54:	dd06      	ble.n	405a64 <ceil+0x74>
  405a56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  405a5a:	d03d      	beq.n	405ad8 <ceil+0xe8>
  405a5c:	4619      	mov	r1, r3
  405a5e:	4620      	mov	r0, r4
  405a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a64:	f2a9 4913 	subw	r9, r9, #1043	; 0x413
  405a68:	f04f 32ff 	mov.w	r2, #4294967295
  405a6c:	fa22 f909 	lsr.w	r9, r2, r9
  405a70:	ea10 0f09 	tst.w	r0, r9
  405a74:	d0f2      	beq.n	405a5c <ceil+0x6c>
  405a76:	a322      	add	r3, pc, #136	; (adr r3, 405b00 <ceil+0x110>)
  405a78:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a7c:	f005 ff50 	bl	40b920 <__adddf3>
  405a80:	2200      	movs	r2, #0
  405a82:	2300      	movs	r3, #0
  405a84:	f006 fb8e 	bl	40c1a4 <__aeabi_dcmpgt>
  405a88:	2800      	cmp	r0, #0
  405a8a:	d0dd      	beq.n	405a48 <ceil+0x58>
  405a8c:	2d00      	cmp	r5, #0
  405a8e:	dd09      	ble.n	405aa4 <ceil+0xb4>
  405a90:	2e14      	cmp	r6, #20
  405a92:	d02f      	beq.n	405af4 <ceil+0x104>
  405a94:	2301      	movs	r3, #1
  405a96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  405a9a:	fa03 f606 	lsl.w	r6, r3, r6
  405a9e:	1937      	adds	r7, r6, r4
  405aa0:	bf28      	it	cs
  405aa2:	4498      	addcs	r8, r3
  405aa4:	4645      	mov	r5, r8
  405aa6:	ea27 0a09 	bic.w	sl, r7, r9
  405aaa:	4654      	mov	r4, sl
  405aac:	4629      	mov	r1, r5
  405aae:	e7cd      	b.n	405a4c <ceil+0x5c>
  405ab0:	a313      	add	r3, pc, #76	; (adr r3, 405b00 <ceil+0x110>)
  405ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ab6:	f005 ff33 	bl	40b920 <__adddf3>
  405aba:	2200      	movs	r2, #0
  405abc:	2300      	movs	r3, #0
  405abe:	f006 fb71 	bl	40c1a4 <__aeabi_dcmpgt>
  405ac2:	2800      	cmp	r0, #0
  405ac4:	d0c0      	beq.n	405a48 <ceil+0x58>
  405ac6:	2d00      	cmp	r5, #0
  405ac8:	db0f      	blt.n	405aea <ceil+0xfa>
  405aca:	ea55 0704 	orrs.w	r7, r5, r4
  405ace:	d009      	beq.n	405ae4 <ceil+0xf4>
  405ad0:	f04f 0a00 	mov.w	sl, #0
  405ad4:	4d0d      	ldr	r5, [pc, #52]	; (405b0c <ceil+0x11c>)
  405ad6:	e7b7      	b.n	405a48 <ceil+0x58>
  405ad8:	4602      	mov	r2, r0
  405ada:	460b      	mov	r3, r1
  405adc:	f005 ff20 	bl	40b920 <__adddf3>
  405ae0:	4604      	mov	r4, r0
  405ae2:	e7bc      	b.n	405a5e <ceil+0x6e>
  405ae4:	46ba      	mov	sl, r7
  405ae6:	463d      	mov	r5, r7
  405ae8:	e7ae      	b.n	405a48 <ceil+0x58>
  405aea:	f04f 0a00 	mov.w	sl, #0
  405aee:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  405af2:	e7a9      	b.n	405a48 <ceil+0x58>
  405af4:	f105 0801 	add.w	r8, r5, #1
  405af8:	e7d4      	b.n	405aa4 <ceil+0xb4>
  405afa:	bf00      	nop
  405afc:	f3af 8000 	nop.w
  405b00:	8800759c 	.word	0x8800759c
  405b04:	7e37e43c 	.word	0x7e37e43c
  405b08:	000fffff 	.word	0x000fffff
  405b0c:	3ff00000 	.word	0x3ff00000

00405b10 <cos>:
  405b10:	b530      	push	{r4, r5, lr}
  405b12:	4a22      	ldr	r2, [pc, #136]	; (405b9c <cos+0x8c>)
  405b14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405b18:	4293      	cmp	r3, r2
  405b1a:	b087      	sub	sp, #28
  405b1c:	dd1b      	ble.n	405b56 <cos+0x46>
  405b1e:	4a20      	ldr	r2, [pc, #128]	; (405ba0 <cos+0x90>)
  405b20:	4293      	cmp	r3, r2
  405b22:	dd05      	ble.n	405b30 <cos+0x20>
  405b24:	4602      	mov	r2, r0
  405b26:	460b      	mov	r3, r1
  405b28:	f005 fef8 	bl	40b91c <__aeabi_dsub>
  405b2c:	b007      	add	sp, #28
  405b2e:	bd30      	pop	{r4, r5, pc}
  405b30:	aa02      	add	r2, sp, #8
  405b32:	f000 f9b1 	bl	405e98 <__ieee754_rem_pio2>
  405b36:	f000 0303 	and.w	r3, r0, #3
  405b3a:	2b01      	cmp	r3, #1
  405b3c:	d01a      	beq.n	405b74 <cos+0x64>
  405b3e:	2b02      	cmp	r3, #2
  405b40:	d00f      	beq.n	405b62 <cos+0x52>
  405b42:	b31b      	cbz	r3, 405b8c <cos+0x7c>
  405b44:	2401      	movs	r4, #1
  405b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b4e:	9400      	str	r4, [sp, #0]
  405b50:	f001 f932 	bl	406db8 <__kernel_sin>
  405b54:	e7ea      	b.n	405b2c <cos+0x1c>
  405b56:	2200      	movs	r2, #0
  405b58:	2300      	movs	r3, #0
  405b5a:	f000 fbc1 	bl	4062e0 <__kernel_cos>
  405b5e:	b007      	add	sp, #28
  405b60:	bd30      	pop	{r4, r5, pc}
  405b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b6a:	f000 fbb9 	bl	4062e0 <__kernel_cos>
  405b6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405b72:	e7db      	b.n	405b2c <cos+0x1c>
  405b74:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  405b78:	9300      	str	r3, [sp, #0]
  405b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b7e:	4622      	mov	r2, r4
  405b80:	462b      	mov	r3, r5
  405b82:	f001 f919 	bl	406db8 <__kernel_sin>
  405b86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405b8a:	e7cf      	b.n	405b2c <cos+0x1c>
  405b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b94:	f000 fba4 	bl	4062e0 <__kernel_cos>
  405b98:	e7c8      	b.n	405b2c <cos+0x1c>
  405b9a:	bf00      	nop
  405b9c:	3fe921fb 	.word	0x3fe921fb
  405ba0:	7fefffff 	.word	0x7fefffff

00405ba4 <lround>:
  405ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405ba6:	460b      	mov	r3, r1
  405ba8:	2b00      	cmp	r3, #0
  405baa:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405bae:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
  405bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405bb6:	bfb4      	ite	lt
  405bb8:	f04f 34ff 	movlt.w	r4, #4294967295
  405bbc:	2401      	movge	r4, #1
  405bbe:	2d13      	cmp	r5, #19
  405bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405bc4:	dc0c      	bgt.n	405be0 <lround+0x3c>
  405bc6:	2d00      	cmp	r5, #0
  405bc8:	db2f      	blt.n	405c2a <lround+0x86>
  405bca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405bce:	412a      	asrs	r2, r5
  405bd0:	4413      	add	r3, r2
  405bd2:	f1c5 0514 	rsb	r5, r5, #20
  405bd6:	40eb      	lsrs	r3, r5
  405bd8:	fb03 f404 	mul.w	r4, r3, r4
  405bdc:	4620      	mov	r0, r4
  405bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405be0:	2d1e      	cmp	r5, #30
  405be2:	d80a      	bhi.n	405bfa <lround+0x56>
  405be4:	2d33      	cmp	r5, #51	; 0x33
  405be6:	dd0d      	ble.n	405c04 <lround+0x60>
  405be8:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
  405bec:	f2a7 4233 	subw	r2, r7, #1075	; 0x433
  405bf0:	408b      	lsls	r3, r1
  405bf2:	fa00 f202 	lsl.w	r2, r0, r2
  405bf6:	4313      	orrs	r3, r2
  405bf8:	e7ee      	b.n	405bd8 <lround+0x34>
  405bfa:	f006 faf3 	bl	40c1e4 <__aeabi_d2iz>
  405bfe:	4604      	mov	r4, r0
  405c00:	4620      	mov	r0, r4
  405c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c04:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
  405c08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405c0c:	fa21 f207 	lsr.w	r2, r1, r7
  405c10:	1812      	adds	r2, r2, r0
  405c12:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
  405c16:	bf28      	it	cs
  405c18:	3301      	addcs	r3, #1
  405c1a:	2d20      	cmp	r5, #32
  405c1c:	fa03 f307 	lsl.w	r3, r3, r7
  405c20:	bf14      	ite	ne
  405c22:	40ea      	lsrne	r2, r5
  405c24:	2200      	moveq	r2, #0
  405c26:	4313      	orrs	r3, r2
  405c28:	e7d6      	b.n	405bd8 <lround+0x34>
  405c2a:	3501      	adds	r5, #1
  405c2c:	bf18      	it	ne
  405c2e:	2400      	movne	r4, #0
  405c30:	4620      	mov	r0, r4
  405c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405c34 <sin>:
  405c34:	b530      	push	{r4, r5, lr}
  405c36:	4a1f      	ldr	r2, [pc, #124]	; (405cb4 <sin+0x80>)
  405c38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405c3c:	4293      	cmp	r3, r2
  405c3e:	b087      	sub	sp, #28
  405c40:	dd1b      	ble.n	405c7a <sin+0x46>
  405c42:	4a1d      	ldr	r2, [pc, #116]	; (405cb8 <sin+0x84>)
  405c44:	4293      	cmp	r3, r2
  405c46:	dd05      	ble.n	405c54 <sin+0x20>
  405c48:	4602      	mov	r2, r0
  405c4a:	460b      	mov	r3, r1
  405c4c:	f005 fe66 	bl	40b91c <__aeabi_dsub>
  405c50:	b007      	add	sp, #28
  405c52:	bd30      	pop	{r4, r5, pc}
  405c54:	aa02      	add	r2, sp, #8
  405c56:	f000 f91f 	bl	405e98 <__ieee754_rem_pio2>
  405c5a:	f000 0003 	and.w	r0, r0, #3
  405c5e:	2801      	cmp	r0, #1
  405c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405c64:	d01a      	beq.n	405c9c <sin+0x68>
  405c66:	2802      	cmp	r0, #2
  405c68:	d00f      	beq.n	405c8a <sin+0x56>
  405c6a:	b1e0      	cbz	r0, 405ca6 <sin+0x72>
  405c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405c70:	f000 fb36 	bl	4062e0 <__kernel_cos>
  405c74:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405c78:	e7ea      	b.n	405c50 <sin+0x1c>
  405c7a:	2300      	movs	r3, #0
  405c7c:	9300      	str	r3, [sp, #0]
  405c7e:	2200      	movs	r2, #0
  405c80:	2300      	movs	r3, #0
  405c82:	f001 f899 	bl	406db8 <__kernel_sin>
  405c86:	b007      	add	sp, #28
  405c88:	bd30      	pop	{r4, r5, pc}
  405c8a:	2401      	movs	r4, #1
  405c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405c90:	9400      	str	r4, [sp, #0]
  405c92:	f001 f891 	bl	406db8 <__kernel_sin>
  405c96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405c9a:	e7d9      	b.n	405c50 <sin+0x1c>
  405c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405ca0:	f000 fb1e 	bl	4062e0 <__kernel_cos>
  405ca4:	e7d4      	b.n	405c50 <sin+0x1c>
  405ca6:	2401      	movs	r4, #1
  405ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405cac:	9400      	str	r4, [sp, #0]
  405cae:	f001 f883 	bl	406db8 <__kernel_sin>
  405cb2:	e7cd      	b.n	405c50 <sin+0x1c>
  405cb4:	3fe921fb 	.word	0x3fe921fb
  405cb8:	7fefffff 	.word	0x7fefffff

00405cbc <atan2>:
  405cbc:	f000 b800 	b.w	405cc0 <__ieee754_atan2>

00405cc0 <__ieee754_atan2>:
  405cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cc4:	4254      	negs	r4, r2
  405cc6:	4314      	orrs	r4, r2
  405cc8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  405ccc:	4e70      	ldr	r6, [pc, #448]	; (405e90 <__ieee754_atan2+0x1d0>)
  405cce:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  405cd2:	42b4      	cmp	r4, r6
  405cd4:	4686      	mov	lr, r0
  405cd6:	460f      	mov	r7, r1
  405cd8:	d840      	bhi.n	405d5c <__ieee754_atan2+0x9c>
  405cda:	4244      	negs	r4, r0
  405cdc:	4304      	orrs	r4, r0
  405cde:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  405ce2:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  405ce6:	42b4      	cmp	r4, r6
  405ce8:	468a      	mov	sl, r1
  405cea:	d837      	bhi.n	405d5c <__ieee754_atan2+0x9c>
  405cec:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  405cf0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  405cf4:	4314      	orrs	r4, r2
  405cf6:	d04a      	beq.n	405d8e <__ieee754_atan2+0xce>
  405cf8:	179c      	asrs	r4, r3, #30
  405cfa:	f004 0402 	and.w	r4, r4, #2
  405cfe:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  405d02:	ea50 010b 	orrs.w	r1, r0, fp
  405d06:	d031      	beq.n	405d6c <__ieee754_atan2+0xac>
  405d08:	ea52 0109 	orrs.w	r1, r2, r9
  405d0c:	d037      	beq.n	405d7e <__ieee754_atan2+0xbe>
  405d0e:	45b1      	cmp	r9, r6
  405d10:	d052      	beq.n	405db8 <__ieee754_atan2+0xf8>
  405d12:	45b3      	cmp	fp, r6
  405d14:	d033      	beq.n	405d7e <__ieee754_atan2+0xbe>
  405d16:	ebab 0909 	sub.w	r9, fp, r9
  405d1a:	ea4f 5929 	mov.w	r9, r9, asr #20
  405d1e:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  405d22:	dc3b      	bgt.n	405d9c <__ieee754_atan2+0xdc>
  405d24:	2b00      	cmp	r3, #0
  405d26:	db66      	blt.n	405df6 <__ieee754_atan2+0x136>
  405d28:	4670      	mov	r0, lr
  405d2a:	4639      	mov	r1, r7
  405d2c:	f006 f8d4 	bl	40bed8 <__aeabi_ddiv>
  405d30:	f001 fa9c 	bl	40726c <fabs>
  405d34:	f001 f8f8 	bl	406f28 <atan>
  405d38:	2c01      	cmp	r4, #1
  405d3a:	d058      	beq.n	405dee <__ieee754_atan2+0x12e>
  405d3c:	2c02      	cmp	r4, #2
  405d3e:	d048      	beq.n	405dd2 <__ieee754_atan2+0x112>
  405d40:	2c00      	cmp	r4, #0
  405d42:	d05e      	beq.n	405e02 <__ieee754_atan2+0x142>
  405d44:	a340      	add	r3, pc, #256	; (adr r3, 405e48 <__ieee754_atan2+0x188>)
  405d46:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d4a:	f005 fde7 	bl	40b91c <__aeabi_dsub>
  405d4e:	a340      	add	r3, pc, #256	; (adr r3, 405e50 <__ieee754_atan2+0x190>)
  405d50:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d54:	f005 fde2 	bl	40b91c <__aeabi_dsub>
  405d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d5c:	4610      	mov	r0, r2
  405d5e:	4619      	mov	r1, r3
  405d60:	4672      	mov	r2, lr
  405d62:	463b      	mov	r3, r7
  405d64:	f005 fddc 	bl	40b920 <__adddf3>
  405d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d6c:	2c02      	cmp	r4, #2
  405d6e:	d019      	beq.n	405da4 <__ieee754_atan2+0xe4>
  405d70:	2c03      	cmp	r4, #3
  405d72:	d110      	bne.n	405d96 <__ieee754_atan2+0xd6>
  405d74:	a138      	add	r1, pc, #224	; (adr r1, 405e58 <__ieee754_atan2+0x198>)
  405d76:	e9d1 0100 	ldrd	r0, r1, [r1]
  405d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d7e:	f1ba 0f00 	cmp.w	sl, #0
  405d82:	db14      	blt.n	405dae <__ieee754_atan2+0xee>
  405d84:	a136      	add	r1, pc, #216	; (adr r1, 405e60 <__ieee754_atan2+0x1a0>)
  405d86:	e9d1 0100 	ldrd	r0, r1, [r1]
  405d8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d8e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d92:	f001 b8c9 	b.w	406f28 <atan>
  405d96:	4639      	mov	r1, r7
  405d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d9c:	a130      	add	r1, pc, #192	; (adr r1, 405e60 <__ieee754_atan2+0x1a0>)
  405d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
  405da2:	e7c9      	b.n	405d38 <__ieee754_atan2+0x78>
  405da4:	a12a      	add	r1, pc, #168	; (adr r1, 405e50 <__ieee754_atan2+0x190>)
  405da6:	e9d1 0100 	ldrd	r0, r1, [r1]
  405daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dae:	a12e      	add	r1, pc, #184	; (adr r1, 405e68 <__ieee754_atan2+0x1a8>)
  405db0:	e9d1 0100 	ldrd	r0, r1, [r1]
  405db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405db8:	45cb      	cmp	fp, r9
  405dba:	d024      	beq.n	405e06 <__ieee754_atan2+0x146>
  405dbc:	2c02      	cmp	r4, #2
  405dbe:	d0f1      	beq.n	405da4 <__ieee754_atan2+0xe4>
  405dc0:	2c03      	cmp	r4, #3
  405dc2:	d0d7      	beq.n	405d74 <__ieee754_atan2+0xb4>
  405dc4:	2c01      	cmp	r4, #1
  405dc6:	f04f 0000 	mov.w	r0, #0
  405dca:	d027      	beq.n	405e1c <__ieee754_atan2+0x15c>
  405dcc:	2100      	movs	r1, #0
  405dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dd2:	a31d      	add	r3, pc, #116	; (adr r3, 405e48 <__ieee754_atan2+0x188>)
  405dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dd8:	f005 fda0 	bl	40b91c <__aeabi_dsub>
  405ddc:	4602      	mov	r2, r0
  405dde:	460b      	mov	r3, r1
  405de0:	a11b      	add	r1, pc, #108	; (adr r1, 405e50 <__ieee754_atan2+0x190>)
  405de2:	e9d1 0100 	ldrd	r0, r1, [r1]
  405de6:	f005 fd99 	bl	40b91c <__aeabi_dsub>
  405dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405df6:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  405dfa:	da95      	bge.n	405d28 <__ieee754_atan2+0x68>
  405dfc:	2000      	movs	r0, #0
  405dfe:	2100      	movs	r1, #0
  405e00:	e79a      	b.n	405d38 <__ieee754_atan2+0x78>
  405e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e06:	2c02      	cmp	r4, #2
  405e08:	d016      	beq.n	405e38 <__ieee754_atan2+0x178>
  405e0a:	2c03      	cmp	r4, #3
  405e0c:	d00f      	beq.n	405e2e <__ieee754_atan2+0x16e>
  405e0e:	2c01      	cmp	r4, #1
  405e10:	d008      	beq.n	405e24 <__ieee754_atan2+0x164>
  405e12:	a117      	add	r1, pc, #92	; (adr r1, 405e70 <__ieee754_atan2+0x1b0>)
  405e14:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e1c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e24:	a114      	add	r1, pc, #80	; (adr r1, 405e78 <__ieee754_atan2+0x1b8>)
  405e26:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e2e:	a114      	add	r1, pc, #80	; (adr r1, 405e80 <__ieee754_atan2+0x1c0>)
  405e30:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e38:	a113      	add	r1, pc, #76	; (adr r1, 405e88 <__ieee754_atan2+0x1c8>)
  405e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e42:	bf00      	nop
  405e44:	f3af 8000 	nop.w
  405e48:	33145c07 	.word	0x33145c07
  405e4c:	3ca1a626 	.word	0x3ca1a626
  405e50:	54442d18 	.word	0x54442d18
  405e54:	400921fb 	.word	0x400921fb
  405e58:	54442d18 	.word	0x54442d18
  405e5c:	c00921fb 	.word	0xc00921fb
  405e60:	54442d18 	.word	0x54442d18
  405e64:	3ff921fb 	.word	0x3ff921fb
  405e68:	54442d18 	.word	0x54442d18
  405e6c:	bff921fb 	.word	0xbff921fb
  405e70:	54442d18 	.word	0x54442d18
  405e74:	3fe921fb 	.word	0x3fe921fb
  405e78:	54442d18 	.word	0x54442d18
  405e7c:	bfe921fb 	.word	0xbfe921fb
  405e80:	7f3321d2 	.word	0x7f3321d2
  405e84:	c002d97c 	.word	0xc002d97c
  405e88:	7f3321d2 	.word	0x7f3321d2
  405e8c:	4002d97c 	.word	0x4002d97c
  405e90:	7ff00000 	.word	0x7ff00000
  405e94:	00000000 	.word	0x00000000

00405e98 <__ieee754_rem_pio2>:
  405e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e9c:	4e9a      	ldr	r6, [pc, #616]	; (406108 <__ieee754_rem_pio2+0x270>)
  405e9e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  405ea2:	42b7      	cmp	r7, r6
  405ea4:	b091      	sub	sp, #68	; 0x44
  405ea6:	f340 808e 	ble.w	405fc6 <__ieee754_rem_pio2+0x12e>
  405eaa:	4692      	mov	sl, r2
  405eac:	4a97      	ldr	r2, [pc, #604]	; (40610c <__ieee754_rem_pio2+0x274>)
  405eae:	4297      	cmp	r7, r2
  405eb0:	460c      	mov	r4, r1
  405eb2:	dc26      	bgt.n	405f02 <__ieee754_rem_pio2+0x6a>
  405eb4:	2900      	cmp	r1, #0
  405eb6:	a38a      	add	r3, pc, #552	; (adr r3, 4060e0 <__ieee754_rem_pio2+0x248>)
  405eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ebc:	f340 81b4 	ble.w	406228 <__ieee754_rem_pio2+0x390>
  405ec0:	f005 fd2c 	bl	40b91c <__aeabi_dsub>
  405ec4:	4b92      	ldr	r3, [pc, #584]	; (406110 <__ieee754_rem_pio2+0x278>)
  405ec6:	429f      	cmp	r7, r3
  405ec8:	4604      	mov	r4, r0
  405eca:	460d      	mov	r5, r1
  405ecc:	f000 8090 	beq.w	405ff0 <__ieee754_rem_pio2+0x158>
  405ed0:	a385      	add	r3, pc, #532	; (adr r3, 4060e8 <__ieee754_rem_pio2+0x250>)
  405ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ed6:	f005 fd21 	bl	40b91c <__aeabi_dsub>
  405eda:	4602      	mov	r2, r0
  405edc:	460b      	mov	r3, r1
  405ede:	e9ca 2300 	strd	r2, r3, [sl]
  405ee2:	4620      	mov	r0, r4
  405ee4:	4629      	mov	r1, r5
  405ee6:	f005 fd19 	bl	40b91c <__aeabi_dsub>
  405eea:	a37f      	add	r3, pc, #508	; (adr r3, 4060e8 <__ieee754_rem_pio2+0x250>)
  405eec:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ef0:	f005 fd14 	bl	40b91c <__aeabi_dsub>
  405ef4:	2501      	movs	r5, #1
  405ef6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405efa:	4628      	mov	r0, r5
  405efc:	b011      	add	sp, #68	; 0x44
  405efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f02:	4a84      	ldr	r2, [pc, #528]	; (406114 <__ieee754_rem_pio2+0x27c>)
  405f04:	4297      	cmp	r7, r2
  405f06:	f340 8090 	ble.w	40602a <__ieee754_rem_pio2+0x192>
  405f0a:	4a83      	ldr	r2, [pc, #524]	; (406118 <__ieee754_rem_pio2+0x280>)
  405f0c:	4297      	cmp	r7, r2
  405f0e:	dc65      	bgt.n	405fdc <__ieee754_rem_pio2+0x144>
  405f10:	153d      	asrs	r5, r7, #20
  405f12:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  405f16:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  405f1a:	4619      	mov	r1, r3
  405f1c:	461f      	mov	r7, r3
  405f1e:	4606      	mov	r6, r0
  405f20:	f006 f960 	bl	40c1e4 <__aeabi_d2iz>
  405f24:	f005 fe48 	bl	40bbb8 <__aeabi_i2d>
  405f28:	4680      	mov	r8, r0
  405f2a:	4689      	mov	r9, r1
  405f2c:	4602      	mov	r2, r0
  405f2e:	460b      	mov	r3, r1
  405f30:	4630      	mov	r0, r6
  405f32:	4639      	mov	r1, r7
  405f34:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  405f38:	f005 fcf0 	bl	40b91c <__aeabi_dsub>
  405f3c:	2200      	movs	r2, #0
  405f3e:	4b77      	ldr	r3, [pc, #476]	; (40611c <__ieee754_rem_pio2+0x284>)
  405f40:	f005 fea0 	bl	40bc84 <__aeabi_dmul>
  405f44:	4689      	mov	r9, r1
  405f46:	4680      	mov	r8, r0
  405f48:	f006 f94c 	bl	40c1e4 <__aeabi_d2iz>
  405f4c:	f005 fe34 	bl	40bbb8 <__aeabi_i2d>
  405f50:	4602      	mov	r2, r0
  405f52:	460b      	mov	r3, r1
  405f54:	4606      	mov	r6, r0
  405f56:	460f      	mov	r7, r1
  405f58:	4640      	mov	r0, r8
  405f5a:	4649      	mov	r1, r9
  405f5c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  405f60:	f005 fcdc 	bl	40b91c <__aeabi_dsub>
  405f64:	2200      	movs	r2, #0
  405f66:	4b6d      	ldr	r3, [pc, #436]	; (40611c <__ieee754_rem_pio2+0x284>)
  405f68:	f005 fe8c 	bl	40bc84 <__aeabi_dmul>
  405f6c:	2200      	movs	r2, #0
  405f6e:	2300      	movs	r3, #0
  405f70:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  405f74:	f006 f8ee 	bl	40c154 <__aeabi_dcmpeq>
  405f78:	2800      	cmp	r0, #0
  405f7a:	f000 8173 	beq.w	406264 <__ieee754_rem_pio2+0x3cc>
  405f7e:	2300      	movs	r3, #0
  405f80:	4630      	mov	r0, r6
  405f82:	4639      	mov	r1, r7
  405f84:	2200      	movs	r2, #0
  405f86:	f006 f8e5 	bl	40c154 <__aeabi_dcmpeq>
  405f8a:	2800      	cmp	r0, #0
  405f8c:	bf14      	ite	ne
  405f8e:	2301      	movne	r3, #1
  405f90:	2302      	moveq	r3, #2
  405f92:	4a63      	ldr	r2, [pc, #396]	; (406120 <__ieee754_rem_pio2+0x288>)
  405f94:	9201      	str	r2, [sp, #4]
  405f96:	2102      	movs	r1, #2
  405f98:	462a      	mov	r2, r5
  405f9a:	9100      	str	r1, [sp, #0]
  405f9c:	a80a      	add	r0, sp, #40	; 0x28
  405f9e:	4651      	mov	r1, sl
  405fa0:	f000 fac2 	bl	406528 <__kernel_rem_pio2>
  405fa4:	2c00      	cmp	r4, #0
  405fa6:	4605      	mov	r5, r0
  405fa8:	da14      	bge.n	405fd4 <__ieee754_rem_pio2+0x13c>
  405faa:	f8da 2004 	ldr.w	r2, [sl, #4]
  405fae:	f8da 300c 	ldr.w	r3, [sl, #12]
  405fb2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  405fb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405fba:	4245      	negs	r5, r0
  405fbc:	f8ca 2004 	str.w	r2, [sl, #4]
  405fc0:	f8ca 300c 	str.w	r3, [sl, #12]
  405fc4:	e006      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  405fc6:	e9c2 0100 	strd	r0, r1, [r2]
  405fca:	2500      	movs	r5, #0
  405fcc:	2400      	movs	r4, #0
  405fce:	e9c2 4502 	strd	r4, r5, [r2, #8]
  405fd2:	2500      	movs	r5, #0
  405fd4:	4628      	mov	r0, r5
  405fd6:	b011      	add	sp, #68	; 0x44
  405fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fdc:	4602      	mov	r2, r0
  405fde:	460b      	mov	r3, r1
  405fe0:	f005 fc9c 	bl	40b91c <__aeabi_dsub>
  405fe4:	2500      	movs	r5, #0
  405fe6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405fea:	e9ca 0100 	strd	r0, r1, [sl]
  405fee:	e7f1      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  405ff0:	a33f      	add	r3, pc, #252	; (adr r3, 4060f0 <__ieee754_rem_pio2+0x258>)
  405ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ff6:	f005 fc91 	bl	40b91c <__aeabi_dsub>
  405ffa:	a33f      	add	r3, pc, #252	; (adr r3, 4060f8 <__ieee754_rem_pio2+0x260>)
  405ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
  406000:	460d      	mov	r5, r1
  406002:	4604      	mov	r4, r0
  406004:	f005 fc8a 	bl	40b91c <__aeabi_dsub>
  406008:	4602      	mov	r2, r0
  40600a:	460b      	mov	r3, r1
  40600c:	e9ca 2300 	strd	r2, r3, [sl]
  406010:	4629      	mov	r1, r5
  406012:	4620      	mov	r0, r4
  406014:	f005 fc82 	bl	40b91c <__aeabi_dsub>
  406018:	a337      	add	r3, pc, #220	; (adr r3, 4060f8 <__ieee754_rem_pio2+0x260>)
  40601a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40601e:	f005 fc7d 	bl	40b91c <__aeabi_dsub>
  406022:	2501      	movs	r5, #1
  406024:	e9ca 0102 	strd	r0, r1, [sl, #8]
  406028:	e7d4      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  40602a:	f001 f91f 	bl	40726c <fabs>
  40602e:	a334      	add	r3, pc, #208	; (adr r3, 406100 <__ieee754_rem_pio2+0x268>)
  406030:	e9d3 2300 	ldrd	r2, r3, [r3]
  406034:	4680      	mov	r8, r0
  406036:	4689      	mov	r9, r1
  406038:	f005 fe24 	bl	40bc84 <__aeabi_dmul>
  40603c:	2200      	movs	r2, #0
  40603e:	4b39      	ldr	r3, [pc, #228]	; (406124 <__ieee754_rem_pio2+0x28c>)
  406040:	f005 fc6e 	bl	40b920 <__adddf3>
  406044:	f006 f8ce 	bl	40c1e4 <__aeabi_d2iz>
  406048:	4605      	mov	r5, r0
  40604a:	f005 fdb5 	bl	40bbb8 <__aeabi_i2d>
  40604e:	a324      	add	r3, pc, #144	; (adr r3, 4060e0 <__ieee754_rem_pio2+0x248>)
  406050:	e9d3 2300 	ldrd	r2, r3, [r3]
  406054:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406058:	f005 fe14 	bl	40bc84 <__aeabi_dmul>
  40605c:	4602      	mov	r2, r0
  40605e:	460b      	mov	r3, r1
  406060:	4640      	mov	r0, r8
  406062:	4649      	mov	r1, r9
  406064:	f005 fc5a 	bl	40b91c <__aeabi_dsub>
  406068:	a31f      	add	r3, pc, #124	; (adr r3, 4060e8 <__ieee754_rem_pio2+0x250>)
  40606a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40606e:	4680      	mov	r8, r0
  406070:	4689      	mov	r9, r1
  406072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406076:	f005 fe05 	bl	40bc84 <__aeabi_dmul>
  40607a:	2d1f      	cmp	r5, #31
  40607c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406080:	dc54      	bgt.n	40612c <__ieee754_rem_pio2+0x294>
  406082:	4b29      	ldr	r3, [pc, #164]	; (406128 <__ieee754_rem_pio2+0x290>)
  406084:	1e6a      	subs	r2, r5, #1
  406086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40608a:	429f      	cmp	r7, r3
  40608c:	d04e      	beq.n	40612c <__ieee754_rem_pio2+0x294>
  40608e:	4602      	mov	r2, r0
  406090:	460b      	mov	r3, r1
  406092:	4640      	mov	r0, r8
  406094:	4649      	mov	r1, r9
  406096:	f005 fc41 	bl	40b91c <__aeabi_dsub>
  40609a:	4602      	mov	r2, r0
  40609c:	460b      	mov	r3, r1
  40609e:	e9ca 2300 	strd	r2, r3, [sl]
  4060a2:	4683      	mov	fp, r0
  4060a4:	460e      	mov	r6, r1
  4060a6:	465a      	mov	r2, fp
  4060a8:	4633      	mov	r3, r6
  4060aa:	4640      	mov	r0, r8
  4060ac:	4649      	mov	r1, r9
  4060ae:	f005 fc35 	bl	40b91c <__aeabi_dsub>
  4060b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4060b6:	f005 fc31 	bl	40b91c <__aeabi_dsub>
  4060ba:	2c00      	cmp	r4, #0
  4060bc:	4602      	mov	r2, r0
  4060be:	460b      	mov	r3, r1
  4060c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4060c4:	da86      	bge.n	405fd4 <__ieee754_rem_pio2+0x13c>
  4060c6:	465b      	mov	r3, fp
  4060c8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4060cc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4060d0:	e88a 0048 	stmia.w	sl, {r3, r6}
  4060d4:	f8ca 100c 	str.w	r1, [sl, #12]
  4060d8:	f8ca 0008 	str.w	r0, [sl, #8]
  4060dc:	426d      	negs	r5, r5
  4060de:	e779      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  4060e0:	54400000 	.word	0x54400000
  4060e4:	3ff921fb 	.word	0x3ff921fb
  4060e8:	1a626331 	.word	0x1a626331
  4060ec:	3dd0b461 	.word	0x3dd0b461
  4060f0:	1a600000 	.word	0x1a600000
  4060f4:	3dd0b461 	.word	0x3dd0b461
  4060f8:	2e037073 	.word	0x2e037073
  4060fc:	3ba3198a 	.word	0x3ba3198a
  406100:	6dc9c883 	.word	0x6dc9c883
  406104:	3fe45f30 	.word	0x3fe45f30
  406108:	3fe921fb 	.word	0x3fe921fb
  40610c:	4002d97b 	.word	0x4002d97b
  406110:	3ff921fb 	.word	0x3ff921fb
  406114:	413921fb 	.word	0x413921fb
  406118:	7fefffff 	.word	0x7fefffff
  40611c:	41700000 	.word	0x41700000
  406120:	0040ca54 	.word	0x0040ca54
  406124:	3fe00000 	.word	0x3fe00000
  406128:	0040c9d4 	.word	0x0040c9d4
  40612c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406130:	4640      	mov	r0, r8
  406132:	4649      	mov	r1, r9
  406134:	f005 fbf2 	bl	40b91c <__aeabi_dsub>
  406138:	153a      	asrs	r2, r7, #20
  40613a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40613e:	1ad3      	subs	r3, r2, r3
  406140:	2b10      	cmp	r3, #16
  406142:	4683      	mov	fp, r0
  406144:	460e      	mov	r6, r1
  406146:	9209      	str	r2, [sp, #36]	; 0x24
  406148:	e9ca 0100 	strd	r0, r1, [sl]
  40614c:	ddab      	ble.n	4060a6 <__ieee754_rem_pio2+0x20e>
  40614e:	a358      	add	r3, pc, #352	; (adr r3, 4062b0 <__ieee754_rem_pio2+0x418>)
  406150:	e9d3 2300 	ldrd	r2, r3, [r3]
  406154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406158:	f005 fd94 	bl	40bc84 <__aeabi_dmul>
  40615c:	4606      	mov	r6, r0
  40615e:	460f      	mov	r7, r1
  406160:	4602      	mov	r2, r0
  406162:	460b      	mov	r3, r1
  406164:	4640      	mov	r0, r8
  406166:	4649      	mov	r1, r9
  406168:	f005 fbd8 	bl	40b91c <__aeabi_dsub>
  40616c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406170:	4602      	mov	r2, r0
  406172:	460b      	mov	r3, r1
  406174:	4640      	mov	r0, r8
  406176:	4649      	mov	r1, r9
  406178:	f005 fbd0 	bl	40b91c <__aeabi_dsub>
  40617c:	4632      	mov	r2, r6
  40617e:	463b      	mov	r3, r7
  406180:	f005 fbcc 	bl	40b91c <__aeabi_dsub>
  406184:	a34c      	add	r3, pc, #304	; (adr r3, 4062b8 <__ieee754_rem_pio2+0x420>)
  406186:	e9d3 2300 	ldrd	r2, r3, [r3]
  40618a:	4606      	mov	r6, r0
  40618c:	460f      	mov	r7, r1
  40618e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406192:	f005 fd77 	bl	40bc84 <__aeabi_dmul>
  406196:	4632      	mov	r2, r6
  406198:	463b      	mov	r3, r7
  40619a:	f005 fbbf 	bl	40b91c <__aeabi_dsub>
  40619e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4061a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4061a6:	4602      	mov	r2, r0
  4061a8:	460b      	mov	r3, r1
  4061aa:	4640      	mov	r0, r8
  4061ac:	4649      	mov	r1, r9
  4061ae:	f005 fbb5 	bl	40b91c <__aeabi_dsub>
  4061b2:	460b      	mov	r3, r1
  4061b4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  4061b8:	460e      	mov	r6, r1
  4061ba:	9909      	ldr	r1, [sp, #36]	; 0x24
  4061bc:	1bcf      	subs	r7, r1, r7
  4061be:	4602      	mov	r2, r0
  4061c0:	2f31      	cmp	r7, #49	; 0x31
  4061c2:	4683      	mov	fp, r0
  4061c4:	e9ca 2300 	strd	r2, r3, [sl]
  4061c8:	dd6c      	ble.n	4062a4 <__ieee754_rem_pio2+0x40c>
  4061ca:	a33d      	add	r3, pc, #244	; (adr r3, 4062c0 <__ieee754_rem_pio2+0x428>)
  4061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4061d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4061d4:	f005 fd56 	bl	40bc84 <__aeabi_dmul>
  4061d8:	4606      	mov	r6, r0
  4061da:	460f      	mov	r7, r1
  4061dc:	4602      	mov	r2, r0
  4061de:	460b      	mov	r3, r1
  4061e0:	4640      	mov	r0, r8
  4061e2:	4649      	mov	r1, r9
  4061e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4061e8:	f005 fb98 	bl	40b91c <__aeabi_dsub>
  4061ec:	4602      	mov	r2, r0
  4061ee:	460b      	mov	r3, r1
  4061f0:	4680      	mov	r8, r0
  4061f2:	4689      	mov	r9, r1
  4061f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4061f8:	f005 fb90 	bl	40b91c <__aeabi_dsub>
  4061fc:	4632      	mov	r2, r6
  4061fe:	463b      	mov	r3, r7
  406200:	f005 fb8c 	bl	40b91c <__aeabi_dsub>
  406204:	a330      	add	r3, pc, #192	; (adr r3, 4062c8 <__ieee754_rem_pio2+0x430>)
  406206:	e9d3 2300 	ldrd	r2, r3, [r3]
  40620a:	4606      	mov	r6, r0
  40620c:	460f      	mov	r7, r1
  40620e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406212:	f005 fd37 	bl	40bc84 <__aeabi_dmul>
  406216:	4632      	mov	r2, r6
  406218:	463b      	mov	r3, r7
  40621a:	f005 fb7f 	bl	40b91c <__aeabi_dsub>
  40621e:	4602      	mov	r2, r0
  406220:	460b      	mov	r3, r1
  406222:	e9cd 2302 	strd	r2, r3, [sp, #8]
  406226:	e734      	b.n	406092 <__ieee754_rem_pio2+0x1fa>
  406228:	f005 fb7a 	bl	40b920 <__adddf3>
  40622c:	4b2a      	ldr	r3, [pc, #168]	; (4062d8 <__ieee754_rem_pio2+0x440>)
  40622e:	429f      	cmp	r7, r3
  406230:	4604      	mov	r4, r0
  406232:	460d      	mov	r5, r1
  406234:	d018      	beq.n	406268 <__ieee754_rem_pio2+0x3d0>
  406236:	a326      	add	r3, pc, #152	; (adr r3, 4062d0 <__ieee754_rem_pio2+0x438>)
  406238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40623c:	f005 fb70 	bl	40b920 <__adddf3>
  406240:	4602      	mov	r2, r0
  406242:	460b      	mov	r3, r1
  406244:	e9ca 2300 	strd	r2, r3, [sl]
  406248:	4629      	mov	r1, r5
  40624a:	4620      	mov	r0, r4
  40624c:	f005 fb66 	bl	40b91c <__aeabi_dsub>
  406250:	a31f      	add	r3, pc, #124	; (adr r3, 4062d0 <__ieee754_rem_pio2+0x438>)
  406252:	e9d3 2300 	ldrd	r2, r3, [r3]
  406256:	f005 fb63 	bl	40b920 <__adddf3>
  40625a:	f04f 35ff 	mov.w	r5, #4294967295
  40625e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  406262:	e6b7      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  406264:	2303      	movs	r3, #3
  406266:	e694      	b.n	405f92 <__ieee754_rem_pio2+0xfa>
  406268:	a311      	add	r3, pc, #68	; (adr r3, 4062b0 <__ieee754_rem_pio2+0x418>)
  40626a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40626e:	f005 fb57 	bl	40b920 <__adddf3>
  406272:	a311      	add	r3, pc, #68	; (adr r3, 4062b8 <__ieee754_rem_pio2+0x420>)
  406274:	e9d3 2300 	ldrd	r2, r3, [r3]
  406278:	460d      	mov	r5, r1
  40627a:	4604      	mov	r4, r0
  40627c:	f005 fb50 	bl	40b920 <__adddf3>
  406280:	4602      	mov	r2, r0
  406282:	460b      	mov	r3, r1
  406284:	e9ca 2300 	strd	r2, r3, [sl]
  406288:	4629      	mov	r1, r5
  40628a:	4620      	mov	r0, r4
  40628c:	f005 fb46 	bl	40b91c <__aeabi_dsub>
  406290:	a309      	add	r3, pc, #36	; (adr r3, 4062b8 <__ieee754_rem_pio2+0x420>)
  406292:	e9d3 2300 	ldrd	r2, r3, [r3]
  406296:	f005 fb43 	bl	40b920 <__adddf3>
  40629a:	f04f 35ff 	mov.w	r5, #4294967295
  40629e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4062a2:	e697      	b.n	405fd4 <__ieee754_rem_pio2+0x13c>
  4062a4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4062a8:	e6fd      	b.n	4060a6 <__ieee754_rem_pio2+0x20e>
  4062aa:	bf00      	nop
  4062ac:	f3af 8000 	nop.w
  4062b0:	1a600000 	.word	0x1a600000
  4062b4:	3dd0b461 	.word	0x3dd0b461
  4062b8:	2e037073 	.word	0x2e037073
  4062bc:	3ba3198a 	.word	0x3ba3198a
  4062c0:	2e000000 	.word	0x2e000000
  4062c4:	3ba3198a 	.word	0x3ba3198a
  4062c8:	252049c1 	.word	0x252049c1
  4062cc:	397b839a 	.word	0x397b839a
  4062d0:	1a626331 	.word	0x1a626331
  4062d4:	3dd0b461 	.word	0x3dd0b461
  4062d8:	3ff921fb 	.word	0x3ff921fb
  4062dc:	00000000 	.word	0x00000000

004062e0 <__kernel_cos>:
  4062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4062e8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4062ec:	b085      	sub	sp, #20
  4062ee:	460c      	mov	r4, r1
  4062f0:	4692      	mov	sl, r2
  4062f2:	469b      	mov	fp, r3
  4062f4:	4605      	mov	r5, r0
  4062f6:	da6b      	bge.n	4063d0 <__kernel_cos+0xf0>
  4062f8:	f005 ff74 	bl	40c1e4 <__aeabi_d2iz>
  4062fc:	2800      	cmp	r0, #0
  4062fe:	f000 80e8 	beq.w	4064d2 <__kernel_cos+0x1f2>
  406302:	462a      	mov	r2, r5
  406304:	4623      	mov	r3, r4
  406306:	4628      	mov	r0, r5
  406308:	4621      	mov	r1, r4
  40630a:	f005 fcbb 	bl	40bc84 <__aeabi_dmul>
  40630e:	a374      	add	r3, pc, #464	; (adr r3, 4064e0 <__kernel_cos+0x200>)
  406310:	e9d3 2300 	ldrd	r2, r3, [r3]
  406314:	4680      	mov	r8, r0
  406316:	4689      	mov	r9, r1
  406318:	f005 fcb4 	bl	40bc84 <__aeabi_dmul>
  40631c:	a372      	add	r3, pc, #456	; (adr r3, 4064e8 <__kernel_cos+0x208>)
  40631e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406322:	f005 fafd 	bl	40b920 <__adddf3>
  406326:	4642      	mov	r2, r8
  406328:	464b      	mov	r3, r9
  40632a:	f005 fcab 	bl	40bc84 <__aeabi_dmul>
  40632e:	a370      	add	r3, pc, #448	; (adr r3, 4064f0 <__kernel_cos+0x210>)
  406330:	e9d3 2300 	ldrd	r2, r3, [r3]
  406334:	f005 faf2 	bl	40b91c <__aeabi_dsub>
  406338:	4642      	mov	r2, r8
  40633a:	464b      	mov	r3, r9
  40633c:	f005 fca2 	bl	40bc84 <__aeabi_dmul>
  406340:	a36d      	add	r3, pc, #436	; (adr r3, 4064f8 <__kernel_cos+0x218>)
  406342:	e9d3 2300 	ldrd	r2, r3, [r3]
  406346:	f005 faeb 	bl	40b920 <__adddf3>
  40634a:	4642      	mov	r2, r8
  40634c:	464b      	mov	r3, r9
  40634e:	f005 fc99 	bl	40bc84 <__aeabi_dmul>
  406352:	a36b      	add	r3, pc, #428	; (adr r3, 406500 <__kernel_cos+0x220>)
  406354:	e9d3 2300 	ldrd	r2, r3, [r3]
  406358:	f005 fae0 	bl	40b91c <__aeabi_dsub>
  40635c:	4642      	mov	r2, r8
  40635e:	464b      	mov	r3, r9
  406360:	f005 fc90 	bl	40bc84 <__aeabi_dmul>
  406364:	a368      	add	r3, pc, #416	; (adr r3, 406508 <__kernel_cos+0x228>)
  406366:	e9d3 2300 	ldrd	r2, r3, [r3]
  40636a:	f005 fad9 	bl	40b920 <__adddf3>
  40636e:	4642      	mov	r2, r8
  406370:	464b      	mov	r3, r9
  406372:	f005 fc87 	bl	40bc84 <__aeabi_dmul>
  406376:	e9cd 0100 	strd	r0, r1, [sp]
  40637a:	2200      	movs	r2, #0
  40637c:	4b64      	ldr	r3, [pc, #400]	; (406510 <__kernel_cos+0x230>)
  40637e:	4640      	mov	r0, r8
  406380:	4649      	mov	r1, r9
  406382:	f005 fc7f 	bl	40bc84 <__aeabi_dmul>
  406386:	e9dd 2300 	ldrd	r2, r3, [sp]
  40638a:	4606      	mov	r6, r0
  40638c:	460f      	mov	r7, r1
  40638e:	4640      	mov	r0, r8
  406390:	4649      	mov	r1, r9
  406392:	f005 fc77 	bl	40bc84 <__aeabi_dmul>
  406396:	4652      	mov	r2, sl
  406398:	4680      	mov	r8, r0
  40639a:	4689      	mov	r9, r1
  40639c:	465b      	mov	r3, fp
  40639e:	4628      	mov	r0, r5
  4063a0:	4621      	mov	r1, r4
  4063a2:	f005 fc6f 	bl	40bc84 <__aeabi_dmul>
  4063a6:	4602      	mov	r2, r0
  4063a8:	460b      	mov	r3, r1
  4063aa:	4640      	mov	r0, r8
  4063ac:	4649      	mov	r1, r9
  4063ae:	f005 fab5 	bl	40b91c <__aeabi_dsub>
  4063b2:	4602      	mov	r2, r0
  4063b4:	460b      	mov	r3, r1
  4063b6:	4630      	mov	r0, r6
  4063b8:	4639      	mov	r1, r7
  4063ba:	f005 faaf 	bl	40b91c <__aeabi_dsub>
  4063be:	4602      	mov	r2, r0
  4063c0:	460b      	mov	r3, r1
  4063c2:	2000      	movs	r0, #0
  4063c4:	4953      	ldr	r1, [pc, #332]	; (406514 <__kernel_cos+0x234>)
  4063c6:	f005 faa9 	bl	40b91c <__aeabi_dsub>
  4063ca:	b005      	add	sp, #20
  4063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4063d0:	4602      	mov	r2, r0
  4063d2:	460b      	mov	r3, r1
  4063d4:	f005 fc56 	bl	40bc84 <__aeabi_dmul>
  4063d8:	a341      	add	r3, pc, #260	; (adr r3, 4064e0 <__kernel_cos+0x200>)
  4063da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063de:	4680      	mov	r8, r0
  4063e0:	4689      	mov	r9, r1
  4063e2:	f005 fc4f 	bl	40bc84 <__aeabi_dmul>
  4063e6:	a340      	add	r3, pc, #256	; (adr r3, 4064e8 <__kernel_cos+0x208>)
  4063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063ec:	f005 fa98 	bl	40b920 <__adddf3>
  4063f0:	4642      	mov	r2, r8
  4063f2:	464b      	mov	r3, r9
  4063f4:	f005 fc46 	bl	40bc84 <__aeabi_dmul>
  4063f8:	a33d      	add	r3, pc, #244	; (adr r3, 4064f0 <__kernel_cos+0x210>)
  4063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063fe:	f005 fa8d 	bl	40b91c <__aeabi_dsub>
  406402:	4642      	mov	r2, r8
  406404:	464b      	mov	r3, r9
  406406:	f005 fc3d 	bl	40bc84 <__aeabi_dmul>
  40640a:	a33b      	add	r3, pc, #236	; (adr r3, 4064f8 <__kernel_cos+0x218>)
  40640c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406410:	f005 fa86 	bl	40b920 <__adddf3>
  406414:	4642      	mov	r2, r8
  406416:	464b      	mov	r3, r9
  406418:	f005 fc34 	bl	40bc84 <__aeabi_dmul>
  40641c:	a338      	add	r3, pc, #224	; (adr r3, 406500 <__kernel_cos+0x220>)
  40641e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406422:	f005 fa7b 	bl	40b91c <__aeabi_dsub>
  406426:	4642      	mov	r2, r8
  406428:	464b      	mov	r3, r9
  40642a:	f005 fc2b 	bl	40bc84 <__aeabi_dmul>
  40642e:	a336      	add	r3, pc, #216	; (adr r3, 406508 <__kernel_cos+0x228>)
  406430:	e9d3 2300 	ldrd	r2, r3, [r3]
  406434:	f005 fa74 	bl	40b920 <__adddf3>
  406438:	464b      	mov	r3, r9
  40643a:	4642      	mov	r2, r8
  40643c:	f005 fc22 	bl	40bc84 <__aeabi_dmul>
  406440:	4b35      	ldr	r3, [pc, #212]	; (406518 <__kernel_cos+0x238>)
  406442:	429e      	cmp	r6, r3
  406444:	e9cd 0100 	strd	r0, r1, [sp]
  406448:	dd97      	ble.n	40637a <__kernel_cos+0x9a>
  40644a:	4b34      	ldr	r3, [pc, #208]	; (40651c <__kernel_cos+0x23c>)
  40644c:	429e      	cmp	r6, r3
  40644e:	f04f 0200 	mov.w	r2, #0
  406452:	dc38      	bgt.n	4064c6 <__kernel_cos+0x1e6>
  406454:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  406458:	2000      	movs	r0, #0
  40645a:	492e      	ldr	r1, [pc, #184]	; (406514 <__kernel_cos+0x234>)
  40645c:	4616      	mov	r6, r2
  40645e:	461f      	mov	r7, r3
  406460:	f005 fa5c 	bl	40b91c <__aeabi_dsub>
  406464:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406468:	2200      	movs	r2, #0
  40646a:	4b29      	ldr	r3, [pc, #164]	; (406510 <__kernel_cos+0x230>)
  40646c:	4640      	mov	r0, r8
  40646e:	4649      	mov	r1, r9
  406470:	f005 fc08 	bl	40bc84 <__aeabi_dmul>
  406474:	4632      	mov	r2, r6
  406476:	463b      	mov	r3, r7
  406478:	f005 fa50 	bl	40b91c <__aeabi_dsub>
  40647c:	e9dd 2300 	ldrd	r2, r3, [sp]
  406480:	4606      	mov	r6, r0
  406482:	460f      	mov	r7, r1
  406484:	4640      	mov	r0, r8
  406486:	4649      	mov	r1, r9
  406488:	f005 fbfc 	bl	40bc84 <__aeabi_dmul>
  40648c:	4652      	mov	r2, sl
  40648e:	4680      	mov	r8, r0
  406490:	4689      	mov	r9, r1
  406492:	465b      	mov	r3, fp
  406494:	4628      	mov	r0, r5
  406496:	4621      	mov	r1, r4
  406498:	f005 fbf4 	bl	40bc84 <__aeabi_dmul>
  40649c:	4602      	mov	r2, r0
  40649e:	460b      	mov	r3, r1
  4064a0:	4640      	mov	r0, r8
  4064a2:	4649      	mov	r1, r9
  4064a4:	f005 fa3a 	bl	40b91c <__aeabi_dsub>
  4064a8:	4602      	mov	r2, r0
  4064aa:	460b      	mov	r3, r1
  4064ac:	4630      	mov	r0, r6
  4064ae:	4639      	mov	r1, r7
  4064b0:	f005 fa34 	bl	40b91c <__aeabi_dsub>
  4064b4:	4602      	mov	r2, r0
  4064b6:	460b      	mov	r3, r1
  4064b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4064bc:	f005 fa2e 	bl	40b91c <__aeabi_dsub>
  4064c0:	b005      	add	sp, #20
  4064c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c6:	4b16      	ldr	r3, [pc, #88]	; (406520 <__kernel_cos+0x240>)
  4064c8:	4f16      	ldr	r7, [pc, #88]	; (406524 <__kernel_cos+0x244>)
  4064ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4064ce:	2600      	movs	r6, #0
  4064d0:	e7ca      	b.n	406468 <__kernel_cos+0x188>
  4064d2:	4910      	ldr	r1, [pc, #64]	; (406514 <__kernel_cos+0x234>)
  4064d4:	2000      	movs	r0, #0
  4064d6:	b005      	add	sp, #20
  4064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064dc:	f3af 8000 	nop.w
  4064e0:	be8838d4 	.word	0xbe8838d4
  4064e4:	bda8fae9 	.word	0xbda8fae9
  4064e8:	bdb4b1c4 	.word	0xbdb4b1c4
  4064ec:	3e21ee9e 	.word	0x3e21ee9e
  4064f0:	809c52ad 	.word	0x809c52ad
  4064f4:	3e927e4f 	.word	0x3e927e4f
  4064f8:	19cb1590 	.word	0x19cb1590
  4064fc:	3efa01a0 	.word	0x3efa01a0
  406500:	16c15177 	.word	0x16c15177
  406504:	3f56c16c 	.word	0x3f56c16c
  406508:	5555554c 	.word	0x5555554c
  40650c:	3fa55555 	.word	0x3fa55555
  406510:	3fe00000 	.word	0x3fe00000
  406514:	3ff00000 	.word	0x3ff00000
  406518:	3fd33332 	.word	0x3fd33332
  40651c:	3fe90000 	.word	0x3fe90000
  406520:	3fe70000 	.word	0x3fe70000
  406524:	3fd20000 	.word	0x3fd20000

00406528 <__kernel_rem_pio2>:
  406528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40652c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  406530:	4c9c      	ldr	r4, [pc, #624]	; (4067a4 <__kernel_rem_pio2+0x27c>)
  406532:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  406534:	4d9c      	ldr	r5, [pc, #624]	; (4067a8 <__kernel_rem_pio2+0x280>)
  406536:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  40653a:	9405      	str	r4, [sp, #20]
  40653c:	4626      	mov	r6, r4
  40653e:	1ed4      	subs	r4, r2, #3
  406540:	fb85 7504 	smull	r7, r5, r5, r4
  406544:	17e4      	asrs	r4, r4, #31
  406546:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  40654a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40654e:	461d      	mov	r5, r3
  406550:	9308      	str	r3, [sp, #32]
  406552:	1c63      	adds	r3, r4, #1
  406554:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  406558:	3d01      	subs	r5, #1
  40655a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40655e:	9304      	str	r3, [sp, #16]
  406560:	462b      	mov	r3, r5
  406562:	9409      	str	r4, [sp, #36]	; 0x24
  406564:	9502      	str	r5, [sp, #8]
  406566:	1b65      	subs	r5, r4, r5
  406568:	18f4      	adds	r4, r6, r3
  40656a:	9003      	str	r0, [sp, #12]
  40656c:	9106      	str	r1, [sp, #24]
  40656e:	d41a      	bmi.n	4065a6 <__kernel_rem_pio2+0x7e>
  406570:	442c      	add	r4, r5
  406572:	3401      	adds	r4, #1
  406574:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  406578:	2600      	movs	r6, #0
  40657a:	2700      	movs	r7, #0
  40657c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  406580:	e008      	b.n	406594 <__kernel_rem_pio2+0x6c>
  406582:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  406586:	f005 fb17 	bl	40bbb8 <__aeabi_i2d>
  40658a:	3501      	adds	r5, #1
  40658c:	42a5      	cmp	r5, r4
  40658e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  406592:	d008      	beq.n	4065a6 <__kernel_rem_pio2+0x7e>
  406594:	2d00      	cmp	r5, #0
  406596:	daf4      	bge.n	406582 <__kernel_rem_pio2+0x5a>
  406598:	3501      	adds	r5, #1
  40659a:	4630      	mov	r0, r6
  40659c:	4639      	mov	r1, r7
  40659e:	42a5      	cmp	r5, r4
  4065a0:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4065a4:	d1f6      	bne.n	406594 <__kernel_rem_pio2+0x6c>
  4065a6:	9b05      	ldr	r3, [sp, #20]
  4065a8:	2b00      	cmp	r3, #0
  4065aa:	db2e      	blt.n	40660a <__kernel_rem_pio2+0xe2>
  4065ac:	9b08      	ldr	r3, [sp, #32]
  4065ae:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4065b2:	9b03      	ldr	r3, [sp, #12]
  4065b4:	f1a9 0808 	sub.w	r8, r9, #8
  4065b8:	4498      	add	r8, r3
  4065ba:	ab20      	add	r3, sp, #128	; 0x80
  4065bc:	4499      	add	r9, r3
  4065be:	9b05      	ldr	r3, [sp, #20]
  4065c0:	aa70      	add	r2, sp, #448	; 0x1c0
  4065c2:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4065c6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4065ca:	9b02      	ldr	r3, [sp, #8]
  4065cc:	2b00      	cmp	r3, #0
  4065ce:	f2c0 830f 	blt.w	406bf0 <__kernel_rem_pio2+0x6c8>
  4065d2:	9b03      	ldr	r3, [sp, #12]
  4065d4:	464d      	mov	r5, r9
  4065d6:	f1a3 0408 	sub.w	r4, r3, #8
  4065da:	2600      	movs	r6, #0
  4065dc:	2700      	movs	r7, #0
  4065de:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4065e2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4065e6:	f005 fb4d 	bl	40bc84 <__aeabi_dmul>
  4065ea:	4602      	mov	r2, r0
  4065ec:	460b      	mov	r3, r1
  4065ee:	4630      	mov	r0, r6
  4065f0:	4639      	mov	r1, r7
  4065f2:	f005 f995 	bl	40b920 <__adddf3>
  4065f6:	4544      	cmp	r4, r8
  4065f8:	4606      	mov	r6, r0
  4065fa:	460f      	mov	r7, r1
  4065fc:	d1ef      	bne.n	4065de <__kernel_rem_pio2+0xb6>
  4065fe:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  406602:	45da      	cmp	sl, fp
  406604:	f109 0908 	add.w	r9, r9, #8
  406608:	d1df      	bne.n	4065ca <__kernel_rem_pio2+0xa2>
  40660a:	9805      	ldr	r0, [sp, #20]
  40660c:	9a08      	ldr	r2, [sp, #32]
  40660e:	9000      	str	r0, [sp, #0]
  406610:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  406614:	3b01      	subs	r3, #1
  406616:	009b      	lsls	r3, r3, #2
  406618:	ac0c      	add	r4, sp, #48	; 0x30
  40661a:	1f19      	subs	r1, r3, #4
  40661c:	4423      	add	r3, r4
  40661e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  406622:	930b      	str	r3, [sp, #44]	; 0x2c
  406624:	9b03      	ldr	r3, [sp, #12]
  406626:	3a01      	subs	r2, #1
  406628:	4421      	add	r1, r4
  40662a:	910a      	str	r1, [sp, #40]	; 0x28
  40662c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  406630:	9a00      	ldr	r2, [sp, #0]
  406632:	a998      	add	r1, sp, #608	; 0x260
  406634:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  406638:	2a00      	cmp	r2, #0
  40663a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  40663e:	4613      	mov	r3, r2
  406640:	dd2b      	ble.n	40669a <__kernel_rem_pio2+0x172>
  406642:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  406646:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  40664a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  40664e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  406652:	2200      	movs	r2, #0
  406654:	4b55      	ldr	r3, [pc, #340]	; (4067ac <__kernel_rem_pio2+0x284>)
  406656:	4620      	mov	r0, r4
  406658:	4629      	mov	r1, r5
  40665a:	f005 fb13 	bl	40bc84 <__aeabi_dmul>
  40665e:	f005 fdc1 	bl	40c1e4 <__aeabi_d2iz>
  406662:	f005 faa9 	bl	40bbb8 <__aeabi_i2d>
  406666:	2200      	movs	r2, #0
  406668:	4b51      	ldr	r3, [pc, #324]	; (4067b0 <__kernel_rem_pio2+0x288>)
  40666a:	4606      	mov	r6, r0
  40666c:	460f      	mov	r7, r1
  40666e:	f005 fb09 	bl	40bc84 <__aeabi_dmul>
  406672:	4602      	mov	r2, r0
  406674:	460b      	mov	r3, r1
  406676:	4620      	mov	r0, r4
  406678:	4629      	mov	r1, r5
  40667a:	f005 f94f 	bl	40b91c <__aeabi_dsub>
  40667e:	f005 fdb1 	bl	40c1e4 <__aeabi_d2iz>
  406682:	e878 2302 	ldrd	r2, r3, [r8], #-8
  406686:	f849 0f04 	str.w	r0, [r9, #4]!
  40668a:	4639      	mov	r1, r7
  40668c:	4630      	mov	r0, r6
  40668e:	f005 f947 	bl	40b920 <__adddf3>
  406692:	45d0      	cmp	r8, sl
  406694:	4604      	mov	r4, r0
  406696:	460d      	mov	r5, r1
  406698:	d1db      	bne.n	406652 <__kernel_rem_pio2+0x12a>
  40669a:	f8dd 9010 	ldr.w	r9, [sp, #16]
  40669e:	4620      	mov	r0, r4
  4066a0:	4629      	mov	r1, r5
  4066a2:	464a      	mov	r2, r9
  4066a4:	f000 fe74 	bl	407390 <scalbn>
  4066a8:	2200      	movs	r2, #0
  4066aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4066ae:	4604      	mov	r4, r0
  4066b0:	460d      	mov	r5, r1
  4066b2:	f005 fae7 	bl	40bc84 <__aeabi_dmul>
  4066b6:	f000 fddf 	bl	407278 <floor>
  4066ba:	2200      	movs	r2, #0
  4066bc:	4b3d      	ldr	r3, [pc, #244]	; (4067b4 <__kernel_rem_pio2+0x28c>)
  4066be:	f005 fae1 	bl	40bc84 <__aeabi_dmul>
  4066c2:	4602      	mov	r2, r0
  4066c4:	460b      	mov	r3, r1
  4066c6:	4620      	mov	r0, r4
  4066c8:	4629      	mov	r1, r5
  4066ca:	f005 f927 	bl	40b91c <__aeabi_dsub>
  4066ce:	460d      	mov	r5, r1
  4066d0:	4604      	mov	r4, r0
  4066d2:	f005 fd87 	bl	40c1e4 <__aeabi_d2iz>
  4066d6:	4680      	mov	r8, r0
  4066d8:	f005 fa6e 	bl	40bbb8 <__aeabi_i2d>
  4066dc:	460b      	mov	r3, r1
  4066de:	4602      	mov	r2, r0
  4066e0:	4629      	mov	r1, r5
  4066e2:	4620      	mov	r0, r4
  4066e4:	f005 f91a 	bl	40b91c <__aeabi_dsub>
  4066e8:	464b      	mov	r3, r9
  4066ea:	2b00      	cmp	r3, #0
  4066ec:	4606      	mov	r6, r0
  4066ee:	460f      	mov	r7, r1
  4066f0:	f340 80f7 	ble.w	4068e2 <__kernel_rem_pio2+0x3ba>
  4066f4:	9a00      	ldr	r2, [sp, #0]
  4066f6:	a90c      	add	r1, sp, #48	; 0x30
  4066f8:	3a01      	subs	r2, #1
  4066fa:	f1c9 0318 	rsb	r3, r9, #24
  4066fe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  406702:	fa45 f103 	asr.w	r1, r5, r3
  406706:	fa01 f303 	lsl.w	r3, r1, r3
  40670a:	a80c      	add	r0, sp, #48	; 0x30
  40670c:	1aeb      	subs	r3, r5, r3
  40670e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  406712:	f1c9 0517 	rsb	r5, r9, #23
  406716:	4488      	add	r8, r1
  406718:	fa43 f505 	asr.w	r5, r3, r5
  40671c:	2d00      	cmp	r5, #0
  40671e:	dd63      	ble.n	4067e8 <__kernel_rem_pio2+0x2c0>
  406720:	9b00      	ldr	r3, [sp, #0]
  406722:	2b00      	cmp	r3, #0
  406724:	f108 0801 	add.w	r8, r8, #1
  406728:	f340 8281 	ble.w	406c2e <__kernel_rem_pio2+0x706>
  40672c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40672e:	2c00      	cmp	r4, #0
  406730:	f000 8318 	beq.w	406d64 <__kernel_rem_pio2+0x83c>
  406734:	2001      	movs	r0, #1
  406736:	2300      	movs	r3, #0
  406738:	aa0c      	add	r2, sp, #48	; 0x30
  40673a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  40673e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  406742:	9a00      	ldr	r2, [sp, #0]
  406744:	4282      	cmp	r2, r0
  406746:	dd19      	ble.n	40677c <__kernel_rem_pio2+0x254>
  406748:	aa0c      	add	r2, sp, #48	; 0x30
  40674a:	ac0c      	add	r4, sp, #48	; 0x30
  40674c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  406750:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  406754:	1a51      	subs	r1, r2, r1
  406756:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  40675a:	9900      	ldr	r1, [sp, #0]
  40675c:	3302      	adds	r3, #2
  40675e:	4299      	cmp	r1, r3
  406760:	dd0c      	ble.n	40677c <__kernel_rem_pio2+0x254>
  406762:	4610      	mov	r0, r2
  406764:	9a00      	ldr	r2, [sp, #0]
  406766:	a90c      	add	r1, sp, #48	; 0x30
  406768:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40676c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  406770:	681a      	ldr	r2, [r3, #0]
  406772:	1a82      	subs	r2, r0, r2
  406774:	f843 2b04 	str.w	r2, [r3], #4
  406778:	428b      	cmp	r3, r1
  40677a:	d1f9      	bne.n	406770 <__kernel_rem_pio2+0x248>
  40677c:	9b04      	ldr	r3, [sp, #16]
  40677e:	2b00      	cmp	r3, #0
  406780:	dd1a      	ble.n	4067b8 <__kernel_rem_pio2+0x290>
  406782:	9b04      	ldr	r3, [sp, #16]
  406784:	2b01      	cmp	r3, #1
  406786:	f04f 0401 	mov.w	r4, #1
  40678a:	f040 8258 	bne.w	406c3e <__kernel_rem_pio2+0x716>
  40678e:	9b00      	ldr	r3, [sp, #0]
  406790:	1e5a      	subs	r2, r3, #1
  406792:	ab0c      	add	r3, sp, #48	; 0x30
  406794:	a90c      	add	r1, sp, #48	; 0x30
  406796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40679a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40679e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4067a2:	e258      	b.n	406c56 <__kernel_rem_pio2+0x72e>
  4067a4:	0040cba0 	.word	0x0040cba0
  4067a8:	2aaaaaab 	.word	0x2aaaaaab
  4067ac:	3e700000 	.word	0x3e700000
  4067b0:	41700000 	.word	0x41700000
  4067b4:	40200000 	.word	0x40200000
  4067b8:	2d02      	cmp	r5, #2
  4067ba:	d115      	bne.n	4067e8 <__kernel_rem_pio2+0x2c0>
  4067bc:	4632      	mov	r2, r6
  4067be:	463b      	mov	r3, r7
  4067c0:	2000      	movs	r0, #0
  4067c2:	4997      	ldr	r1, [pc, #604]	; (406a20 <__kernel_rem_pio2+0x4f8>)
  4067c4:	f005 f8aa 	bl	40b91c <__aeabi_dsub>
  4067c8:	4606      	mov	r6, r0
  4067ca:	460f      	mov	r7, r1
  4067cc:	9a04      	ldr	r2, [sp, #16]
  4067ce:	4994      	ldr	r1, [pc, #592]	; (406a20 <__kernel_rem_pio2+0x4f8>)
  4067d0:	2000      	movs	r0, #0
  4067d2:	f000 fddd 	bl	407390 <scalbn>
  4067d6:	4602      	mov	r2, r0
  4067d8:	460b      	mov	r3, r1
  4067da:	4630      	mov	r0, r6
  4067dc:	4639      	mov	r1, r7
  4067de:	f005 f89d 	bl	40b91c <__aeabi_dsub>
  4067e2:	2502      	movs	r5, #2
  4067e4:	4606      	mov	r6, r0
  4067e6:	460f      	mov	r7, r1
  4067e8:	2200      	movs	r2, #0
  4067ea:	2300      	movs	r3, #0
  4067ec:	4630      	mov	r0, r6
  4067ee:	4639      	mov	r1, r7
  4067f0:	f005 fcb0 	bl	40c154 <__aeabi_dcmpeq>
  4067f4:	2800      	cmp	r0, #0
  4067f6:	f000 8252 	beq.w	406c9e <__kernel_rem_pio2+0x776>
  4067fa:	9a00      	ldr	r2, [sp, #0]
  4067fc:	9b05      	ldr	r3, [sp, #20]
  4067fe:	1e50      	subs	r0, r2, #1
  406800:	4283      	cmp	r3, r0
  406802:	dc0f      	bgt.n	406824 <__kernel_rem_pio2+0x2fc>
  406804:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  406808:	3b01      	subs	r3, #1
  40680a:	aa0c      	add	r2, sp, #48	; 0x30
  40680c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40680e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406812:	2200      	movs	r2, #0
  406814:	f853 1904 	ldr.w	r1, [r3], #-4
  406818:	42a3      	cmp	r3, r4
  40681a:	ea42 0201 	orr.w	r2, r2, r1
  40681e:	d1f9      	bne.n	406814 <__kernel_rem_pio2+0x2ec>
  406820:	2a00      	cmp	r2, #0
  406822:	d16f      	bne.n	406904 <__kernel_rem_pio2+0x3dc>
  406824:	9b05      	ldr	r3, [sp, #20]
  406826:	aa0c      	add	r2, sp, #48	; 0x30
  406828:	3b01      	subs	r3, #1
  40682a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40682e:	2b00      	cmp	r3, #0
  406830:	f040 8233 	bne.w	406c9a <__kernel_rem_pio2+0x772>
  406834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406836:	2301      	movs	r3, #1
  406838:	f852 1904 	ldr.w	r1, [r2], #-4
  40683c:	3301      	adds	r3, #1
  40683e:	2900      	cmp	r1, #0
  406840:	d0fa      	beq.n	406838 <__kernel_rem_pio2+0x310>
  406842:	9a00      	ldr	r2, [sp, #0]
  406844:	18d3      	adds	r3, r2, r3
  406846:	f102 0a01 	add.w	sl, r2, #1
  40684a:	459a      	cmp	sl, r3
  40684c:	9307      	str	r3, [sp, #28]
  40684e:	dc3d      	bgt.n	4068cc <__kernel_rem_pio2+0x3a4>
  406850:	9b00      	ldr	r3, [sp, #0]
  406852:	9908      	ldr	r1, [sp, #32]
  406854:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406856:	440b      	add	r3, r1
  406858:	9907      	ldr	r1, [sp, #28]
  40685a:	eb0a 0802 	add.w	r8, sl, r2
  40685e:	4699      	mov	r9, r3
  406860:	ab20      	add	r3, sp, #128	; 0x80
  406862:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  406866:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  40686a:	188b      	adds	r3, r1, r2
  40686c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  40686e:	f108 38ff 	add.w	r8, r8, #4294967295
  406872:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  406876:	aa70      	add	r2, sp, #448	; 0x1c0
  406878:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  40687c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  40687e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406882:	9300      	str	r3, [sp, #0]
  406884:	f858 0f04 	ldr.w	r0, [r8, #4]!
  406888:	f005 f996 	bl	40bbb8 <__aeabi_i2d>
  40688c:	9b02      	ldr	r3, [sp, #8]
  40688e:	2b00      	cmp	r3, #0
  406890:	e8e9 0102 	strd	r0, r1, [r9], #8
  406894:	db1d      	blt.n	4068d2 <__kernel_rem_pio2+0x3aa>
  406896:	9b03      	ldr	r3, [sp, #12]
  406898:	464d      	mov	r5, r9
  40689a:	f1a3 0408 	sub.w	r4, r3, #8
  40689e:	2600      	movs	r6, #0
  4068a0:	2700      	movs	r7, #0
  4068a2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4068a6:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4068aa:	f005 f9eb 	bl	40bc84 <__aeabi_dmul>
  4068ae:	4602      	mov	r2, r0
  4068b0:	460b      	mov	r3, r1
  4068b2:	4630      	mov	r0, r6
  4068b4:	4639      	mov	r1, r7
  4068b6:	f005 f833 	bl	40b920 <__adddf3>
  4068ba:	455c      	cmp	r4, fp
  4068bc:	4606      	mov	r6, r0
  4068be:	460f      	mov	r7, r1
  4068c0:	d1ef      	bne.n	4068a2 <__kernel_rem_pio2+0x37a>
  4068c2:	9b00      	ldr	r3, [sp, #0]
  4068c4:	4598      	cmp	r8, r3
  4068c6:	e8ea 6702 	strd	r6, r7, [sl], #8
  4068ca:	d1db      	bne.n	406884 <__kernel_rem_pio2+0x35c>
  4068cc:	9b07      	ldr	r3, [sp, #28]
  4068ce:	9300      	str	r3, [sp, #0]
  4068d0:	e6ae      	b.n	406630 <__kernel_rem_pio2+0x108>
  4068d2:	9b00      	ldr	r3, [sp, #0]
  4068d4:	2600      	movs	r6, #0
  4068d6:	2700      	movs	r7, #0
  4068d8:	4598      	cmp	r8, r3
  4068da:	e8ea 6702 	strd	r6, r7, [sl], #8
  4068de:	d1d1      	bne.n	406884 <__kernel_rem_pio2+0x35c>
  4068e0:	e7f4      	b.n	4068cc <__kernel_rem_pio2+0x3a4>
  4068e2:	d106      	bne.n	4068f2 <__kernel_rem_pio2+0x3ca>
  4068e4:	9b00      	ldr	r3, [sp, #0]
  4068e6:	aa0c      	add	r2, sp, #48	; 0x30
  4068e8:	3b01      	subs	r3, #1
  4068ea:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  4068ee:	15ed      	asrs	r5, r5, #23
  4068f0:	e714      	b.n	40671c <__kernel_rem_pio2+0x1f4>
  4068f2:	2200      	movs	r2, #0
  4068f4:	4b4b      	ldr	r3, [pc, #300]	; (406a24 <__kernel_rem_pio2+0x4fc>)
  4068f6:	f005 fc4b 	bl	40c190 <__aeabi_dcmpge>
  4068fa:	2800      	cmp	r0, #0
  4068fc:	f040 8182 	bne.w	406c04 <__kernel_rem_pio2+0x6dc>
  406900:	4605      	mov	r5, r0
  406902:	e771      	b.n	4067e8 <__kernel_rem_pio2+0x2c0>
  406904:	a90c      	add	r1, sp, #48	; 0x30
  406906:	9502      	str	r5, [sp, #8]
  406908:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  40690c:	9904      	ldr	r1, [sp, #16]
  40690e:	f8cd 801c 	str.w	r8, [sp, #28]
  406912:	3918      	subs	r1, #24
  406914:	4602      	mov	r2, r0
  406916:	9000      	str	r0, [sp, #0]
  406918:	9104      	str	r1, [sp, #16]
  40691a:	b96b      	cbnz	r3, 406938 <__kernel_rem_pio2+0x410>
  40691c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  406920:	3b01      	subs	r3, #1
  406922:	a80c      	add	r0, sp, #48	; 0x30
  406924:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  406928:	f853 0904 	ldr.w	r0, [r3], #-4
  40692c:	3a01      	subs	r2, #1
  40692e:	3918      	subs	r1, #24
  406930:	2800      	cmp	r0, #0
  406932:	d0f9      	beq.n	406928 <__kernel_rem_pio2+0x400>
  406934:	9200      	str	r2, [sp, #0]
  406936:	9104      	str	r1, [sp, #16]
  406938:	9a04      	ldr	r2, [sp, #16]
  40693a:	4939      	ldr	r1, [pc, #228]	; (406a20 <__kernel_rem_pio2+0x4f8>)
  40693c:	2000      	movs	r0, #0
  40693e:	f000 fd27 	bl	407390 <scalbn>
  406942:	9b00      	ldr	r3, [sp, #0]
  406944:	2b00      	cmp	r3, #0
  406946:	4604      	mov	r4, r0
  406948:	460d      	mov	r5, r1
  40694a:	f2c0 8203 	blt.w	406d54 <__kernel_rem_pio2+0x82c>
  40694e:	00da      	lsls	r2, r3, #3
  406950:	a970      	add	r1, sp, #448	; 0x1c0
  406952:	eb01 0b02 	add.w	fp, r1, r2
  406956:	9204      	str	r2, [sp, #16]
  406958:	aa0c      	add	r2, sp, #48	; 0x30
  40695a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  40695e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 406a28 <__kernel_rem_pio2+0x500>
  406962:	f10b 0708 	add.w	r7, fp, #8
  406966:	3604      	adds	r6, #4
  406968:	f04f 0800 	mov.w	r8, #0
  40696c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  406970:	f005 f922 	bl	40bbb8 <__aeabi_i2d>
  406974:	4622      	mov	r2, r4
  406976:	462b      	mov	r3, r5
  406978:	f005 f984 	bl	40bc84 <__aeabi_dmul>
  40697c:	464b      	mov	r3, r9
  40697e:	e967 0102 	strd	r0, r1, [r7, #-8]!
  406982:	4642      	mov	r2, r8
  406984:	4620      	mov	r0, r4
  406986:	4629      	mov	r1, r5
  406988:	f005 f97c 	bl	40bc84 <__aeabi_dmul>
  40698c:	ab0c      	add	r3, sp, #48	; 0x30
  40698e:	429e      	cmp	r6, r3
  406990:	4604      	mov	r4, r0
  406992:	460d      	mov	r5, r1
  406994:	d1ea      	bne.n	40696c <__kernel_rem_pio2+0x444>
  406996:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  40699a:	f8cd a00c 	str.w	sl, [sp, #12]
  40699e:	f8dd a014 	ldr.w	sl, [sp, #20]
  4069a2:	f04f 0900 	mov.w	r9, #0
  4069a6:	f1ba 0f00 	cmp.w	sl, #0
  4069aa:	f2c0 813d 	blt.w	406c28 <__kernel_rem_pio2+0x700>
  4069ae:	f8df 807c 	ldr.w	r8, [pc, #124]	; 406a2c <__kernel_rem_pio2+0x504>
  4069b2:	465d      	mov	r5, fp
  4069b4:	a118      	add	r1, pc, #96	; (adr r1, 406a18 <__kernel_rem_pio2+0x4f0>)
  4069b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4069ba:	2600      	movs	r6, #0
  4069bc:	2700      	movs	r7, #0
  4069be:	2400      	movs	r4, #0
  4069c0:	e003      	b.n	4069ca <__kernel_rem_pio2+0x4a2>
  4069c2:	454c      	cmp	r4, r9
  4069c4:	dc10      	bgt.n	4069e8 <__kernel_rem_pio2+0x4c0>
  4069c6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  4069ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  4069ce:	f005 f959 	bl	40bc84 <__aeabi_dmul>
  4069d2:	4602      	mov	r2, r0
  4069d4:	460b      	mov	r3, r1
  4069d6:	4630      	mov	r0, r6
  4069d8:	4639      	mov	r1, r7
  4069da:	f004 ffa1 	bl	40b920 <__adddf3>
  4069de:	3401      	adds	r4, #1
  4069e0:	45a2      	cmp	sl, r4
  4069e2:	4606      	mov	r6, r0
  4069e4:	460f      	mov	r7, r1
  4069e6:	daec      	bge.n	4069c2 <__kernel_rem_pio2+0x49a>
  4069e8:	9b03      	ldr	r3, [sp, #12]
  4069ea:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4069ee:	f1ab 0b08 	sub.w	fp, fp, #8
  4069f2:	e9c3 6700 	strd	r6, r7, [r3]
  4069f6:	ab6e      	add	r3, sp, #440	; 0x1b8
  4069f8:	455b      	cmp	r3, fp
  4069fa:	f109 0901 	add.w	r9, r9, #1
  4069fe:	d1d2      	bne.n	4069a6 <__kernel_rem_pio2+0x47e>
  406a00:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  406a02:	f8dd a00c 	ldr.w	sl, [sp, #12]
  406a06:	2b03      	cmp	r3, #3
  406a08:	f200 808b 	bhi.w	406b22 <__kernel_rem_pio2+0x5fa>
  406a0c:	e8df f013 	tbh	[pc, r3, lsl #1]
  406a10:	009000d1 	.word	0x009000d1
  406a14:	00100090 	.word	0x00100090
  406a18:	40000000 	.word	0x40000000
  406a1c:	3ff921fb 	.word	0x3ff921fb
  406a20:	3ff00000 	.word	0x3ff00000
  406a24:	3fe00000 	.word	0x3fe00000
  406a28:	3e700000 	.word	0x3e700000
  406a2c:	0040cb68 	.word	0x0040cb68
  406a30:	9b00      	ldr	r3, [sp, #0]
  406a32:	2b00      	cmp	r3, #0
  406a34:	f340 81a4 	ble.w	406d80 <__kernel_rem_pio2+0x858>
  406a38:	9b04      	ldr	r3, [sp, #16]
  406a3a:	eb0a 0803 	add.w	r8, sl, r3
  406a3e:	e9d8 6700 	ldrd	r6, r7, [r8]
  406a42:	46d3      	mov	fp, sl
  406a44:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  406a48:	4632      	mov	r2, r6
  406a4a:	463b      	mov	r3, r7
  406a4c:	4648      	mov	r0, r9
  406a4e:	4651      	mov	r1, sl
  406a50:	f004 ff66 	bl	40b920 <__adddf3>
  406a54:	4604      	mov	r4, r0
  406a56:	460d      	mov	r5, r1
  406a58:	4602      	mov	r2, r0
  406a5a:	460b      	mov	r3, r1
  406a5c:	4648      	mov	r0, r9
  406a5e:	4651      	mov	r1, sl
  406a60:	f004 ff5c 	bl	40b91c <__aeabi_dsub>
  406a64:	4632      	mov	r2, r6
  406a66:	463b      	mov	r3, r7
  406a68:	f004 ff5a 	bl	40b920 <__adddf3>
  406a6c:	e9c8 0100 	strd	r0, r1, [r8]
  406a70:	e968 4502 	strd	r4, r5, [r8, #-8]!
  406a74:	45c3      	cmp	fp, r8
  406a76:	4626      	mov	r6, r4
  406a78:	462f      	mov	r7, r5
  406a7a:	d1e3      	bne.n	406a44 <__kernel_rem_pio2+0x51c>
  406a7c:	9b00      	ldr	r3, [sp, #0]
  406a7e:	2b01      	cmp	r3, #1
  406a80:	46da      	mov	sl, fp
  406a82:	f340 817d 	ble.w	406d80 <__kernel_rem_pio2+0x858>
  406a86:	9b04      	ldr	r3, [sp, #16]
  406a88:	445b      	add	r3, fp
  406a8a:	e9d3 6700 	ldrd	r6, r7, [r3]
  406a8e:	4698      	mov	r8, r3
  406a90:	4699      	mov	r9, r3
  406a92:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  406a96:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  406a9a:	4632      	mov	r2, r6
  406a9c:	4618      	mov	r0, r3
  406a9e:	4621      	mov	r1, r4
  406aa0:	463b      	mov	r3, r7
  406aa2:	e9cd 0100 	strd	r0, r1, [sp]
  406aa6:	f004 ff3b 	bl	40b920 <__adddf3>
  406aaa:	4604      	mov	r4, r0
  406aac:	460d      	mov	r5, r1
  406aae:	4602      	mov	r2, r0
  406ab0:	460b      	mov	r3, r1
  406ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
  406ab6:	f004 ff31 	bl	40b91c <__aeabi_dsub>
  406aba:	4632      	mov	r2, r6
  406abc:	463b      	mov	r3, r7
  406abe:	f004 ff2f 	bl	40b920 <__adddf3>
  406ac2:	e9c9 0100 	strd	r0, r1, [r9]
  406ac6:	e969 4502 	strd	r4, r5, [r9, #-8]!
  406aca:	45cb      	cmp	fp, r9
  406acc:	4626      	mov	r6, r4
  406ace:	462f      	mov	r7, r5
  406ad0:	d1e1      	bne.n	406a96 <__kernel_rem_pio2+0x56e>
  406ad2:	2300      	movs	r3, #0
  406ad4:	f108 0808 	add.w	r8, r8, #8
  406ad8:	461d      	mov	r5, r3
  406ada:	ac4c      	add	r4, sp, #304	; 0x130
  406adc:	4618      	mov	r0, r3
  406ade:	4629      	mov	r1, r5
  406ae0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  406ae4:	f004 ff1c 	bl	40b920 <__adddf3>
  406ae8:	4544      	cmp	r4, r8
  406aea:	4603      	mov	r3, r0
  406aec:	460d      	mov	r5, r1
  406aee:	d1f5      	bne.n	406adc <__kernel_rem_pio2+0x5b4>
  406af0:	9a02      	ldr	r2, [sp, #8]
  406af2:	2a00      	cmp	r2, #0
  406af4:	f000 8120 	beq.w	406d38 <__kernel_rem_pio2+0x810>
  406af8:	f8da 4004 	ldr.w	r4, [sl, #4]
  406afc:	f8da 200c 	ldr.w	r2, [sl, #12]
  406b00:	9f06      	ldr	r7, [sp, #24]
  406b02:	f8da 1000 	ldr.w	r1, [sl]
  406b06:	f8da 0008 	ldr.w	r0, [sl, #8]
  406b0a:	613b      	str	r3, [r7, #16]
  406b0c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  406b10:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  406b14:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  406b18:	617d      	str	r5, [r7, #20]
  406b1a:	607c      	str	r4, [r7, #4]
  406b1c:	60fa      	str	r2, [r7, #12]
  406b1e:	6039      	str	r1, [r7, #0]
  406b20:	60b8      	str	r0, [r7, #8]
  406b22:	9b07      	ldr	r3, [sp, #28]
  406b24:	f003 0007 	and.w	r0, r3, #7
  406b28:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  406b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b30:	9c04      	ldr	r4, [sp, #16]
  406b32:	2600      	movs	r6, #0
  406b34:	3408      	adds	r4, #8
  406b36:	4454      	add	r4, sl
  406b38:	4633      	mov	r3, r6
  406b3a:	4630      	mov	r0, r6
  406b3c:	4619      	mov	r1, r3
  406b3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  406b42:	f004 feed 	bl	40b920 <__adddf3>
  406b46:	4554      	cmp	r4, sl
  406b48:	4606      	mov	r6, r0
  406b4a:	460b      	mov	r3, r1
  406b4c:	d1f5      	bne.n	406b3a <__kernel_rem_pio2+0x612>
  406b4e:	9a02      	ldr	r2, [sp, #8]
  406b50:	4630      	mov	r0, r6
  406b52:	4619      	mov	r1, r3
  406b54:	2a00      	cmp	r2, #0
  406b56:	f000 80da 	beq.w	406d0e <__kernel_rem_pio2+0x7e6>
  406b5a:	9806      	ldr	r0, [sp, #24]
  406b5c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  406b60:	4632      	mov	r2, r6
  406b62:	6044      	str	r4, [r0, #4]
  406b64:	6006      	str	r6, [r0, #0]
  406b66:	e9da 0100 	ldrd	r0, r1, [sl]
  406b6a:	f004 fed7 	bl	40b91c <__aeabi_dsub>
  406b6e:	460b      	mov	r3, r1
  406b70:	9900      	ldr	r1, [sp, #0]
  406b72:	2900      	cmp	r1, #0
  406b74:	4602      	mov	r2, r0
  406b76:	dd0e      	ble.n	406b96 <__kernel_rem_pio2+0x66e>
  406b78:	2401      	movs	r4, #1
  406b7a:	4610      	mov	r0, r2
  406b7c:	4619      	mov	r1, r3
  406b7e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  406b82:	f004 fecd 	bl	40b920 <__adddf3>
  406b86:	460b      	mov	r3, r1
  406b88:	9900      	ldr	r1, [sp, #0]
  406b8a:	3401      	adds	r4, #1
  406b8c:	42a1      	cmp	r1, r4
  406b8e:	4602      	mov	r2, r0
  406b90:	daf3      	bge.n	406b7a <__kernel_rem_pio2+0x652>
  406b92:	9902      	ldr	r1, [sp, #8]
  406b94:	b109      	cbz	r1, 406b9a <__kernel_rem_pio2+0x672>
  406b96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406b9a:	4619      	mov	r1, r3
  406b9c:	9b06      	ldr	r3, [sp, #24]
  406b9e:	4610      	mov	r0, r2
  406ba0:	e9c3 0102 	strd	r0, r1, [r3, #8]
  406ba4:	9b07      	ldr	r3, [sp, #28]
  406ba6:	f003 0007 	and.w	r0, r3, #7
  406baa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  406bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bb2:	9c04      	ldr	r4, [sp, #16]
  406bb4:	2200      	movs	r2, #0
  406bb6:	3408      	adds	r4, #8
  406bb8:	4454      	add	r4, sl
  406bba:	4613      	mov	r3, r2
  406bbc:	4610      	mov	r0, r2
  406bbe:	4619      	mov	r1, r3
  406bc0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  406bc4:	f004 feac 	bl	40b920 <__adddf3>
  406bc8:	45a2      	cmp	sl, r4
  406bca:	4602      	mov	r2, r0
  406bcc:	460b      	mov	r3, r1
  406bce:	d1f5      	bne.n	406bbc <__kernel_rem_pio2+0x694>
  406bd0:	9902      	ldr	r1, [sp, #8]
  406bd2:	b109      	cbz	r1, 406bd8 <__kernel_rem_pio2+0x6b0>
  406bd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406bd8:	4619      	mov	r1, r3
  406bda:	9b06      	ldr	r3, [sp, #24]
  406bdc:	4610      	mov	r0, r2
  406bde:	e9c3 0100 	strd	r0, r1, [r3]
  406be2:	9b07      	ldr	r3, [sp, #28]
  406be4:	f003 0007 	and.w	r0, r3, #7
  406be8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  406bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bf0:	2600      	movs	r6, #0
  406bf2:	2700      	movs	r7, #0
  406bf4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  406bf8:	45da      	cmp	sl, fp
  406bfa:	f109 0908 	add.w	r9, r9, #8
  406bfe:	f47f ace4 	bne.w	4065ca <__kernel_rem_pio2+0xa2>
  406c02:	e502      	b.n	40660a <__kernel_rem_pio2+0xe2>
  406c04:	9b00      	ldr	r3, [sp, #0]
  406c06:	2b00      	cmp	r3, #0
  406c08:	f108 0801 	add.w	r8, r8, #1
  406c0c:	bfc8      	it	gt
  406c0e:	2502      	movgt	r5, #2
  406c10:	f73f ad8c 	bgt.w	40672c <__kernel_rem_pio2+0x204>
  406c14:	4632      	mov	r2, r6
  406c16:	463b      	mov	r3, r7
  406c18:	2000      	movs	r0, #0
  406c1a:	4963      	ldr	r1, [pc, #396]	; (406da8 <__kernel_rem_pio2+0x880>)
  406c1c:	f004 fe7e 	bl	40b91c <__aeabi_dsub>
  406c20:	2502      	movs	r5, #2
  406c22:	4606      	mov	r6, r0
  406c24:	460f      	mov	r7, r1
  406c26:	e5df      	b.n	4067e8 <__kernel_rem_pio2+0x2c0>
  406c28:	2600      	movs	r6, #0
  406c2a:	2700      	movs	r7, #0
  406c2c:	e6dc      	b.n	4069e8 <__kernel_rem_pio2+0x4c0>
  406c2e:	9b04      	ldr	r3, [sp, #16]
  406c30:	2b00      	cmp	r3, #0
  406c32:	dd26      	ble.n	406c82 <__kernel_rem_pio2+0x75a>
  406c34:	2400      	movs	r4, #0
  406c36:	9b04      	ldr	r3, [sp, #16]
  406c38:	2b01      	cmp	r3, #1
  406c3a:	f43f ada8 	beq.w	40678e <__kernel_rem_pio2+0x266>
  406c3e:	2b02      	cmp	r3, #2
  406c40:	d109      	bne.n	406c56 <__kernel_rem_pio2+0x72e>
  406c42:	9b00      	ldr	r3, [sp, #0]
  406c44:	1e5a      	subs	r2, r3, #1
  406c46:	ab0c      	add	r3, sp, #48	; 0x30
  406c48:	a90c      	add	r1, sp, #48	; 0x30
  406c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406c4e:	f3c3 0315 	ubfx	r3, r3, #0, #22
  406c52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  406c56:	2d02      	cmp	r5, #2
  406c58:	f47f adc6 	bne.w	4067e8 <__kernel_rem_pio2+0x2c0>
  406c5c:	4632      	mov	r2, r6
  406c5e:	463b      	mov	r3, r7
  406c60:	2000      	movs	r0, #0
  406c62:	4951      	ldr	r1, [pc, #324]	; (406da8 <__kernel_rem_pio2+0x880>)
  406c64:	f004 fe5a 	bl	40b91c <__aeabi_dsub>
  406c68:	4606      	mov	r6, r0
  406c6a:	460f      	mov	r7, r1
  406c6c:	2c00      	cmp	r4, #0
  406c6e:	f43f adbb 	beq.w	4067e8 <__kernel_rem_pio2+0x2c0>
  406c72:	e5ab      	b.n	4067cc <__kernel_rem_pio2+0x2a4>
  406c74:	9900      	ldr	r1, [sp, #0]
  406c76:	3301      	adds	r3, #1
  406c78:	4299      	cmp	r1, r3
  406c7a:	d178      	bne.n	406d6e <__kernel_rem_pio2+0x846>
  406c7c:	9b04      	ldr	r3, [sp, #16]
  406c7e:	2b00      	cmp	r3, #0
  406c80:	dcd9      	bgt.n	406c36 <__kernel_rem_pio2+0x70e>
  406c82:	2d02      	cmp	r5, #2
  406c84:	f47f adb0 	bne.w	4067e8 <__kernel_rem_pio2+0x2c0>
  406c88:	4632      	mov	r2, r6
  406c8a:	463b      	mov	r3, r7
  406c8c:	2000      	movs	r0, #0
  406c8e:	4946      	ldr	r1, [pc, #280]	; (406da8 <__kernel_rem_pio2+0x880>)
  406c90:	f004 fe44 	bl	40b91c <__aeabi_dsub>
  406c94:	4606      	mov	r6, r0
  406c96:	460f      	mov	r7, r1
  406c98:	e5a6      	b.n	4067e8 <__kernel_rem_pio2+0x2c0>
  406c9a:	2301      	movs	r3, #1
  406c9c:	e5d1      	b.n	406842 <__kernel_rem_pio2+0x31a>
  406c9e:	4639      	mov	r1, r7
  406ca0:	9f04      	ldr	r7, [sp, #16]
  406ca2:	9502      	str	r5, [sp, #8]
  406ca4:	427a      	negs	r2, r7
  406ca6:	4630      	mov	r0, r6
  406ca8:	f8cd 801c 	str.w	r8, [sp, #28]
  406cac:	f000 fb70 	bl	407390 <scalbn>
  406cb0:	2200      	movs	r2, #0
  406cb2:	4b3e      	ldr	r3, [pc, #248]	; (406dac <__kernel_rem_pio2+0x884>)
  406cb4:	4604      	mov	r4, r0
  406cb6:	460d      	mov	r5, r1
  406cb8:	f005 fa6a 	bl	40c190 <__aeabi_dcmpge>
  406cbc:	2800      	cmp	r0, #0
  406cbe:	d062      	beq.n	406d86 <__kernel_rem_pio2+0x85e>
  406cc0:	2200      	movs	r2, #0
  406cc2:	4b3b      	ldr	r3, [pc, #236]	; (406db0 <__kernel_rem_pio2+0x888>)
  406cc4:	4620      	mov	r0, r4
  406cc6:	4629      	mov	r1, r5
  406cc8:	f004 ffdc 	bl	40bc84 <__aeabi_dmul>
  406ccc:	f005 fa8a 	bl	40c1e4 <__aeabi_d2iz>
  406cd0:	4606      	mov	r6, r0
  406cd2:	f004 ff71 	bl	40bbb8 <__aeabi_i2d>
  406cd6:	2200      	movs	r2, #0
  406cd8:	4b34      	ldr	r3, [pc, #208]	; (406dac <__kernel_rem_pio2+0x884>)
  406cda:	f004 ffd3 	bl	40bc84 <__aeabi_dmul>
  406cde:	4602      	mov	r2, r0
  406ce0:	460b      	mov	r3, r1
  406ce2:	4620      	mov	r0, r4
  406ce4:	4629      	mov	r1, r5
  406ce6:	f004 fe19 	bl	40b91c <__aeabi_dsub>
  406cea:	f005 fa7b 	bl	40c1e4 <__aeabi_d2iz>
  406cee:	9900      	ldr	r1, [sp, #0]
  406cf0:	460b      	mov	r3, r1
  406cf2:	3301      	adds	r3, #1
  406cf4:	461a      	mov	r2, r3
  406cf6:	9300      	str	r3, [sp, #0]
  406cf8:	463b      	mov	r3, r7
  406cfa:	3318      	adds	r3, #24
  406cfc:	9304      	str	r3, [sp, #16]
  406cfe:	460b      	mov	r3, r1
  406d00:	a90c      	add	r1, sp, #48	; 0x30
  406d02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  406d06:	4613      	mov	r3, r2
  406d08:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  406d0c:	e614      	b.n	406938 <__kernel_rem_pio2+0x410>
  406d0e:	9b06      	ldr	r3, [sp, #24]
  406d10:	4632      	mov	r2, r6
  406d12:	e9c3 0100 	strd	r0, r1, [r3]
  406d16:	460b      	mov	r3, r1
  406d18:	e9da 0100 	ldrd	r0, r1, [sl]
  406d1c:	f004 fdfe 	bl	40b91c <__aeabi_dsub>
  406d20:	460b      	mov	r3, r1
  406d22:	9900      	ldr	r1, [sp, #0]
  406d24:	2900      	cmp	r1, #0
  406d26:	4602      	mov	r2, r0
  406d28:	f73f af26 	bgt.w	406b78 <__kernel_rem_pio2+0x650>
  406d2c:	4619      	mov	r1, r3
  406d2e:	9b06      	ldr	r3, [sp, #24]
  406d30:	4610      	mov	r0, r2
  406d32:	e9c3 0102 	strd	r0, r1, [r3, #8]
  406d36:	e735      	b.n	406ba4 <__kernel_rem_pio2+0x67c>
  406d38:	4618      	mov	r0, r3
  406d3a:	4629      	mov	r1, r5
  406d3c:	e9da 2300 	ldrd	r2, r3, [sl]
  406d40:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  406d44:	9f06      	ldr	r7, [sp, #24]
  406d46:	e9c7 0104 	strd	r0, r1, [r7, #16]
  406d4a:	e9c7 2300 	strd	r2, r3, [r7]
  406d4e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  406d52:	e6e6      	b.n	406b22 <__kernel_rem_pio2+0x5fa>
  406d54:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  406d56:	2b03      	cmp	r3, #3
  406d58:	f63f aee3 	bhi.w	406b22 <__kernel_rem_pio2+0x5fa>
  406d5c:	e8df f003 	tbb	[pc, r3]
  406d60:	0e1c1c21 	.word	0x0e1c1c21
  406d64:	9b00      	ldr	r3, [sp, #0]
  406d66:	2b01      	cmp	r3, #1
  406d68:	dd88      	ble.n	406c7c <__kernel_rem_pio2+0x754>
  406d6a:	aa0c      	add	r2, sp, #48	; 0x30
  406d6c:	2301      	movs	r3, #1
  406d6e:	f852 4f04 	ldr.w	r4, [r2, #4]!
  406d72:	2c00      	cmp	r4, #0
  406d74:	f43f af7e 	beq.w	406c74 <__kernel_rem_pio2+0x74c>
  406d78:	1c58      	adds	r0, r3, #1
  406d7a:	e4dd      	b.n	406738 <__kernel_rem_pio2+0x210>
  406d7c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  406d80:	2300      	movs	r3, #0
  406d82:	461d      	mov	r5, r3
  406d84:	e6b4      	b.n	406af0 <__kernel_rem_pio2+0x5c8>
  406d86:	4629      	mov	r1, r5
  406d88:	4620      	mov	r0, r4
  406d8a:	f005 fa2b 	bl	40c1e4 <__aeabi_d2iz>
  406d8e:	9a00      	ldr	r2, [sp, #0]
  406d90:	a90c      	add	r1, sp, #48	; 0x30
  406d92:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  406d96:	e5cf      	b.n	406938 <__kernel_rem_pio2+0x410>
  406d98:	2600      	movs	r6, #0
  406d9a:	4633      	mov	r3, r6
  406d9c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  406da0:	e6d5      	b.n	406b4e <__kernel_rem_pio2+0x626>
  406da2:	2200      	movs	r2, #0
  406da4:	4613      	mov	r3, r2
  406da6:	e713      	b.n	406bd0 <__kernel_rem_pio2+0x6a8>
  406da8:	3ff00000 	.word	0x3ff00000
  406dac:	41700000 	.word	0x41700000
  406db0:	3e700000 	.word	0x3e700000
  406db4:	00000000 	.word	0x00000000

00406db8 <__kernel_sin>:
  406db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  406dc0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  406dc4:	b085      	sub	sp, #20
  406dc6:	460c      	mov	r4, r1
  406dc8:	4690      	mov	r8, r2
  406dca:	4699      	mov	r9, r3
  406dcc:	4605      	mov	r5, r0
  406dce:	da04      	bge.n	406dda <__kernel_sin+0x22>
  406dd0:	f005 fa08 	bl	40c1e4 <__aeabi_d2iz>
  406dd4:	2800      	cmp	r0, #0
  406dd6:	f000 8085 	beq.w	406ee4 <__kernel_sin+0x12c>
  406dda:	462a      	mov	r2, r5
  406ddc:	4623      	mov	r3, r4
  406dde:	4628      	mov	r0, r5
  406de0:	4621      	mov	r1, r4
  406de2:	f004 ff4f 	bl	40bc84 <__aeabi_dmul>
  406de6:	4606      	mov	r6, r0
  406de8:	460f      	mov	r7, r1
  406dea:	4602      	mov	r2, r0
  406dec:	460b      	mov	r3, r1
  406dee:	4628      	mov	r0, r5
  406df0:	4621      	mov	r1, r4
  406df2:	f004 ff47 	bl	40bc84 <__aeabi_dmul>
  406df6:	a33e      	add	r3, pc, #248	; (adr r3, 406ef0 <__kernel_sin+0x138>)
  406df8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406dfc:	4682      	mov	sl, r0
  406dfe:	468b      	mov	fp, r1
  406e00:	4630      	mov	r0, r6
  406e02:	4639      	mov	r1, r7
  406e04:	f004 ff3e 	bl	40bc84 <__aeabi_dmul>
  406e08:	a33b      	add	r3, pc, #236	; (adr r3, 406ef8 <__kernel_sin+0x140>)
  406e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e0e:	f004 fd85 	bl	40b91c <__aeabi_dsub>
  406e12:	4632      	mov	r2, r6
  406e14:	463b      	mov	r3, r7
  406e16:	f004 ff35 	bl	40bc84 <__aeabi_dmul>
  406e1a:	a339      	add	r3, pc, #228	; (adr r3, 406f00 <__kernel_sin+0x148>)
  406e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e20:	f004 fd7e 	bl	40b920 <__adddf3>
  406e24:	4632      	mov	r2, r6
  406e26:	463b      	mov	r3, r7
  406e28:	f004 ff2c 	bl	40bc84 <__aeabi_dmul>
  406e2c:	a336      	add	r3, pc, #216	; (adr r3, 406f08 <__kernel_sin+0x150>)
  406e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e32:	f004 fd73 	bl	40b91c <__aeabi_dsub>
  406e36:	4632      	mov	r2, r6
  406e38:	463b      	mov	r3, r7
  406e3a:	f004 ff23 	bl	40bc84 <__aeabi_dmul>
  406e3e:	a334      	add	r3, pc, #208	; (adr r3, 406f10 <__kernel_sin+0x158>)
  406e40:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e44:	f004 fd6c 	bl	40b920 <__adddf3>
  406e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406e4a:	e9cd 0100 	strd	r0, r1, [sp]
  406e4e:	b39b      	cbz	r3, 406eb8 <__kernel_sin+0x100>
  406e50:	2200      	movs	r2, #0
  406e52:	4b33      	ldr	r3, [pc, #204]	; (406f20 <__kernel_sin+0x168>)
  406e54:	4640      	mov	r0, r8
  406e56:	4649      	mov	r1, r9
  406e58:	f004 ff14 	bl	40bc84 <__aeabi_dmul>
  406e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
  406e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406e64:	4650      	mov	r0, sl
  406e66:	4659      	mov	r1, fp
  406e68:	f004 ff0c 	bl	40bc84 <__aeabi_dmul>
  406e6c:	4602      	mov	r2, r0
  406e6e:	460b      	mov	r3, r1
  406e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406e74:	f004 fd52 	bl	40b91c <__aeabi_dsub>
  406e78:	4632      	mov	r2, r6
  406e7a:	463b      	mov	r3, r7
  406e7c:	f004 ff02 	bl	40bc84 <__aeabi_dmul>
  406e80:	4642      	mov	r2, r8
  406e82:	464b      	mov	r3, r9
  406e84:	f004 fd4a 	bl	40b91c <__aeabi_dsub>
  406e88:	a323      	add	r3, pc, #140	; (adr r3, 406f18 <__kernel_sin+0x160>)
  406e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e8e:	4606      	mov	r6, r0
  406e90:	460f      	mov	r7, r1
  406e92:	4650      	mov	r0, sl
  406e94:	4659      	mov	r1, fp
  406e96:	f004 fef5 	bl	40bc84 <__aeabi_dmul>
  406e9a:	4602      	mov	r2, r0
  406e9c:	460b      	mov	r3, r1
  406e9e:	4630      	mov	r0, r6
  406ea0:	4639      	mov	r1, r7
  406ea2:	f004 fd3d 	bl	40b920 <__adddf3>
  406ea6:	4602      	mov	r2, r0
  406ea8:	460b      	mov	r3, r1
  406eaa:	4628      	mov	r0, r5
  406eac:	4621      	mov	r1, r4
  406eae:	f004 fd35 	bl	40b91c <__aeabi_dsub>
  406eb2:	b005      	add	sp, #20
  406eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eb8:	4602      	mov	r2, r0
  406eba:	460b      	mov	r3, r1
  406ebc:	4630      	mov	r0, r6
  406ebe:	4639      	mov	r1, r7
  406ec0:	f004 fee0 	bl	40bc84 <__aeabi_dmul>
  406ec4:	a314      	add	r3, pc, #80	; (adr r3, 406f18 <__kernel_sin+0x160>)
  406ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
  406eca:	f004 fd27 	bl	40b91c <__aeabi_dsub>
  406ece:	4652      	mov	r2, sl
  406ed0:	465b      	mov	r3, fp
  406ed2:	f004 fed7 	bl	40bc84 <__aeabi_dmul>
  406ed6:	462a      	mov	r2, r5
  406ed8:	4623      	mov	r3, r4
  406eda:	f004 fd21 	bl	40b920 <__adddf3>
  406ede:	b005      	add	sp, #20
  406ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ee4:	4628      	mov	r0, r5
  406ee6:	4621      	mov	r1, r4
  406ee8:	b005      	add	sp, #20
  406eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eee:	bf00      	nop
  406ef0:	5acfd57c 	.word	0x5acfd57c
  406ef4:	3de5d93a 	.word	0x3de5d93a
  406ef8:	8a2b9ceb 	.word	0x8a2b9ceb
  406efc:	3e5ae5e6 	.word	0x3e5ae5e6
  406f00:	57b1fe7d 	.word	0x57b1fe7d
  406f04:	3ec71de3 	.word	0x3ec71de3
  406f08:	19c161d5 	.word	0x19c161d5
  406f0c:	3f2a01a0 	.word	0x3f2a01a0
  406f10:	1110f8a6 	.word	0x1110f8a6
  406f14:	3f811111 	.word	0x3f811111
  406f18:	55555549 	.word	0x55555549
  406f1c:	3fc55555 	.word	0x3fc55555
  406f20:	3fe00000 	.word	0x3fe00000
  406f24:	00000000 	.word	0x00000000

00406f28 <atan>:
  406f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f2c:	4bc2      	ldr	r3, [pc, #776]	; (407238 <atan+0x310>)
  406f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  406f32:	429e      	cmp	r6, r3
  406f34:	460d      	mov	r5, r1
  406f36:	468a      	mov	sl, r1
  406f38:	4604      	mov	r4, r0
  406f3a:	dd10      	ble.n	406f5e <atan+0x36>
  406f3c:	4bbf      	ldr	r3, [pc, #764]	; (40723c <atan+0x314>)
  406f3e:	429e      	cmp	r6, r3
  406f40:	f300 80b5 	bgt.w	4070ae <atan+0x186>
  406f44:	f000 80b0 	beq.w	4070a8 <atan+0x180>
  406f48:	4bbd      	ldr	r3, [pc, #756]	; (407240 <atan+0x318>)
  406f4a:	49be      	ldr	r1, [pc, #760]	; (407244 <atan+0x31c>)
  406f4c:	4cbe      	ldr	r4, [pc, #760]	; (407248 <atan+0x320>)
  406f4e:	f1ba 0f00 	cmp.w	sl, #0
  406f52:	bfd8      	it	le
  406f54:	460b      	movle	r3, r1
  406f56:	4620      	mov	r0, r4
  406f58:	4619      	mov	r1, r3
  406f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f5e:	4bbb      	ldr	r3, [pc, #748]	; (40724c <atan+0x324>)
  406f60:	429e      	cmp	r6, r3
  406f62:	f300 80c1 	bgt.w	4070e8 <atan+0x1c0>
  406f66:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  406f6a:	429e      	cmp	r6, r3
  406f6c:	f340 80ab 	ble.w	4070c6 <atan+0x19e>
  406f70:	f04f 3bff 	mov.w	fp, #4294967295
  406f74:	4622      	mov	r2, r4
  406f76:	462b      	mov	r3, r5
  406f78:	4620      	mov	r0, r4
  406f7a:	4629      	mov	r1, r5
  406f7c:	f004 fe82 	bl	40bc84 <__aeabi_dmul>
  406f80:	4602      	mov	r2, r0
  406f82:	460b      	mov	r3, r1
  406f84:	4680      	mov	r8, r0
  406f86:	4689      	mov	r9, r1
  406f88:	f004 fe7c 	bl	40bc84 <__aeabi_dmul>
  406f8c:	a392      	add	r3, pc, #584	; (adr r3, 4071d8 <atan+0x2b0>)
  406f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f92:	4606      	mov	r6, r0
  406f94:	460f      	mov	r7, r1
  406f96:	f004 fe75 	bl	40bc84 <__aeabi_dmul>
  406f9a:	a391      	add	r3, pc, #580	; (adr r3, 4071e0 <atan+0x2b8>)
  406f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fa0:	f004 fcbe 	bl	40b920 <__adddf3>
  406fa4:	4632      	mov	r2, r6
  406fa6:	463b      	mov	r3, r7
  406fa8:	f004 fe6c 	bl	40bc84 <__aeabi_dmul>
  406fac:	a38e      	add	r3, pc, #568	; (adr r3, 4071e8 <atan+0x2c0>)
  406fae:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fb2:	f004 fcb5 	bl	40b920 <__adddf3>
  406fb6:	4632      	mov	r2, r6
  406fb8:	463b      	mov	r3, r7
  406fba:	f004 fe63 	bl	40bc84 <__aeabi_dmul>
  406fbe:	a38c      	add	r3, pc, #560	; (adr r3, 4071f0 <atan+0x2c8>)
  406fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fc4:	f004 fcac 	bl	40b920 <__adddf3>
  406fc8:	4632      	mov	r2, r6
  406fca:	463b      	mov	r3, r7
  406fcc:	f004 fe5a 	bl	40bc84 <__aeabi_dmul>
  406fd0:	a389      	add	r3, pc, #548	; (adr r3, 4071f8 <atan+0x2d0>)
  406fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fd6:	f004 fca3 	bl	40b920 <__adddf3>
  406fda:	4632      	mov	r2, r6
  406fdc:	463b      	mov	r3, r7
  406fde:	f004 fe51 	bl	40bc84 <__aeabi_dmul>
  406fe2:	a387      	add	r3, pc, #540	; (adr r3, 407200 <atan+0x2d8>)
  406fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fe8:	f004 fc9a 	bl	40b920 <__adddf3>
  406fec:	4642      	mov	r2, r8
  406fee:	464b      	mov	r3, r9
  406ff0:	f004 fe48 	bl	40bc84 <__aeabi_dmul>
  406ff4:	a384      	add	r3, pc, #528	; (adr r3, 407208 <atan+0x2e0>)
  406ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ffa:	4680      	mov	r8, r0
  406ffc:	4689      	mov	r9, r1
  406ffe:	4630      	mov	r0, r6
  407000:	4639      	mov	r1, r7
  407002:	f004 fe3f 	bl	40bc84 <__aeabi_dmul>
  407006:	a382      	add	r3, pc, #520	; (adr r3, 407210 <atan+0x2e8>)
  407008:	e9d3 2300 	ldrd	r2, r3, [r3]
  40700c:	f004 fc86 	bl	40b91c <__aeabi_dsub>
  407010:	4632      	mov	r2, r6
  407012:	463b      	mov	r3, r7
  407014:	f004 fe36 	bl	40bc84 <__aeabi_dmul>
  407018:	a37f      	add	r3, pc, #508	; (adr r3, 407218 <atan+0x2f0>)
  40701a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40701e:	f004 fc7d 	bl	40b91c <__aeabi_dsub>
  407022:	4632      	mov	r2, r6
  407024:	463b      	mov	r3, r7
  407026:	f004 fe2d 	bl	40bc84 <__aeabi_dmul>
  40702a:	a37d      	add	r3, pc, #500	; (adr r3, 407220 <atan+0x2f8>)
  40702c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407030:	f004 fc74 	bl	40b91c <__aeabi_dsub>
  407034:	4632      	mov	r2, r6
  407036:	463b      	mov	r3, r7
  407038:	f004 fe24 	bl	40bc84 <__aeabi_dmul>
  40703c:	a37a      	add	r3, pc, #488	; (adr r3, 407228 <atan+0x300>)
  40703e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407042:	f004 fc6b 	bl	40b91c <__aeabi_dsub>
  407046:	4632      	mov	r2, r6
  407048:	463b      	mov	r3, r7
  40704a:	f004 fe1b 	bl	40bc84 <__aeabi_dmul>
  40704e:	f1bb 3fff 	cmp.w	fp, #4294967295
  407052:	4602      	mov	r2, r0
  407054:	460b      	mov	r3, r1
  407056:	d06e      	beq.n	407136 <atan+0x20e>
  407058:	4640      	mov	r0, r8
  40705a:	4649      	mov	r1, r9
  40705c:	f004 fc60 	bl	40b920 <__adddf3>
  407060:	4622      	mov	r2, r4
  407062:	462b      	mov	r3, r5
  407064:	f004 fe0e 	bl	40bc84 <__aeabi_dmul>
  407068:	4e79      	ldr	r6, [pc, #484]	; (407250 <atan+0x328>)
  40706a:	4b7a      	ldr	r3, [pc, #488]	; (407254 <atan+0x32c>)
  40706c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  407070:	445e      	add	r6, fp
  407072:	449b      	add	fp, r3
  407074:	e9db 2300 	ldrd	r2, r3, [fp]
  407078:	f004 fc50 	bl	40b91c <__aeabi_dsub>
  40707c:	4622      	mov	r2, r4
  40707e:	462b      	mov	r3, r5
  407080:	f004 fc4c 	bl	40b91c <__aeabi_dsub>
  407084:	460b      	mov	r3, r1
  407086:	4602      	mov	r2, r0
  407088:	e9d6 0100 	ldrd	r0, r1, [r6]
  40708c:	f004 fc46 	bl	40b91c <__aeabi_dsub>
  407090:	f1ba 0f00 	cmp.w	sl, #0
  407094:	4604      	mov	r4, r0
  407096:	460b      	mov	r3, r1
  407098:	f6bf af5d 	bge.w	406f56 <atan+0x2e>
  40709c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4070a0:	4620      	mov	r0, r4
  4070a2:	4619      	mov	r1, r3
  4070a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070a8:	2800      	cmp	r0, #0
  4070aa:	f43f af4d 	beq.w	406f48 <atan+0x20>
  4070ae:	4622      	mov	r2, r4
  4070b0:	462b      	mov	r3, r5
  4070b2:	4620      	mov	r0, r4
  4070b4:	4629      	mov	r1, r5
  4070b6:	f004 fc33 	bl	40b920 <__adddf3>
  4070ba:	4604      	mov	r4, r0
  4070bc:	460b      	mov	r3, r1
  4070be:	4620      	mov	r0, r4
  4070c0:	4619      	mov	r1, r3
  4070c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070c6:	a35a      	add	r3, pc, #360	; (adr r3, 407230 <atan+0x308>)
  4070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070cc:	f004 fc28 	bl	40b920 <__adddf3>
  4070d0:	2200      	movs	r2, #0
  4070d2:	4b61      	ldr	r3, [pc, #388]	; (407258 <atan+0x330>)
  4070d4:	f005 f866 	bl	40c1a4 <__aeabi_dcmpgt>
  4070d8:	2800      	cmp	r0, #0
  4070da:	f43f af49 	beq.w	406f70 <atan+0x48>
  4070de:	462b      	mov	r3, r5
  4070e0:	4620      	mov	r0, r4
  4070e2:	4619      	mov	r1, r3
  4070e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070e8:	f000 f8c0 	bl	40726c <fabs>
  4070ec:	4b5b      	ldr	r3, [pc, #364]	; (40725c <atan+0x334>)
  4070ee:	429e      	cmp	r6, r3
  4070f0:	4604      	mov	r4, r0
  4070f2:	460d      	mov	r5, r1
  4070f4:	dc30      	bgt.n	407158 <atan+0x230>
  4070f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  4070fa:	429e      	cmp	r6, r3
  4070fc:	dc55      	bgt.n	4071aa <atan+0x282>
  4070fe:	4602      	mov	r2, r0
  407100:	460b      	mov	r3, r1
  407102:	f004 fc0d 	bl	40b920 <__adddf3>
  407106:	2200      	movs	r2, #0
  407108:	4b53      	ldr	r3, [pc, #332]	; (407258 <atan+0x330>)
  40710a:	f004 fc07 	bl	40b91c <__aeabi_dsub>
  40710e:	2200      	movs	r2, #0
  407110:	4606      	mov	r6, r0
  407112:	460f      	mov	r7, r1
  407114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  407118:	4620      	mov	r0, r4
  40711a:	4629      	mov	r1, r5
  40711c:	f004 fc00 	bl	40b920 <__adddf3>
  407120:	4602      	mov	r2, r0
  407122:	460b      	mov	r3, r1
  407124:	4630      	mov	r0, r6
  407126:	4639      	mov	r1, r7
  407128:	f004 fed6 	bl	40bed8 <__aeabi_ddiv>
  40712c:	f04f 0b00 	mov.w	fp, #0
  407130:	4604      	mov	r4, r0
  407132:	460d      	mov	r5, r1
  407134:	e71e      	b.n	406f74 <atan+0x4c>
  407136:	4640      	mov	r0, r8
  407138:	4649      	mov	r1, r9
  40713a:	f004 fbf1 	bl	40b920 <__adddf3>
  40713e:	4622      	mov	r2, r4
  407140:	462b      	mov	r3, r5
  407142:	f004 fd9f 	bl	40bc84 <__aeabi_dmul>
  407146:	460b      	mov	r3, r1
  407148:	4602      	mov	r2, r0
  40714a:	4629      	mov	r1, r5
  40714c:	4620      	mov	r0, r4
  40714e:	f004 fbe5 	bl	40b91c <__aeabi_dsub>
  407152:	4604      	mov	r4, r0
  407154:	460b      	mov	r3, r1
  407156:	e6fe      	b.n	406f56 <atan+0x2e>
  407158:	4b41      	ldr	r3, [pc, #260]	; (407260 <atan+0x338>)
  40715a:	429e      	cmp	r6, r3
  40715c:	dc1a      	bgt.n	407194 <atan+0x26c>
  40715e:	2200      	movs	r2, #0
  407160:	4b40      	ldr	r3, [pc, #256]	; (407264 <atan+0x33c>)
  407162:	f004 fbdb 	bl	40b91c <__aeabi_dsub>
  407166:	2200      	movs	r2, #0
  407168:	4606      	mov	r6, r0
  40716a:	460f      	mov	r7, r1
  40716c:	4b3d      	ldr	r3, [pc, #244]	; (407264 <atan+0x33c>)
  40716e:	4620      	mov	r0, r4
  407170:	4629      	mov	r1, r5
  407172:	f004 fd87 	bl	40bc84 <__aeabi_dmul>
  407176:	2200      	movs	r2, #0
  407178:	4b37      	ldr	r3, [pc, #220]	; (407258 <atan+0x330>)
  40717a:	f004 fbd1 	bl	40b920 <__adddf3>
  40717e:	4602      	mov	r2, r0
  407180:	460b      	mov	r3, r1
  407182:	4630      	mov	r0, r6
  407184:	4639      	mov	r1, r7
  407186:	f004 fea7 	bl	40bed8 <__aeabi_ddiv>
  40718a:	f04f 0b02 	mov.w	fp, #2
  40718e:	4604      	mov	r4, r0
  407190:	460d      	mov	r5, r1
  407192:	e6ef      	b.n	406f74 <atan+0x4c>
  407194:	4602      	mov	r2, r0
  407196:	460b      	mov	r3, r1
  407198:	2000      	movs	r0, #0
  40719a:	4933      	ldr	r1, [pc, #204]	; (407268 <atan+0x340>)
  40719c:	f004 fe9c 	bl	40bed8 <__aeabi_ddiv>
  4071a0:	f04f 0b03 	mov.w	fp, #3
  4071a4:	4604      	mov	r4, r0
  4071a6:	460d      	mov	r5, r1
  4071a8:	e6e4      	b.n	406f74 <atan+0x4c>
  4071aa:	2200      	movs	r2, #0
  4071ac:	4b2a      	ldr	r3, [pc, #168]	; (407258 <atan+0x330>)
  4071ae:	f004 fbb5 	bl	40b91c <__aeabi_dsub>
  4071b2:	2200      	movs	r2, #0
  4071b4:	4606      	mov	r6, r0
  4071b6:	460f      	mov	r7, r1
  4071b8:	4b27      	ldr	r3, [pc, #156]	; (407258 <atan+0x330>)
  4071ba:	4620      	mov	r0, r4
  4071bc:	4629      	mov	r1, r5
  4071be:	f004 fbaf 	bl	40b920 <__adddf3>
  4071c2:	4602      	mov	r2, r0
  4071c4:	460b      	mov	r3, r1
  4071c6:	4630      	mov	r0, r6
  4071c8:	4639      	mov	r1, r7
  4071ca:	f004 fe85 	bl	40bed8 <__aeabi_ddiv>
  4071ce:	f04f 0b01 	mov.w	fp, #1
  4071d2:	4604      	mov	r4, r0
  4071d4:	460d      	mov	r5, r1
  4071d6:	e6cd      	b.n	406f74 <atan+0x4c>
  4071d8:	e322da11 	.word	0xe322da11
  4071dc:	3f90ad3a 	.word	0x3f90ad3a
  4071e0:	24760deb 	.word	0x24760deb
  4071e4:	3fa97b4b 	.word	0x3fa97b4b
  4071e8:	a0d03d51 	.word	0xa0d03d51
  4071ec:	3fb10d66 	.word	0x3fb10d66
  4071f0:	c54c206e 	.word	0xc54c206e
  4071f4:	3fb745cd 	.word	0x3fb745cd
  4071f8:	920083ff 	.word	0x920083ff
  4071fc:	3fc24924 	.word	0x3fc24924
  407200:	5555550d 	.word	0x5555550d
  407204:	3fd55555 	.word	0x3fd55555
  407208:	2c6a6c2f 	.word	0x2c6a6c2f
  40720c:	bfa2b444 	.word	0xbfa2b444
  407210:	52defd9a 	.word	0x52defd9a
  407214:	3fadde2d 	.word	0x3fadde2d
  407218:	af749a6d 	.word	0xaf749a6d
  40721c:	3fb3b0f2 	.word	0x3fb3b0f2
  407220:	fe231671 	.word	0xfe231671
  407224:	3fbc71c6 	.word	0x3fbc71c6
  407228:	9998ebc4 	.word	0x9998ebc4
  40722c:	3fc99999 	.word	0x3fc99999
  407230:	8800759c 	.word	0x8800759c
  407234:	7e37e43c 	.word	0x7e37e43c
  407238:	440fffff 	.word	0x440fffff
  40723c:	7ff00000 	.word	0x7ff00000
  407240:	3ff921fb 	.word	0x3ff921fb
  407244:	bff921fb 	.word	0xbff921fb
  407248:	54442d18 	.word	0x54442d18
  40724c:	3fdbffff 	.word	0x3fdbffff
  407250:	0040cbb0 	.word	0x0040cbb0
  407254:	0040cbd0 	.word	0x0040cbd0
  407258:	3ff00000 	.word	0x3ff00000
  40725c:	3ff2ffff 	.word	0x3ff2ffff
  407260:	40037fff 	.word	0x40037fff
  407264:	3ff80000 	.word	0x3ff80000
  407268:	bff00000 	.word	0xbff00000

0040726c <fabs>:
  40726c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407270:	4770      	bx	lr
  407272:	bf00      	nop
  407274:	0000      	movs	r0, r0
	...

00407278 <floor>:
  407278:	f3c1 520a 	ubfx	r2, r1, #20, #11
  40727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407280:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  407284:	2e13      	cmp	r6, #19
  407286:	460b      	mov	r3, r1
  407288:	460d      	mov	r5, r1
  40728a:	4604      	mov	r4, r0
  40728c:	4688      	mov	r8, r1
  40728e:	4607      	mov	r7, r0
  407290:	dc1d      	bgt.n	4072ce <floor+0x56>
  407292:	2e00      	cmp	r6, #0
  407294:	db40      	blt.n	407318 <floor+0xa0>
  407296:	4a3c      	ldr	r2, [pc, #240]	; (407388 <floor+0x110>)
  407298:	fa42 f906 	asr.w	r9, r2, r6
  40729c:	ea01 0209 	and.w	r2, r1, r9
  4072a0:	4302      	orrs	r2, r0
  4072a2:	4686      	mov	lr, r0
  4072a4:	d018      	beq.n	4072d8 <floor+0x60>
  4072a6:	a336      	add	r3, pc, #216	; (adr r3, 407380 <floor+0x108>)
  4072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072ac:	f004 fb38 	bl	40b920 <__adddf3>
  4072b0:	2200      	movs	r2, #0
  4072b2:	2300      	movs	r3, #0
  4072b4:	f004 ff76 	bl	40c1a4 <__aeabi_dcmpgt>
  4072b8:	b120      	cbz	r0, 4072c4 <floor+0x4c>
  4072ba:	2d00      	cmp	r5, #0
  4072bc:	db42      	blt.n	407344 <floor+0xcc>
  4072be:	ea28 0509 	bic.w	r5, r8, r9
  4072c2:	2700      	movs	r7, #0
  4072c4:	463c      	mov	r4, r7
  4072c6:	4629      	mov	r1, r5
  4072c8:	4620      	mov	r0, r4
  4072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072ce:	2e33      	cmp	r6, #51	; 0x33
  4072d0:	dd06      	ble.n	4072e0 <floor+0x68>
  4072d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  4072d6:	d02f      	beq.n	407338 <floor+0xc0>
  4072d8:	4619      	mov	r1, r3
  4072da:	4620      	mov	r0, r4
  4072dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072e0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  4072e4:	f04f 39ff 	mov.w	r9, #4294967295
  4072e8:	fa29 f902 	lsr.w	r9, r9, r2
  4072ec:	ea10 0f09 	tst.w	r0, r9
  4072f0:	d0f2      	beq.n	4072d8 <floor+0x60>
  4072f2:	a323      	add	r3, pc, #140	; (adr r3, 407380 <floor+0x108>)
  4072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072f8:	f004 fb12 	bl	40b920 <__adddf3>
  4072fc:	2200      	movs	r2, #0
  4072fe:	2300      	movs	r3, #0
  407300:	f004 ff50 	bl	40c1a4 <__aeabi_dcmpgt>
  407304:	2800      	cmp	r0, #0
  407306:	d0dd      	beq.n	4072c4 <floor+0x4c>
  407308:	2d00      	cmp	r5, #0
  40730a:	db21      	blt.n	407350 <floor+0xd8>
  40730c:	4645      	mov	r5, r8
  40730e:	ea27 0709 	bic.w	r7, r7, r9
  407312:	463c      	mov	r4, r7
  407314:	4629      	mov	r1, r5
  407316:	e7d7      	b.n	4072c8 <floor+0x50>
  407318:	a319      	add	r3, pc, #100	; (adr r3, 407380 <floor+0x108>)
  40731a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40731e:	f004 faff 	bl	40b920 <__adddf3>
  407322:	2200      	movs	r2, #0
  407324:	2300      	movs	r3, #0
  407326:	f004 ff3d 	bl	40c1a4 <__aeabi_dcmpgt>
  40732a:	2800      	cmp	r0, #0
  40732c:	d0ca      	beq.n	4072c4 <floor+0x4c>
  40732e:	2d00      	cmp	r5, #0
  407330:	db19      	blt.n	407366 <floor+0xee>
  407332:	2700      	movs	r7, #0
  407334:	463d      	mov	r5, r7
  407336:	e7c5      	b.n	4072c4 <floor+0x4c>
  407338:	4602      	mov	r2, r0
  40733a:	460b      	mov	r3, r1
  40733c:	f004 faf0 	bl	40b920 <__adddf3>
  407340:	4604      	mov	r4, r0
  407342:	e7ca      	b.n	4072da <floor+0x62>
  407344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  407348:	fa43 f606 	asr.w	r6, r3, r6
  40734c:	44b0      	add	r8, r6
  40734e:	e7b6      	b.n	4072be <floor+0x46>
  407350:	2e14      	cmp	r6, #20
  407352:	d010      	beq.n	407376 <floor+0xfe>
  407354:	2301      	movs	r3, #1
  407356:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  40735a:	fa03 f606 	lsl.w	r6, r3, r6
  40735e:	1937      	adds	r7, r6, r4
  407360:	bf28      	it	cs
  407362:	4498      	addcs	r8, r3
  407364:	e7d2      	b.n	40730c <floor+0x94>
  407366:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  40736a:	4b08      	ldr	r3, [pc, #32]	; (40738c <floor+0x114>)
  40736c:	4322      	orrs	r2, r4
  40736e:	bf18      	it	ne
  407370:	461d      	movne	r5, r3
  407372:	2700      	movs	r7, #0
  407374:	e7a6      	b.n	4072c4 <floor+0x4c>
  407376:	f105 0801 	add.w	r8, r5, #1
  40737a:	e7c7      	b.n	40730c <floor+0x94>
  40737c:	f3af 8000 	nop.w
  407380:	8800759c 	.word	0x8800759c
  407384:	7e37e43c 	.word	0x7e37e43c
  407388:	000fffff 	.word	0x000fffff
  40738c:	bff00000 	.word	0xbff00000

00407390 <scalbn>:
  407390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407392:	f3c1 560a 	ubfx	r6, r1, #20, #11
  407396:	4604      	mov	r4, r0
  407398:	460d      	mov	r5, r1
  40739a:	460b      	mov	r3, r1
  40739c:	4617      	mov	r7, r2
  40739e:	bb0e      	cbnz	r6, 4073e4 <scalbn+0x54>
  4073a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4073a4:	4303      	orrs	r3, r0
  4073a6:	4686      	mov	lr, r0
  4073a8:	d025      	beq.n	4073f6 <scalbn+0x66>
  4073aa:	2200      	movs	r2, #0
  4073ac:	4b34      	ldr	r3, [pc, #208]	; (407480 <scalbn+0xf0>)
  4073ae:	f004 fc69 	bl	40bc84 <__aeabi_dmul>
  4073b2:	4a34      	ldr	r2, [pc, #208]	; (407484 <scalbn+0xf4>)
  4073b4:	4297      	cmp	r7, r2
  4073b6:	4604      	mov	r4, r0
  4073b8:	460d      	mov	r5, r1
  4073ba:	460b      	mov	r3, r1
  4073bc:	db2a      	blt.n	407414 <scalbn+0x84>
  4073be:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4073c2:	3e36      	subs	r6, #54	; 0x36
  4073c4:	443e      	add	r6, r7
  4073c6:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4073ca:	4296      	cmp	r6, r2
  4073cc:	dc28      	bgt.n	407420 <scalbn+0x90>
  4073ce:	2e00      	cmp	r6, #0
  4073d0:	dd12      	ble.n	4073f8 <scalbn+0x68>
  4073d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  4073d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4073da:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4073de:	4620      	mov	r0, r4
  4073e0:	4629      	mov	r1, r5
  4073e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4073e8:	4296      	cmp	r6, r2
  4073ea:	d1eb      	bne.n	4073c4 <scalbn+0x34>
  4073ec:	4602      	mov	r2, r0
  4073ee:	460b      	mov	r3, r1
  4073f0:	f004 fa96 	bl	40b920 <__adddf3>
  4073f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073f8:	f116 0f35 	cmn.w	r6, #53	; 0x35
  4073fc:	da1d      	bge.n	40743a <scalbn+0xaa>
  4073fe:	f24c 3350 	movw	r3, #50000	; 0xc350
  407402:	429f      	cmp	r7, r3
  407404:	4622      	mov	r2, r4
  407406:	462b      	mov	r3, r5
  407408:	dc25      	bgt.n	407456 <scalbn+0xc6>
  40740a:	a119      	add	r1, pc, #100	; (adr r1, 407470 <scalbn+0xe0>)
  40740c:	e9d1 0100 	ldrd	r0, r1, [r1]
  407410:	f000 f83c 	bl	40748c <copysign>
  407414:	a316      	add	r3, pc, #88	; (adr r3, 407470 <scalbn+0xe0>)
  407416:	e9d3 2300 	ldrd	r2, r3, [r3]
  40741a:	f004 fc33 	bl	40bc84 <__aeabi_dmul>
  40741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407420:	4622      	mov	r2, r4
  407422:	462b      	mov	r3, r5
  407424:	a114      	add	r1, pc, #80	; (adr r1, 407478 <scalbn+0xe8>)
  407426:	e9d1 0100 	ldrd	r0, r1, [r1]
  40742a:	f000 f82f 	bl	40748c <copysign>
  40742e:	a312      	add	r3, pc, #72	; (adr r3, 407478 <scalbn+0xe8>)
  407430:	e9d3 2300 	ldrd	r2, r3, [r3]
  407434:	f004 fc26 	bl	40bc84 <__aeabi_dmul>
  407438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40743a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40743e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  407442:	3636      	adds	r6, #54	; 0x36
  407444:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  407448:	4620      	mov	r0, r4
  40744a:	4629      	mov	r1, r5
  40744c:	2200      	movs	r2, #0
  40744e:	4b0e      	ldr	r3, [pc, #56]	; (407488 <scalbn+0xf8>)
  407450:	f004 fc18 	bl	40bc84 <__aeabi_dmul>
  407454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407456:	a108      	add	r1, pc, #32	; (adr r1, 407478 <scalbn+0xe8>)
  407458:	e9d1 0100 	ldrd	r0, r1, [r1]
  40745c:	f000 f816 	bl	40748c <copysign>
  407460:	a305      	add	r3, pc, #20	; (adr r3, 407478 <scalbn+0xe8>)
  407462:	e9d3 2300 	ldrd	r2, r3, [r3]
  407466:	f004 fc0d 	bl	40bc84 <__aeabi_dmul>
  40746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40746c:	f3af 8000 	nop.w
  407470:	c2f8f359 	.word	0xc2f8f359
  407474:	01a56e1f 	.word	0x01a56e1f
  407478:	8800759c 	.word	0x8800759c
  40747c:	7e37e43c 	.word	0x7e37e43c
  407480:	43500000 	.word	0x43500000
  407484:	ffff3cb0 	.word	0xffff3cb0
  407488:	3c900000 	.word	0x3c900000

0040748c <copysign>:
  40748c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  407490:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  407494:	ea42 0103 	orr.w	r1, r2, r3
  407498:	4770      	bx	lr
  40749a:	bf00      	nop

0040749c <atof>:
  40749c:	2100      	movs	r1, #0
  40749e:	f001 bef3 	b.w	409288 <strtod>
	...

004074a4 <_fgets_r>:
  4074a4:	2a01      	cmp	r2, #1
  4074a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4074aa:	4681      	mov	r9, r0
  4074ac:	460e      	mov	r6, r1
  4074ae:	4690      	mov	r8, r2
  4074b0:	461c      	mov	r4, r3
  4074b2:	dc02      	bgt.n	4074ba <_fgets_r+0x16>
  4074b4:	2000      	movs	r0, #0
  4074b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4074ba:	b118      	cbz	r0, 4074c4 <_fgets_r+0x20>
  4074bc:	6983      	ldr	r3, [r0, #24]
  4074be:	b90b      	cbnz	r3, 4074c4 <_fgets_r+0x20>
  4074c0:	f000 f89c 	bl	4075fc <__sinit>
  4074c4:	4b25      	ldr	r3, [pc, #148]	; (40755c <_fgets_r+0xb8>)
  4074c6:	429c      	cmp	r4, r3
  4074c8:	d110      	bne.n	4074ec <_fgets_r+0x48>
  4074ca:	f8d9 4004 	ldr.w	r4, [r9, #4]
  4074ce:	f108 38ff 	add.w	r8, r8, #4294967295
  4074d2:	4637      	mov	r7, r6
  4074d4:	6865      	ldr	r5, [r4, #4]
  4074d6:	b9b5      	cbnz	r5, 407506 <_fgets_r+0x62>
  4074d8:	4621      	mov	r1, r4
  4074da:	4648      	mov	r0, r9
  4074dc:	f000 ff00 	bl	4082e0 <__srefill_r>
  4074e0:	b180      	cbz	r0, 407504 <_fgets_r+0x60>
  4074e2:	42b7      	cmp	r7, r6
  4074e4:	d0e6      	beq.n	4074b4 <_fgets_r+0x10>
  4074e6:	2300      	movs	r3, #0
  4074e8:	703b      	strb	r3, [r7, #0]
  4074ea:	e025      	b.n	407538 <_fgets_r+0x94>
  4074ec:	4b1c      	ldr	r3, [pc, #112]	; (407560 <_fgets_r+0xbc>)
  4074ee:	429c      	cmp	r4, r3
  4074f0:	d102      	bne.n	4074f8 <_fgets_r+0x54>
  4074f2:	f8d9 4008 	ldr.w	r4, [r9, #8]
  4074f6:	e7ea      	b.n	4074ce <_fgets_r+0x2a>
  4074f8:	4b1a      	ldr	r3, [pc, #104]	; (407564 <_fgets_r+0xc0>)
  4074fa:	429c      	cmp	r4, r3
  4074fc:	bf08      	it	eq
  4074fe:	f8d9 400c 	ldreq.w	r4, [r9, #12]
  407502:	e7e4      	b.n	4074ce <_fgets_r+0x2a>
  407504:	6865      	ldr	r5, [r4, #4]
  407506:	f8d4 a000 	ldr.w	sl, [r4]
  40750a:	4545      	cmp	r5, r8
  40750c:	bf28      	it	cs
  40750e:	4645      	movcs	r5, r8
  407510:	462a      	mov	r2, r5
  407512:	210a      	movs	r1, #10
  407514:	4650      	mov	r0, sl
  407516:	f000 f93b 	bl	407790 <memchr>
  40751a:	6863      	ldr	r3, [r4, #4]
  40751c:	b178      	cbz	r0, 40753e <_fgets_r+0x9a>
  40751e:	3001      	adds	r0, #1
  407520:	eba0 050a 	sub.w	r5, r0, sl
  407524:	1b5b      	subs	r3, r3, r5
  407526:	e884 0009 	stmia.w	r4, {r0, r3}
  40752a:	462a      	mov	r2, r5
  40752c:	4651      	mov	r1, sl
  40752e:	4638      	mov	r0, r7
  407530:	f000 f97e 	bl	407830 <memcpy>
  407534:	2300      	movs	r3, #0
  407536:	557b      	strb	r3, [r7, r5]
  407538:	4630      	mov	r0, r6
  40753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40753e:	1b5b      	subs	r3, r3, r5
  407540:	6063      	str	r3, [r4, #4]
  407542:	6823      	ldr	r3, [r4, #0]
  407544:	442b      	add	r3, r5
  407546:	4638      	mov	r0, r7
  407548:	6023      	str	r3, [r4, #0]
  40754a:	462a      	mov	r2, r5
  40754c:	4651      	mov	r1, sl
  40754e:	f000 f96f 	bl	407830 <memcpy>
  407552:	ebb8 0805 	subs.w	r8, r8, r5
  407556:	442f      	add	r7, r5
  407558:	d1bc      	bne.n	4074d4 <_fgets_r+0x30>
  40755a:	e7c4      	b.n	4074e6 <_fgets_r+0x42>
  40755c:	0040cc10 	.word	0x0040cc10
  407560:	0040cc30 	.word	0x0040cc30
  407564:	0040cbf0 	.word	0x0040cbf0

00407568 <fgets>:
  407568:	4613      	mov	r3, r2
  40756a:	460a      	mov	r2, r1
  40756c:	4601      	mov	r1, r0
  40756e:	4802      	ldr	r0, [pc, #8]	; (407578 <fgets+0x10>)
  407570:	6800      	ldr	r0, [r0, #0]
  407572:	f7ff bf97 	b.w	4074a4 <_fgets_r>
  407576:	bf00      	nop
  407578:	20400050 	.word	0x20400050

0040757c <_cleanup_r>:
  40757c:	4901      	ldr	r1, [pc, #4]	; (407584 <_cleanup_r+0x8>)
  40757e:	f000 b8c5 	b.w	40770c <_fwalk_reent>
  407582:	bf00      	nop
  407584:	0040a23d 	.word	0x0040a23d

00407588 <std.isra.0>:
  407588:	2300      	movs	r3, #0
  40758a:	b510      	push	{r4, lr}
  40758c:	4604      	mov	r4, r0
  40758e:	6003      	str	r3, [r0, #0]
  407590:	6043      	str	r3, [r0, #4]
  407592:	6083      	str	r3, [r0, #8]
  407594:	8181      	strh	r1, [r0, #12]
  407596:	6643      	str	r3, [r0, #100]	; 0x64
  407598:	81c2      	strh	r2, [r0, #14]
  40759a:	6103      	str	r3, [r0, #16]
  40759c:	6143      	str	r3, [r0, #20]
  40759e:	6183      	str	r3, [r0, #24]
  4075a0:	4619      	mov	r1, r3
  4075a2:	2208      	movs	r2, #8
  4075a4:	305c      	adds	r0, #92	; 0x5c
  4075a6:	f000 f94e 	bl	407846 <memset>
  4075aa:	4b05      	ldr	r3, [pc, #20]	; (4075c0 <std.isra.0+0x38>)
  4075ac:	6263      	str	r3, [r4, #36]	; 0x24
  4075ae:	4b05      	ldr	r3, [pc, #20]	; (4075c4 <std.isra.0+0x3c>)
  4075b0:	62a3      	str	r3, [r4, #40]	; 0x28
  4075b2:	4b05      	ldr	r3, [pc, #20]	; (4075c8 <std.isra.0+0x40>)
  4075b4:	62e3      	str	r3, [r4, #44]	; 0x2c
  4075b6:	4b05      	ldr	r3, [pc, #20]	; (4075cc <std.isra.0+0x44>)
  4075b8:	6224      	str	r4, [r4, #32]
  4075ba:	6323      	str	r3, [r4, #48]	; 0x30
  4075bc:	bd10      	pop	{r4, pc}
  4075be:	bf00      	nop
  4075c0:	004085c9 	.word	0x004085c9
  4075c4:	004085eb 	.word	0x004085eb
  4075c8:	00408623 	.word	0x00408623
  4075cc:	00408647 	.word	0x00408647

004075d0 <__sfmoreglue>:
  4075d0:	b570      	push	{r4, r5, r6, lr}
  4075d2:	1e4a      	subs	r2, r1, #1
  4075d4:	2568      	movs	r5, #104	; 0x68
  4075d6:	4355      	muls	r5, r2
  4075d8:	460e      	mov	r6, r1
  4075da:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4075de:	f000 f93b 	bl	407858 <_malloc_r>
  4075e2:	4604      	mov	r4, r0
  4075e4:	b140      	cbz	r0, 4075f8 <__sfmoreglue+0x28>
  4075e6:	2100      	movs	r1, #0
  4075e8:	e880 0042 	stmia.w	r0, {r1, r6}
  4075ec:	300c      	adds	r0, #12
  4075ee:	60a0      	str	r0, [r4, #8]
  4075f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4075f4:	f000 f927 	bl	407846 <memset>
  4075f8:	4620      	mov	r0, r4
  4075fa:	bd70      	pop	{r4, r5, r6, pc}

004075fc <__sinit>:
  4075fc:	6983      	ldr	r3, [r0, #24]
  4075fe:	b510      	push	{r4, lr}
  407600:	4604      	mov	r4, r0
  407602:	bb33      	cbnz	r3, 407652 <__sinit+0x56>
  407604:	6483      	str	r3, [r0, #72]	; 0x48
  407606:	64c3      	str	r3, [r0, #76]	; 0x4c
  407608:	6503      	str	r3, [r0, #80]	; 0x50
  40760a:	4b12      	ldr	r3, [pc, #72]	; (407654 <__sinit+0x58>)
  40760c:	4a12      	ldr	r2, [pc, #72]	; (407658 <__sinit+0x5c>)
  40760e:	681b      	ldr	r3, [r3, #0]
  407610:	6282      	str	r2, [r0, #40]	; 0x28
  407612:	4298      	cmp	r0, r3
  407614:	bf04      	itt	eq
  407616:	2301      	moveq	r3, #1
  407618:	6183      	streq	r3, [r0, #24]
  40761a:	f000 f81f 	bl	40765c <__sfp>
  40761e:	6060      	str	r0, [r4, #4]
  407620:	4620      	mov	r0, r4
  407622:	f000 f81b 	bl	40765c <__sfp>
  407626:	60a0      	str	r0, [r4, #8]
  407628:	4620      	mov	r0, r4
  40762a:	f000 f817 	bl	40765c <__sfp>
  40762e:	2200      	movs	r2, #0
  407630:	60e0      	str	r0, [r4, #12]
  407632:	2104      	movs	r1, #4
  407634:	6860      	ldr	r0, [r4, #4]
  407636:	f7ff ffa7 	bl	407588 <std.isra.0>
  40763a:	2201      	movs	r2, #1
  40763c:	2109      	movs	r1, #9
  40763e:	68a0      	ldr	r0, [r4, #8]
  407640:	f7ff ffa2 	bl	407588 <std.isra.0>
  407644:	2202      	movs	r2, #2
  407646:	2112      	movs	r1, #18
  407648:	68e0      	ldr	r0, [r4, #12]
  40764a:	f7ff ff9d 	bl	407588 <std.isra.0>
  40764e:	2301      	movs	r3, #1
  407650:	61a3      	str	r3, [r4, #24]
  407652:	bd10      	pop	{r4, pc}
  407654:	0040cc50 	.word	0x0040cc50
  407658:	0040757d 	.word	0x0040757d

0040765c <__sfp>:
  40765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40765e:	4b1c      	ldr	r3, [pc, #112]	; (4076d0 <__sfp+0x74>)
  407660:	681e      	ldr	r6, [r3, #0]
  407662:	69b3      	ldr	r3, [r6, #24]
  407664:	4607      	mov	r7, r0
  407666:	b913      	cbnz	r3, 40766e <__sfp+0x12>
  407668:	4630      	mov	r0, r6
  40766a:	f7ff ffc7 	bl	4075fc <__sinit>
  40766e:	3648      	adds	r6, #72	; 0x48
  407670:	68b4      	ldr	r4, [r6, #8]
  407672:	6873      	ldr	r3, [r6, #4]
  407674:	3b01      	subs	r3, #1
  407676:	d503      	bpl.n	407680 <__sfp+0x24>
  407678:	6833      	ldr	r3, [r6, #0]
  40767a:	b133      	cbz	r3, 40768a <__sfp+0x2e>
  40767c:	6836      	ldr	r6, [r6, #0]
  40767e:	e7f7      	b.n	407670 <__sfp+0x14>
  407680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  407684:	b16d      	cbz	r5, 4076a2 <__sfp+0x46>
  407686:	3468      	adds	r4, #104	; 0x68
  407688:	e7f4      	b.n	407674 <__sfp+0x18>
  40768a:	2104      	movs	r1, #4
  40768c:	4638      	mov	r0, r7
  40768e:	f7ff ff9f 	bl	4075d0 <__sfmoreglue>
  407692:	6030      	str	r0, [r6, #0]
  407694:	2800      	cmp	r0, #0
  407696:	d1f1      	bne.n	40767c <__sfp+0x20>
  407698:	230c      	movs	r3, #12
  40769a:	603b      	str	r3, [r7, #0]
  40769c:	4604      	mov	r4, r0
  40769e:	4620      	mov	r0, r4
  4076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4076a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4076a6:	81e3      	strh	r3, [r4, #14]
  4076a8:	2301      	movs	r3, #1
  4076aa:	81a3      	strh	r3, [r4, #12]
  4076ac:	6665      	str	r5, [r4, #100]	; 0x64
  4076ae:	6025      	str	r5, [r4, #0]
  4076b0:	60a5      	str	r5, [r4, #8]
  4076b2:	6065      	str	r5, [r4, #4]
  4076b4:	6125      	str	r5, [r4, #16]
  4076b6:	6165      	str	r5, [r4, #20]
  4076b8:	61a5      	str	r5, [r4, #24]
  4076ba:	2208      	movs	r2, #8
  4076bc:	4629      	mov	r1, r5
  4076be:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4076c2:	f000 f8c0 	bl	407846 <memset>
  4076c6:	6365      	str	r5, [r4, #52]	; 0x34
  4076c8:	63a5      	str	r5, [r4, #56]	; 0x38
  4076ca:	64a5      	str	r5, [r4, #72]	; 0x48
  4076cc:	64e5      	str	r5, [r4, #76]	; 0x4c
  4076ce:	e7e6      	b.n	40769e <__sfp+0x42>
  4076d0:	0040cc50 	.word	0x0040cc50

004076d4 <_fwalk>:
  4076d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076d8:	4688      	mov	r8, r1
  4076da:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4076de:	2600      	movs	r6, #0
  4076e0:	b914      	cbnz	r4, 4076e8 <_fwalk+0x14>
  4076e2:	4630      	mov	r0, r6
  4076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4076e8:	68a5      	ldr	r5, [r4, #8]
  4076ea:	6867      	ldr	r7, [r4, #4]
  4076ec:	3f01      	subs	r7, #1
  4076ee:	d501      	bpl.n	4076f4 <_fwalk+0x20>
  4076f0:	6824      	ldr	r4, [r4, #0]
  4076f2:	e7f5      	b.n	4076e0 <_fwalk+0xc>
  4076f4:	89ab      	ldrh	r3, [r5, #12]
  4076f6:	2b01      	cmp	r3, #1
  4076f8:	d906      	bls.n	407708 <_fwalk+0x34>
  4076fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4076fe:	3301      	adds	r3, #1
  407700:	d002      	beq.n	407708 <_fwalk+0x34>
  407702:	4628      	mov	r0, r5
  407704:	47c0      	blx	r8
  407706:	4306      	orrs	r6, r0
  407708:	3568      	adds	r5, #104	; 0x68
  40770a:	e7ef      	b.n	4076ec <_fwalk+0x18>

0040770c <_fwalk_reent>:
  40770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407710:	4680      	mov	r8, r0
  407712:	4689      	mov	r9, r1
  407714:	f100 0448 	add.w	r4, r0, #72	; 0x48
  407718:	2600      	movs	r6, #0
  40771a:	b914      	cbnz	r4, 407722 <_fwalk_reent+0x16>
  40771c:	4630      	mov	r0, r6
  40771e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407722:	68a5      	ldr	r5, [r4, #8]
  407724:	6867      	ldr	r7, [r4, #4]
  407726:	3f01      	subs	r7, #1
  407728:	d501      	bpl.n	40772e <_fwalk_reent+0x22>
  40772a:	6824      	ldr	r4, [r4, #0]
  40772c:	e7f5      	b.n	40771a <_fwalk_reent+0xe>
  40772e:	89ab      	ldrh	r3, [r5, #12]
  407730:	2b01      	cmp	r3, #1
  407732:	d907      	bls.n	407744 <_fwalk_reent+0x38>
  407734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  407738:	3301      	adds	r3, #1
  40773a:	d003      	beq.n	407744 <_fwalk_reent+0x38>
  40773c:	4629      	mov	r1, r5
  40773e:	4640      	mov	r0, r8
  407740:	47c8      	blx	r9
  407742:	4306      	orrs	r6, r0
  407744:	3568      	adds	r5, #104	; 0x68
  407746:	e7ee      	b.n	407726 <_fwalk_reent+0x1a>

00407748 <__libc_init_array>:
  407748:	b570      	push	{r4, r5, r6, lr}
  40774a:	4e0d      	ldr	r6, [pc, #52]	; (407780 <__libc_init_array+0x38>)
  40774c:	4c0d      	ldr	r4, [pc, #52]	; (407784 <__libc_init_array+0x3c>)
  40774e:	1ba4      	subs	r4, r4, r6
  407750:	10a4      	asrs	r4, r4, #2
  407752:	2500      	movs	r5, #0
  407754:	42a5      	cmp	r5, r4
  407756:	d109      	bne.n	40776c <__libc_init_array+0x24>
  407758:	4e0b      	ldr	r6, [pc, #44]	; (407788 <__libc_init_array+0x40>)
  40775a:	4c0c      	ldr	r4, [pc, #48]	; (40778c <__libc_init_array+0x44>)
  40775c:	f005 fbd0 	bl	40cf00 <_init>
  407760:	1ba4      	subs	r4, r4, r6
  407762:	10a4      	asrs	r4, r4, #2
  407764:	2500      	movs	r5, #0
  407766:	42a5      	cmp	r5, r4
  407768:	d105      	bne.n	407776 <__libc_init_array+0x2e>
  40776a:	bd70      	pop	{r4, r5, r6, pc}
  40776c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  407770:	4798      	blx	r3
  407772:	3501      	adds	r5, #1
  407774:	e7ee      	b.n	407754 <__libc_init_array+0xc>
  407776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40777a:	4798      	blx	r3
  40777c:	3501      	adds	r5, #1
  40777e:	e7f2      	b.n	407766 <__libc_init_array+0x1e>
  407780:	0040cf0c 	.word	0x0040cf0c
  407784:	0040cf0c 	.word	0x0040cf0c
  407788:	0040cf0c 	.word	0x0040cf0c
  40778c:	0040cf10 	.word	0x0040cf10

00407790 <memchr>:
  407790:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407794:	2a10      	cmp	r2, #16
  407796:	db2b      	blt.n	4077f0 <memchr+0x60>
  407798:	f010 0f07 	tst.w	r0, #7
  40779c:	d008      	beq.n	4077b0 <memchr+0x20>
  40779e:	f810 3b01 	ldrb.w	r3, [r0], #1
  4077a2:	3a01      	subs	r2, #1
  4077a4:	428b      	cmp	r3, r1
  4077a6:	d02d      	beq.n	407804 <memchr+0x74>
  4077a8:	f010 0f07 	tst.w	r0, #7
  4077ac:	b342      	cbz	r2, 407800 <memchr+0x70>
  4077ae:	d1f6      	bne.n	40779e <memchr+0xe>
  4077b0:	b4f0      	push	{r4, r5, r6, r7}
  4077b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4077b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4077ba:	f022 0407 	bic.w	r4, r2, #7
  4077be:	f07f 0700 	mvns.w	r7, #0
  4077c2:	2300      	movs	r3, #0
  4077c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4077c8:	3c08      	subs	r4, #8
  4077ca:	ea85 0501 	eor.w	r5, r5, r1
  4077ce:	ea86 0601 	eor.w	r6, r6, r1
  4077d2:	fa85 f547 	uadd8	r5, r5, r7
  4077d6:	faa3 f587 	sel	r5, r3, r7
  4077da:	fa86 f647 	uadd8	r6, r6, r7
  4077de:	faa5 f687 	sel	r6, r5, r7
  4077e2:	b98e      	cbnz	r6, 407808 <memchr+0x78>
  4077e4:	d1ee      	bne.n	4077c4 <memchr+0x34>
  4077e6:	bcf0      	pop	{r4, r5, r6, r7}
  4077e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4077ec:	f002 0207 	and.w	r2, r2, #7
  4077f0:	b132      	cbz	r2, 407800 <memchr+0x70>
  4077f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4077f6:	3a01      	subs	r2, #1
  4077f8:	ea83 0301 	eor.w	r3, r3, r1
  4077fc:	b113      	cbz	r3, 407804 <memchr+0x74>
  4077fe:	d1f8      	bne.n	4077f2 <memchr+0x62>
  407800:	2000      	movs	r0, #0
  407802:	4770      	bx	lr
  407804:	3801      	subs	r0, #1
  407806:	4770      	bx	lr
  407808:	2d00      	cmp	r5, #0
  40780a:	bf06      	itte	eq
  40780c:	4635      	moveq	r5, r6
  40780e:	3803      	subeq	r0, #3
  407810:	3807      	subne	r0, #7
  407812:	f015 0f01 	tst.w	r5, #1
  407816:	d107      	bne.n	407828 <memchr+0x98>
  407818:	3001      	adds	r0, #1
  40781a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40781e:	bf02      	ittt	eq
  407820:	3001      	addeq	r0, #1
  407822:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407826:	3001      	addeq	r0, #1
  407828:	bcf0      	pop	{r4, r5, r6, r7}
  40782a:	3801      	subs	r0, #1
  40782c:	4770      	bx	lr
  40782e:	bf00      	nop

00407830 <memcpy>:
  407830:	b510      	push	{r4, lr}
  407832:	1e43      	subs	r3, r0, #1
  407834:	440a      	add	r2, r1
  407836:	4291      	cmp	r1, r2
  407838:	d100      	bne.n	40783c <memcpy+0xc>
  40783a:	bd10      	pop	{r4, pc}
  40783c:	f811 4b01 	ldrb.w	r4, [r1], #1
  407840:	f803 4f01 	strb.w	r4, [r3, #1]!
  407844:	e7f7      	b.n	407836 <memcpy+0x6>

00407846 <memset>:
  407846:	4402      	add	r2, r0
  407848:	4603      	mov	r3, r0
  40784a:	4293      	cmp	r3, r2
  40784c:	d100      	bne.n	407850 <memset+0xa>
  40784e:	4770      	bx	lr
  407850:	f803 1b01 	strb.w	r1, [r3], #1
  407854:	e7f9      	b.n	40784a <memset+0x4>
	...

00407858 <_malloc_r>:
  407858:	b570      	push	{r4, r5, r6, lr}
  40785a:	1ccd      	adds	r5, r1, #3
  40785c:	f025 0503 	bic.w	r5, r5, #3
  407860:	3508      	adds	r5, #8
  407862:	2d0c      	cmp	r5, #12
  407864:	bf38      	it	cc
  407866:	250c      	movcc	r5, #12
  407868:	2d00      	cmp	r5, #0
  40786a:	4606      	mov	r6, r0
  40786c:	db01      	blt.n	407872 <_malloc_r+0x1a>
  40786e:	42a9      	cmp	r1, r5
  407870:	d903      	bls.n	40787a <_malloc_r+0x22>
  407872:	230c      	movs	r3, #12
  407874:	6033      	str	r3, [r6, #0]
  407876:	2000      	movs	r0, #0
  407878:	bd70      	pop	{r4, r5, r6, pc}
  40787a:	f003 f8d9 	bl	40aa30 <__malloc_lock>
  40787e:	4a23      	ldr	r2, [pc, #140]	; (40790c <_malloc_r+0xb4>)
  407880:	6814      	ldr	r4, [r2, #0]
  407882:	4621      	mov	r1, r4
  407884:	b991      	cbnz	r1, 4078ac <_malloc_r+0x54>
  407886:	4c22      	ldr	r4, [pc, #136]	; (407910 <_malloc_r+0xb8>)
  407888:	6823      	ldr	r3, [r4, #0]
  40788a:	b91b      	cbnz	r3, 407894 <_malloc_r+0x3c>
  40788c:	4630      	mov	r0, r6
  40788e:	f000 fdb1 	bl	4083f4 <_sbrk_r>
  407892:	6020      	str	r0, [r4, #0]
  407894:	4629      	mov	r1, r5
  407896:	4630      	mov	r0, r6
  407898:	f000 fdac 	bl	4083f4 <_sbrk_r>
  40789c:	1c43      	adds	r3, r0, #1
  40789e:	d126      	bne.n	4078ee <_malloc_r+0x96>
  4078a0:	230c      	movs	r3, #12
  4078a2:	6033      	str	r3, [r6, #0]
  4078a4:	4630      	mov	r0, r6
  4078a6:	f003 f8c4 	bl	40aa32 <__malloc_unlock>
  4078aa:	e7e4      	b.n	407876 <_malloc_r+0x1e>
  4078ac:	680b      	ldr	r3, [r1, #0]
  4078ae:	1b5b      	subs	r3, r3, r5
  4078b0:	d41a      	bmi.n	4078e8 <_malloc_r+0x90>
  4078b2:	2b0b      	cmp	r3, #11
  4078b4:	d90f      	bls.n	4078d6 <_malloc_r+0x7e>
  4078b6:	600b      	str	r3, [r1, #0]
  4078b8:	50cd      	str	r5, [r1, r3]
  4078ba:	18cc      	adds	r4, r1, r3
  4078bc:	4630      	mov	r0, r6
  4078be:	f003 f8b8 	bl	40aa32 <__malloc_unlock>
  4078c2:	f104 000b 	add.w	r0, r4, #11
  4078c6:	1d23      	adds	r3, r4, #4
  4078c8:	f020 0007 	bic.w	r0, r0, #7
  4078cc:	1ac3      	subs	r3, r0, r3
  4078ce:	d01b      	beq.n	407908 <_malloc_r+0xb0>
  4078d0:	425a      	negs	r2, r3
  4078d2:	50e2      	str	r2, [r4, r3]
  4078d4:	bd70      	pop	{r4, r5, r6, pc}
  4078d6:	428c      	cmp	r4, r1
  4078d8:	bf0d      	iteet	eq
  4078da:	6863      	ldreq	r3, [r4, #4]
  4078dc:	684b      	ldrne	r3, [r1, #4]
  4078de:	6063      	strne	r3, [r4, #4]
  4078e0:	6013      	streq	r3, [r2, #0]
  4078e2:	bf18      	it	ne
  4078e4:	460c      	movne	r4, r1
  4078e6:	e7e9      	b.n	4078bc <_malloc_r+0x64>
  4078e8:	460c      	mov	r4, r1
  4078ea:	6849      	ldr	r1, [r1, #4]
  4078ec:	e7ca      	b.n	407884 <_malloc_r+0x2c>
  4078ee:	1cc4      	adds	r4, r0, #3
  4078f0:	f024 0403 	bic.w	r4, r4, #3
  4078f4:	42a0      	cmp	r0, r4
  4078f6:	d005      	beq.n	407904 <_malloc_r+0xac>
  4078f8:	1a21      	subs	r1, r4, r0
  4078fa:	4630      	mov	r0, r6
  4078fc:	f000 fd7a 	bl	4083f4 <_sbrk_r>
  407900:	3001      	adds	r0, #1
  407902:	d0cd      	beq.n	4078a0 <_malloc_r+0x48>
  407904:	6025      	str	r5, [r4, #0]
  407906:	e7d9      	b.n	4078bc <_malloc_r+0x64>
  407908:	bd70      	pop	{r4, r5, r6, pc}
  40790a:	bf00      	nop
  40790c:	20430764 	.word	0x20430764
  407910:	20430768 	.word	0x20430768

00407914 <__cvt>:
  407914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407918:	b088      	sub	sp, #32
  40791a:	2b00      	cmp	r3, #0
  40791c:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40791e:	9912      	ldr	r1, [sp, #72]	; 0x48
  407920:	9d10      	ldr	r5, [sp, #64]	; 0x40
  407922:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  407926:	461e      	mov	r6, r3
  407928:	f027 0720 	bic.w	r7, r7, #32
  40792c:	bfbb      	ittet	lt
  40792e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  407932:	461e      	movlt	r6, r3
  407934:	2300      	movge	r3, #0
  407936:	232d      	movlt	r3, #45	; 0x2d
  407938:	2f46      	cmp	r7, #70	; 0x46
  40793a:	4614      	mov	r4, r2
  40793c:	700b      	strb	r3, [r1, #0]
  40793e:	d004      	beq.n	40794a <__cvt+0x36>
  407940:	2f45      	cmp	r7, #69	; 0x45
  407942:	d100      	bne.n	407946 <__cvt+0x32>
  407944:	3501      	adds	r5, #1
  407946:	2302      	movs	r3, #2
  407948:	e000      	b.n	40794c <__cvt+0x38>
  40794a:	2303      	movs	r3, #3
  40794c:	aa07      	add	r2, sp, #28
  40794e:	9204      	str	r2, [sp, #16]
  407950:	aa06      	add	r2, sp, #24
  407952:	9203      	str	r2, [sp, #12]
  407954:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  407958:	4622      	mov	r2, r4
  40795a:	4633      	mov	r3, r6
  40795c:	f001 fe14 	bl	409588 <_dtoa_r>
  407960:	2f47      	cmp	r7, #71	; 0x47
  407962:	4680      	mov	r8, r0
  407964:	d102      	bne.n	40796c <__cvt+0x58>
  407966:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407968:	07db      	lsls	r3, r3, #31
  40796a:	d526      	bpl.n	4079ba <__cvt+0xa6>
  40796c:	2f46      	cmp	r7, #70	; 0x46
  40796e:	eb08 0905 	add.w	r9, r8, r5
  407972:	d111      	bne.n	407998 <__cvt+0x84>
  407974:	f898 3000 	ldrb.w	r3, [r8]
  407978:	2b30      	cmp	r3, #48	; 0x30
  40797a:	d10a      	bne.n	407992 <__cvt+0x7e>
  40797c:	2200      	movs	r2, #0
  40797e:	2300      	movs	r3, #0
  407980:	4620      	mov	r0, r4
  407982:	4631      	mov	r1, r6
  407984:	f004 fbe6 	bl	40c154 <__aeabi_dcmpeq>
  407988:	b918      	cbnz	r0, 407992 <__cvt+0x7e>
  40798a:	f1c5 0501 	rsb	r5, r5, #1
  40798e:	f8ca 5000 	str.w	r5, [sl]
  407992:	f8da 3000 	ldr.w	r3, [sl]
  407996:	4499      	add	r9, r3
  407998:	2200      	movs	r2, #0
  40799a:	2300      	movs	r3, #0
  40799c:	4620      	mov	r0, r4
  40799e:	4631      	mov	r1, r6
  4079a0:	f004 fbd8 	bl	40c154 <__aeabi_dcmpeq>
  4079a4:	b938      	cbnz	r0, 4079b6 <__cvt+0xa2>
  4079a6:	2230      	movs	r2, #48	; 0x30
  4079a8:	9b07      	ldr	r3, [sp, #28]
  4079aa:	4599      	cmp	r9, r3
  4079ac:	d905      	bls.n	4079ba <__cvt+0xa6>
  4079ae:	1c59      	adds	r1, r3, #1
  4079b0:	9107      	str	r1, [sp, #28]
  4079b2:	701a      	strb	r2, [r3, #0]
  4079b4:	e7f8      	b.n	4079a8 <__cvt+0x94>
  4079b6:	f8cd 901c 	str.w	r9, [sp, #28]
  4079ba:	9b07      	ldr	r3, [sp, #28]
  4079bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4079be:	eba3 0308 	sub.w	r3, r3, r8
  4079c2:	4640      	mov	r0, r8
  4079c4:	6013      	str	r3, [r2, #0]
  4079c6:	b008      	add	sp, #32
  4079c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004079cc <__exponent>:
  4079cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4079ce:	4603      	mov	r3, r0
  4079d0:	2900      	cmp	r1, #0
  4079d2:	bfb8      	it	lt
  4079d4:	4249      	neglt	r1, r1
  4079d6:	f803 2b02 	strb.w	r2, [r3], #2
  4079da:	bfb4      	ite	lt
  4079dc:	222d      	movlt	r2, #45	; 0x2d
  4079de:	222b      	movge	r2, #43	; 0x2b
  4079e0:	2909      	cmp	r1, #9
  4079e2:	7042      	strb	r2, [r0, #1]
  4079e4:	dd20      	ble.n	407a28 <__exponent+0x5c>
  4079e6:	f10d 0207 	add.w	r2, sp, #7
  4079ea:	4617      	mov	r7, r2
  4079ec:	260a      	movs	r6, #10
  4079ee:	fb91 f5f6 	sdiv	r5, r1, r6
  4079f2:	fb06 1115 	mls	r1, r6, r5, r1
  4079f6:	3130      	adds	r1, #48	; 0x30
  4079f8:	2d09      	cmp	r5, #9
  4079fa:	f802 1c01 	strb.w	r1, [r2, #-1]
  4079fe:	f102 34ff 	add.w	r4, r2, #4294967295
  407a02:	4629      	mov	r1, r5
  407a04:	dc09      	bgt.n	407a1a <__exponent+0x4e>
  407a06:	3130      	adds	r1, #48	; 0x30
  407a08:	3a02      	subs	r2, #2
  407a0a:	f804 1c01 	strb.w	r1, [r4, #-1]
  407a0e:	42ba      	cmp	r2, r7
  407a10:	461c      	mov	r4, r3
  407a12:	d304      	bcc.n	407a1e <__exponent+0x52>
  407a14:	1a20      	subs	r0, r4, r0
  407a16:	b003      	add	sp, #12
  407a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a1a:	4622      	mov	r2, r4
  407a1c:	e7e7      	b.n	4079ee <__exponent+0x22>
  407a1e:	f812 1b01 	ldrb.w	r1, [r2], #1
  407a22:	f803 1b01 	strb.w	r1, [r3], #1
  407a26:	e7f2      	b.n	407a0e <__exponent+0x42>
  407a28:	2230      	movs	r2, #48	; 0x30
  407a2a:	461c      	mov	r4, r3
  407a2c:	4411      	add	r1, r2
  407a2e:	f804 2b02 	strb.w	r2, [r4], #2
  407a32:	7059      	strb	r1, [r3, #1]
  407a34:	e7ee      	b.n	407a14 <__exponent+0x48>
	...

00407a38 <_printf_float>:
  407a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a3c:	b091      	sub	sp, #68	; 0x44
  407a3e:	460c      	mov	r4, r1
  407a40:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  407a42:	4693      	mov	fp, r2
  407a44:	461e      	mov	r6, r3
  407a46:	4605      	mov	r5, r0
  407a48:	f002 ff54 	bl	40a8f4 <_localeconv_r>
  407a4c:	6803      	ldr	r3, [r0, #0]
  407a4e:	9309      	str	r3, [sp, #36]	; 0x24
  407a50:	4618      	mov	r0, r3
  407a52:	f000 fdfc 	bl	40864e <strlen>
  407a56:	2300      	movs	r3, #0
  407a58:	930e      	str	r3, [sp, #56]	; 0x38
  407a5a:	683b      	ldr	r3, [r7, #0]
  407a5c:	900a      	str	r0, [sp, #40]	; 0x28
  407a5e:	3307      	adds	r3, #7
  407a60:	f023 0307 	bic.w	r3, r3, #7
  407a64:	f103 0208 	add.w	r2, r3, #8
  407a68:	f894 8018 	ldrb.w	r8, [r4, #24]
  407a6c:	f8d4 a000 	ldr.w	sl, [r4]
  407a70:	603a      	str	r2, [r7, #0]
  407a72:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  407a7a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  407a7e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  407a80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  407a84:	930b      	str	r3, [sp, #44]	; 0x2c
  407a86:	f04f 32ff 	mov.w	r2, #4294967295
  407a8a:	4ba6      	ldr	r3, [pc, #664]	; (407d24 <_printf_float+0x2ec>)
  407a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a8e:	4638      	mov	r0, r7
  407a90:	f004 fb92 	bl	40c1b8 <__aeabi_dcmpun>
  407a94:	2800      	cmp	r0, #0
  407a96:	f040 81f7 	bne.w	407e88 <_printf_float+0x450>
  407a9a:	f04f 32ff 	mov.w	r2, #4294967295
  407a9e:	4ba1      	ldr	r3, [pc, #644]	; (407d24 <_printf_float+0x2ec>)
  407aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407aa2:	4638      	mov	r0, r7
  407aa4:	f004 fb6a 	bl	40c17c <__aeabi_dcmple>
  407aa8:	2800      	cmp	r0, #0
  407aaa:	f040 81ed 	bne.w	407e88 <_printf_float+0x450>
  407aae:	2200      	movs	r2, #0
  407ab0:	2300      	movs	r3, #0
  407ab2:	4638      	mov	r0, r7
  407ab4:	4649      	mov	r1, r9
  407ab6:	f004 fb57 	bl	40c168 <__aeabi_dcmplt>
  407aba:	b110      	cbz	r0, 407ac2 <_printf_float+0x8a>
  407abc:	232d      	movs	r3, #45	; 0x2d
  407abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  407ac2:	4b99      	ldr	r3, [pc, #612]	; (407d28 <_printf_float+0x2f0>)
  407ac4:	4f99      	ldr	r7, [pc, #612]	; (407d2c <_printf_float+0x2f4>)
  407ac6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  407aca:	bf98      	it	ls
  407acc:	461f      	movls	r7, r3
  407ace:	2303      	movs	r3, #3
  407ad0:	6123      	str	r3, [r4, #16]
  407ad2:	f02a 0304 	bic.w	r3, sl, #4
  407ad6:	6023      	str	r3, [r4, #0]
  407ad8:	f04f 0900 	mov.w	r9, #0
  407adc:	9600      	str	r6, [sp, #0]
  407ade:	465b      	mov	r3, fp
  407ae0:	aa0f      	add	r2, sp, #60	; 0x3c
  407ae2:	4621      	mov	r1, r4
  407ae4:	4628      	mov	r0, r5
  407ae6:	f000 f9df 	bl	407ea8 <_printf_common>
  407aea:	3001      	adds	r0, #1
  407aec:	f040 809a 	bne.w	407c24 <_printf_float+0x1ec>
  407af0:	f04f 30ff 	mov.w	r0, #4294967295
  407af4:	b011      	add	sp, #68	; 0x44
  407af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407afa:	6862      	ldr	r2, [r4, #4]
  407afc:	1c53      	adds	r3, r2, #1
  407afe:	a80e      	add	r0, sp, #56	; 0x38
  407b00:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  407b04:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  407b08:	d141      	bne.n	407b8e <_printf_float+0x156>
  407b0a:	2206      	movs	r2, #6
  407b0c:	6062      	str	r2, [r4, #4]
  407b0e:	6023      	str	r3, [r4, #0]
  407b10:	2100      	movs	r1, #0
  407b12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  407b16:	9301      	str	r3, [sp, #4]
  407b18:	6863      	ldr	r3, [r4, #4]
  407b1a:	9005      	str	r0, [sp, #20]
  407b1c:	9202      	str	r2, [sp, #8]
  407b1e:	9300      	str	r3, [sp, #0]
  407b20:	463a      	mov	r2, r7
  407b22:	464b      	mov	r3, r9
  407b24:	9106      	str	r1, [sp, #24]
  407b26:	f8cd 8010 	str.w	r8, [sp, #16]
  407b2a:	f8cd e00c 	str.w	lr, [sp, #12]
  407b2e:	4628      	mov	r0, r5
  407b30:	f7ff fef0 	bl	407914 <__cvt>
  407b34:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  407b38:	2b47      	cmp	r3, #71	; 0x47
  407b3a:	4607      	mov	r7, r0
  407b3c:	d109      	bne.n	407b52 <_printf_float+0x11a>
  407b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407b40:	1cd8      	adds	r0, r3, #3
  407b42:	db02      	blt.n	407b4a <_printf_float+0x112>
  407b44:	6862      	ldr	r2, [r4, #4]
  407b46:	4293      	cmp	r3, r2
  407b48:	dd59      	ble.n	407bfe <_printf_float+0x1c6>
  407b4a:	f1a8 0802 	sub.w	r8, r8, #2
  407b4e:	fa5f f888 	uxtb.w	r8, r8
  407b52:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  407b56:	990d      	ldr	r1, [sp, #52]	; 0x34
  407b58:	d836      	bhi.n	407bc8 <_printf_float+0x190>
  407b5a:	3901      	subs	r1, #1
  407b5c:	4642      	mov	r2, r8
  407b5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  407b62:	910d      	str	r1, [sp, #52]	; 0x34
  407b64:	f7ff ff32 	bl	4079cc <__exponent>
  407b68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407b6a:	1883      	adds	r3, r0, r2
  407b6c:	2a01      	cmp	r2, #1
  407b6e:	4681      	mov	r9, r0
  407b70:	6123      	str	r3, [r4, #16]
  407b72:	dc02      	bgt.n	407b7a <_printf_float+0x142>
  407b74:	6822      	ldr	r2, [r4, #0]
  407b76:	07d1      	lsls	r1, r2, #31
  407b78:	d501      	bpl.n	407b7e <_printf_float+0x146>
  407b7a:	3301      	adds	r3, #1
  407b7c:	6123      	str	r3, [r4, #16]
  407b7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  407b82:	2b00      	cmp	r3, #0
  407b84:	d0aa      	beq.n	407adc <_printf_float+0xa4>
  407b86:	232d      	movs	r3, #45	; 0x2d
  407b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  407b8c:	e7a6      	b.n	407adc <_printf_float+0xa4>
  407b8e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  407b92:	d002      	beq.n	407b9a <_printf_float+0x162>
  407b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  407b98:	d1b9      	bne.n	407b0e <_printf_float+0xd6>
  407b9a:	b19a      	cbz	r2, 407bc4 <_printf_float+0x18c>
  407b9c:	2100      	movs	r1, #0
  407b9e:	9106      	str	r1, [sp, #24]
  407ba0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  407ba4:	e88d 000c 	stmia.w	sp, {r2, r3}
  407ba8:	6023      	str	r3, [r4, #0]
  407baa:	9005      	str	r0, [sp, #20]
  407bac:	463a      	mov	r2, r7
  407bae:	f8cd 8010 	str.w	r8, [sp, #16]
  407bb2:	f8cd e00c 	str.w	lr, [sp, #12]
  407bb6:	9102      	str	r1, [sp, #8]
  407bb8:	464b      	mov	r3, r9
  407bba:	4628      	mov	r0, r5
  407bbc:	f7ff feaa 	bl	407914 <__cvt>
  407bc0:	4607      	mov	r7, r0
  407bc2:	e7bc      	b.n	407b3e <_printf_float+0x106>
  407bc4:	2201      	movs	r2, #1
  407bc6:	e7a1      	b.n	407b0c <_printf_float+0xd4>
  407bc8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  407bcc:	d119      	bne.n	407c02 <_printf_float+0x1ca>
  407bce:	2900      	cmp	r1, #0
  407bd0:	6863      	ldr	r3, [r4, #4]
  407bd2:	dd0c      	ble.n	407bee <_printf_float+0x1b6>
  407bd4:	6121      	str	r1, [r4, #16]
  407bd6:	b913      	cbnz	r3, 407bde <_printf_float+0x1a6>
  407bd8:	6822      	ldr	r2, [r4, #0]
  407bda:	07d2      	lsls	r2, r2, #31
  407bdc:	d502      	bpl.n	407be4 <_printf_float+0x1ac>
  407bde:	3301      	adds	r3, #1
  407be0:	440b      	add	r3, r1
  407be2:	6123      	str	r3, [r4, #16]
  407be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407be6:	65a3      	str	r3, [r4, #88]	; 0x58
  407be8:	f04f 0900 	mov.w	r9, #0
  407bec:	e7c7      	b.n	407b7e <_printf_float+0x146>
  407bee:	b913      	cbnz	r3, 407bf6 <_printf_float+0x1be>
  407bf0:	6822      	ldr	r2, [r4, #0]
  407bf2:	07d0      	lsls	r0, r2, #31
  407bf4:	d501      	bpl.n	407bfa <_printf_float+0x1c2>
  407bf6:	3302      	adds	r3, #2
  407bf8:	e7f3      	b.n	407be2 <_printf_float+0x1aa>
  407bfa:	2301      	movs	r3, #1
  407bfc:	e7f1      	b.n	407be2 <_printf_float+0x1aa>
  407bfe:	f04f 0867 	mov.w	r8, #103	; 0x67
  407c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407c06:	4293      	cmp	r3, r2
  407c08:	db05      	blt.n	407c16 <_printf_float+0x1de>
  407c0a:	6822      	ldr	r2, [r4, #0]
  407c0c:	6123      	str	r3, [r4, #16]
  407c0e:	07d1      	lsls	r1, r2, #31
  407c10:	d5e8      	bpl.n	407be4 <_printf_float+0x1ac>
  407c12:	3301      	adds	r3, #1
  407c14:	e7e5      	b.n	407be2 <_printf_float+0x1aa>
  407c16:	2b00      	cmp	r3, #0
  407c18:	bfd4      	ite	le
  407c1a:	f1c3 0302 	rsble	r3, r3, #2
  407c1e:	2301      	movgt	r3, #1
  407c20:	4413      	add	r3, r2
  407c22:	e7de      	b.n	407be2 <_printf_float+0x1aa>
  407c24:	6823      	ldr	r3, [r4, #0]
  407c26:	055a      	lsls	r2, r3, #21
  407c28:	d407      	bmi.n	407c3a <_printf_float+0x202>
  407c2a:	6923      	ldr	r3, [r4, #16]
  407c2c:	463a      	mov	r2, r7
  407c2e:	4659      	mov	r1, fp
  407c30:	4628      	mov	r0, r5
  407c32:	47b0      	blx	r6
  407c34:	3001      	adds	r0, #1
  407c36:	d12a      	bne.n	407c8e <_printf_float+0x256>
  407c38:	e75a      	b.n	407af0 <_printf_float+0xb8>
  407c3a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  407c3e:	f240 80dc 	bls.w	407dfa <_printf_float+0x3c2>
  407c42:	2200      	movs	r2, #0
  407c44:	2300      	movs	r3, #0
  407c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  407c4a:	f004 fa83 	bl	40c154 <__aeabi_dcmpeq>
  407c4e:	2800      	cmp	r0, #0
  407c50:	d039      	beq.n	407cc6 <_printf_float+0x28e>
  407c52:	2301      	movs	r3, #1
  407c54:	4a36      	ldr	r2, [pc, #216]	; (407d30 <_printf_float+0x2f8>)
  407c56:	4659      	mov	r1, fp
  407c58:	4628      	mov	r0, r5
  407c5a:	47b0      	blx	r6
  407c5c:	3001      	adds	r0, #1
  407c5e:	f43f af47 	beq.w	407af0 <_printf_float+0xb8>
  407c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407c66:	429a      	cmp	r2, r3
  407c68:	db02      	blt.n	407c70 <_printf_float+0x238>
  407c6a:	6823      	ldr	r3, [r4, #0]
  407c6c:	07d8      	lsls	r0, r3, #31
  407c6e:	d50e      	bpl.n	407c8e <_printf_float+0x256>
  407c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407c74:	4659      	mov	r1, fp
  407c76:	4628      	mov	r0, r5
  407c78:	47b0      	blx	r6
  407c7a:	3001      	adds	r0, #1
  407c7c:	f43f af38 	beq.w	407af0 <_printf_float+0xb8>
  407c80:	2700      	movs	r7, #0
  407c82:	f104 081a 	add.w	r8, r4, #26
  407c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407c88:	3b01      	subs	r3, #1
  407c8a:	429f      	cmp	r7, r3
  407c8c:	db11      	blt.n	407cb2 <_printf_float+0x27a>
  407c8e:	6823      	ldr	r3, [r4, #0]
  407c90:	079f      	lsls	r7, r3, #30
  407c92:	d508      	bpl.n	407ca6 <_printf_float+0x26e>
  407c94:	2700      	movs	r7, #0
  407c96:	f104 0819 	add.w	r8, r4, #25
  407c9a:	68e3      	ldr	r3, [r4, #12]
  407c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407c9e:	1a9b      	subs	r3, r3, r2
  407ca0:	429f      	cmp	r7, r3
  407ca2:	f2c0 80e7 	blt.w	407e74 <_printf_float+0x43c>
  407ca6:	68e0      	ldr	r0, [r4, #12]
  407ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407caa:	4298      	cmp	r0, r3
  407cac:	bfb8      	it	lt
  407cae:	4618      	movlt	r0, r3
  407cb0:	e720      	b.n	407af4 <_printf_float+0xbc>
  407cb2:	2301      	movs	r3, #1
  407cb4:	4642      	mov	r2, r8
  407cb6:	4659      	mov	r1, fp
  407cb8:	4628      	mov	r0, r5
  407cba:	47b0      	blx	r6
  407cbc:	3001      	adds	r0, #1
  407cbe:	f43f af17 	beq.w	407af0 <_printf_float+0xb8>
  407cc2:	3701      	adds	r7, #1
  407cc4:	e7df      	b.n	407c86 <_printf_float+0x24e>
  407cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407cc8:	2b00      	cmp	r3, #0
  407cca:	dc33      	bgt.n	407d34 <_printf_float+0x2fc>
  407ccc:	2301      	movs	r3, #1
  407cce:	4a18      	ldr	r2, [pc, #96]	; (407d30 <_printf_float+0x2f8>)
  407cd0:	4659      	mov	r1, fp
  407cd2:	4628      	mov	r0, r5
  407cd4:	47b0      	blx	r6
  407cd6:	3001      	adds	r0, #1
  407cd8:	f43f af0a 	beq.w	407af0 <_printf_float+0xb8>
  407cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407cde:	b923      	cbnz	r3, 407cea <_printf_float+0x2b2>
  407ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407ce2:	b913      	cbnz	r3, 407cea <_printf_float+0x2b2>
  407ce4:	6823      	ldr	r3, [r4, #0]
  407ce6:	07d9      	lsls	r1, r3, #31
  407ce8:	d5d1      	bpl.n	407c8e <_printf_float+0x256>
  407cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407cee:	4659      	mov	r1, fp
  407cf0:	4628      	mov	r0, r5
  407cf2:	47b0      	blx	r6
  407cf4:	3001      	adds	r0, #1
  407cf6:	f43f aefb 	beq.w	407af0 <_printf_float+0xb8>
  407cfa:	f04f 0800 	mov.w	r8, #0
  407cfe:	f104 091a 	add.w	r9, r4, #26
  407d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407d04:	425b      	negs	r3, r3
  407d06:	4598      	cmp	r8, r3
  407d08:	db01      	blt.n	407d0e <_printf_float+0x2d6>
  407d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d0c:	e78e      	b.n	407c2c <_printf_float+0x1f4>
  407d0e:	2301      	movs	r3, #1
  407d10:	464a      	mov	r2, r9
  407d12:	4659      	mov	r1, fp
  407d14:	4628      	mov	r0, r5
  407d16:	47b0      	blx	r6
  407d18:	3001      	adds	r0, #1
  407d1a:	f43f aee9 	beq.w	407af0 <_printf_float+0xb8>
  407d1e:	f108 0801 	add.w	r8, r8, #1
  407d22:	e7ee      	b.n	407d02 <_printf_float+0x2ca>
  407d24:	7fefffff 	.word	0x7fefffff
  407d28:	0040cc54 	.word	0x0040cc54
  407d2c:	0040cc58 	.word	0x0040cc58
  407d30:	0040cc64 	.word	0x0040cc64
  407d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
  407d38:	429a      	cmp	r2, r3
  407d3a:	bfa8      	it	ge
  407d3c:	461a      	movge	r2, r3
  407d3e:	2a00      	cmp	r2, #0
  407d40:	4690      	mov	r8, r2
  407d42:	dc36      	bgt.n	407db2 <_printf_float+0x37a>
  407d44:	f104 031a 	add.w	r3, r4, #26
  407d48:	f04f 0a00 	mov.w	sl, #0
  407d4c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  407d50:	930b      	str	r3, [sp, #44]	; 0x2c
  407d52:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  407d56:	eba9 0308 	sub.w	r3, r9, r8
  407d5a:	459a      	cmp	sl, r3
  407d5c:	db31      	blt.n	407dc2 <_printf_float+0x38a>
  407d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407d62:	429a      	cmp	r2, r3
  407d64:	db38      	blt.n	407dd8 <_printf_float+0x3a0>
  407d66:	6823      	ldr	r3, [r4, #0]
  407d68:	07da      	lsls	r2, r3, #31
  407d6a:	d435      	bmi.n	407dd8 <_printf_float+0x3a0>
  407d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d6e:	990d      	ldr	r1, [sp, #52]	; 0x34
  407d70:	eba3 0209 	sub.w	r2, r3, r9
  407d74:	eba3 0801 	sub.w	r8, r3, r1
  407d78:	4590      	cmp	r8, r2
  407d7a:	bfa8      	it	ge
  407d7c:	4690      	movge	r8, r2
  407d7e:	f1b8 0f00 	cmp.w	r8, #0
  407d82:	dc31      	bgt.n	407de8 <_printf_float+0x3b0>
  407d84:	2700      	movs	r7, #0
  407d86:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  407d8a:	f104 091a 	add.w	r9, r4, #26
  407d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d92:	1a9b      	subs	r3, r3, r2
  407d94:	eba3 0308 	sub.w	r3, r3, r8
  407d98:	429f      	cmp	r7, r3
  407d9a:	f6bf af78 	bge.w	407c8e <_printf_float+0x256>
  407d9e:	2301      	movs	r3, #1
  407da0:	464a      	mov	r2, r9
  407da2:	4659      	mov	r1, fp
  407da4:	4628      	mov	r0, r5
  407da6:	47b0      	blx	r6
  407da8:	3001      	adds	r0, #1
  407daa:	f43f aea1 	beq.w	407af0 <_printf_float+0xb8>
  407dae:	3701      	adds	r7, #1
  407db0:	e7ed      	b.n	407d8e <_printf_float+0x356>
  407db2:	4613      	mov	r3, r2
  407db4:	4659      	mov	r1, fp
  407db6:	463a      	mov	r2, r7
  407db8:	4628      	mov	r0, r5
  407dba:	47b0      	blx	r6
  407dbc:	3001      	adds	r0, #1
  407dbe:	d1c1      	bne.n	407d44 <_printf_float+0x30c>
  407dc0:	e696      	b.n	407af0 <_printf_float+0xb8>
  407dc2:	2301      	movs	r3, #1
  407dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407dc6:	4659      	mov	r1, fp
  407dc8:	4628      	mov	r0, r5
  407dca:	47b0      	blx	r6
  407dcc:	3001      	adds	r0, #1
  407dce:	f43f ae8f 	beq.w	407af0 <_printf_float+0xb8>
  407dd2:	f10a 0a01 	add.w	sl, sl, #1
  407dd6:	e7bc      	b.n	407d52 <_printf_float+0x31a>
  407dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407ddc:	4659      	mov	r1, fp
  407dde:	4628      	mov	r0, r5
  407de0:	47b0      	blx	r6
  407de2:	3001      	adds	r0, #1
  407de4:	d1c2      	bne.n	407d6c <_printf_float+0x334>
  407de6:	e683      	b.n	407af0 <_printf_float+0xb8>
  407de8:	4643      	mov	r3, r8
  407dea:	eb07 0209 	add.w	r2, r7, r9
  407dee:	4659      	mov	r1, fp
  407df0:	4628      	mov	r0, r5
  407df2:	47b0      	blx	r6
  407df4:	3001      	adds	r0, #1
  407df6:	d1c5      	bne.n	407d84 <_printf_float+0x34c>
  407df8:	e67a      	b.n	407af0 <_printf_float+0xb8>
  407dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407dfc:	2a01      	cmp	r2, #1
  407dfe:	dc01      	bgt.n	407e04 <_printf_float+0x3cc>
  407e00:	07db      	lsls	r3, r3, #31
  407e02:	d534      	bpl.n	407e6e <_printf_float+0x436>
  407e04:	2301      	movs	r3, #1
  407e06:	463a      	mov	r2, r7
  407e08:	4659      	mov	r1, fp
  407e0a:	4628      	mov	r0, r5
  407e0c:	47b0      	blx	r6
  407e0e:	3001      	adds	r0, #1
  407e10:	f43f ae6e 	beq.w	407af0 <_printf_float+0xb8>
  407e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407e18:	4659      	mov	r1, fp
  407e1a:	4628      	mov	r0, r5
  407e1c:	47b0      	blx	r6
  407e1e:	3001      	adds	r0, #1
  407e20:	f43f ae66 	beq.w	407af0 <_printf_float+0xb8>
  407e24:	2200      	movs	r2, #0
  407e26:	2300      	movs	r3, #0
  407e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  407e2c:	f004 f992 	bl	40c154 <__aeabi_dcmpeq>
  407e30:	b150      	cbz	r0, 407e48 <_printf_float+0x410>
  407e32:	2700      	movs	r7, #0
  407e34:	f104 081a 	add.w	r8, r4, #26
  407e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e3a:	3b01      	subs	r3, #1
  407e3c:	429f      	cmp	r7, r3
  407e3e:	db0c      	blt.n	407e5a <_printf_float+0x422>
  407e40:	464b      	mov	r3, r9
  407e42:	f104 0250 	add.w	r2, r4, #80	; 0x50
  407e46:	e6f2      	b.n	407c2e <_printf_float+0x1f6>
  407e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e4a:	1c7a      	adds	r2, r7, #1
  407e4c:	3b01      	subs	r3, #1
  407e4e:	4659      	mov	r1, fp
  407e50:	4628      	mov	r0, r5
  407e52:	47b0      	blx	r6
  407e54:	3001      	adds	r0, #1
  407e56:	d1f3      	bne.n	407e40 <_printf_float+0x408>
  407e58:	e64a      	b.n	407af0 <_printf_float+0xb8>
  407e5a:	2301      	movs	r3, #1
  407e5c:	4642      	mov	r2, r8
  407e5e:	4659      	mov	r1, fp
  407e60:	4628      	mov	r0, r5
  407e62:	47b0      	blx	r6
  407e64:	3001      	adds	r0, #1
  407e66:	f43f ae43 	beq.w	407af0 <_printf_float+0xb8>
  407e6a:	3701      	adds	r7, #1
  407e6c:	e7e4      	b.n	407e38 <_printf_float+0x400>
  407e6e:	2301      	movs	r3, #1
  407e70:	463a      	mov	r2, r7
  407e72:	e7ec      	b.n	407e4e <_printf_float+0x416>
  407e74:	2301      	movs	r3, #1
  407e76:	4642      	mov	r2, r8
  407e78:	4659      	mov	r1, fp
  407e7a:	4628      	mov	r0, r5
  407e7c:	47b0      	blx	r6
  407e7e:	3001      	adds	r0, #1
  407e80:	f43f ae36 	beq.w	407af0 <_printf_float+0xb8>
  407e84:	3701      	adds	r7, #1
  407e86:	e708      	b.n	407c9a <_printf_float+0x262>
  407e88:	463a      	mov	r2, r7
  407e8a:	464b      	mov	r3, r9
  407e8c:	4638      	mov	r0, r7
  407e8e:	4649      	mov	r1, r9
  407e90:	f004 f992 	bl	40c1b8 <__aeabi_dcmpun>
  407e94:	2800      	cmp	r0, #0
  407e96:	f43f ae30 	beq.w	407afa <_printf_float+0xc2>
  407e9a:	4b01      	ldr	r3, [pc, #4]	; (407ea0 <_printf_float+0x468>)
  407e9c:	4f01      	ldr	r7, [pc, #4]	; (407ea4 <_printf_float+0x46c>)
  407e9e:	e612      	b.n	407ac6 <_printf_float+0x8e>
  407ea0:	0040cc5c 	.word	0x0040cc5c
  407ea4:	0040cc60 	.word	0x0040cc60

00407ea8 <_printf_common>:
  407ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407eac:	4691      	mov	r9, r2
  407eae:	461f      	mov	r7, r3
  407eb0:	688a      	ldr	r2, [r1, #8]
  407eb2:	690b      	ldr	r3, [r1, #16]
  407eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  407eb8:	4293      	cmp	r3, r2
  407eba:	bfb8      	it	lt
  407ebc:	4613      	movlt	r3, r2
  407ebe:	f8c9 3000 	str.w	r3, [r9]
  407ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  407ec6:	4606      	mov	r6, r0
  407ec8:	460c      	mov	r4, r1
  407eca:	b112      	cbz	r2, 407ed2 <_printf_common+0x2a>
  407ecc:	3301      	adds	r3, #1
  407ece:	f8c9 3000 	str.w	r3, [r9]
  407ed2:	6823      	ldr	r3, [r4, #0]
  407ed4:	0699      	lsls	r1, r3, #26
  407ed6:	bf42      	ittt	mi
  407ed8:	f8d9 3000 	ldrmi.w	r3, [r9]
  407edc:	3302      	addmi	r3, #2
  407ede:	f8c9 3000 	strmi.w	r3, [r9]
  407ee2:	6825      	ldr	r5, [r4, #0]
  407ee4:	f015 0506 	ands.w	r5, r5, #6
  407ee8:	d107      	bne.n	407efa <_printf_common+0x52>
  407eea:	f104 0a19 	add.w	sl, r4, #25
  407eee:	68e3      	ldr	r3, [r4, #12]
  407ef0:	f8d9 2000 	ldr.w	r2, [r9]
  407ef4:	1a9b      	subs	r3, r3, r2
  407ef6:	429d      	cmp	r5, r3
  407ef8:	db29      	blt.n	407f4e <_printf_common+0xa6>
  407efa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  407efe:	6822      	ldr	r2, [r4, #0]
  407f00:	3300      	adds	r3, #0
  407f02:	bf18      	it	ne
  407f04:	2301      	movne	r3, #1
  407f06:	0692      	lsls	r2, r2, #26
  407f08:	d42e      	bmi.n	407f68 <_printf_common+0xc0>
  407f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407f0e:	4639      	mov	r1, r7
  407f10:	4630      	mov	r0, r6
  407f12:	47c0      	blx	r8
  407f14:	3001      	adds	r0, #1
  407f16:	d021      	beq.n	407f5c <_printf_common+0xb4>
  407f18:	6823      	ldr	r3, [r4, #0]
  407f1a:	68e5      	ldr	r5, [r4, #12]
  407f1c:	f8d9 2000 	ldr.w	r2, [r9]
  407f20:	f003 0306 	and.w	r3, r3, #6
  407f24:	2b04      	cmp	r3, #4
  407f26:	bf08      	it	eq
  407f28:	1aad      	subeq	r5, r5, r2
  407f2a:	68a3      	ldr	r3, [r4, #8]
  407f2c:	6922      	ldr	r2, [r4, #16]
  407f2e:	bf0c      	ite	eq
  407f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  407f34:	2500      	movne	r5, #0
  407f36:	4293      	cmp	r3, r2
  407f38:	bfc4      	itt	gt
  407f3a:	1a9b      	subgt	r3, r3, r2
  407f3c:	18ed      	addgt	r5, r5, r3
  407f3e:	f04f 0900 	mov.w	r9, #0
  407f42:	341a      	adds	r4, #26
  407f44:	454d      	cmp	r5, r9
  407f46:	d11b      	bne.n	407f80 <_printf_common+0xd8>
  407f48:	2000      	movs	r0, #0
  407f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f4e:	2301      	movs	r3, #1
  407f50:	4652      	mov	r2, sl
  407f52:	4639      	mov	r1, r7
  407f54:	4630      	mov	r0, r6
  407f56:	47c0      	blx	r8
  407f58:	3001      	adds	r0, #1
  407f5a:	d103      	bne.n	407f64 <_printf_common+0xbc>
  407f5c:	f04f 30ff 	mov.w	r0, #4294967295
  407f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f64:	3501      	adds	r5, #1
  407f66:	e7c2      	b.n	407eee <_printf_common+0x46>
  407f68:	18e1      	adds	r1, r4, r3
  407f6a:	1c5a      	adds	r2, r3, #1
  407f6c:	2030      	movs	r0, #48	; 0x30
  407f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  407f72:	4422      	add	r2, r4
  407f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  407f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  407f7c:	3302      	adds	r3, #2
  407f7e:	e7c4      	b.n	407f0a <_printf_common+0x62>
  407f80:	2301      	movs	r3, #1
  407f82:	4622      	mov	r2, r4
  407f84:	4639      	mov	r1, r7
  407f86:	4630      	mov	r0, r6
  407f88:	47c0      	blx	r8
  407f8a:	3001      	adds	r0, #1
  407f8c:	d0e6      	beq.n	407f5c <_printf_common+0xb4>
  407f8e:	f109 0901 	add.w	r9, r9, #1
  407f92:	e7d7      	b.n	407f44 <_printf_common+0x9c>

00407f94 <_printf_i>:
  407f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407f98:	4617      	mov	r7, r2
  407f9a:	7e0a      	ldrb	r2, [r1, #24]
  407f9c:	b085      	sub	sp, #20
  407f9e:	2a6e      	cmp	r2, #110	; 0x6e
  407fa0:	4698      	mov	r8, r3
  407fa2:	4606      	mov	r6, r0
  407fa4:	460c      	mov	r4, r1
  407fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407fa8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  407fac:	f000 80bc 	beq.w	408128 <_printf_i+0x194>
  407fb0:	d81a      	bhi.n	407fe8 <_printf_i+0x54>
  407fb2:	2a63      	cmp	r2, #99	; 0x63
  407fb4:	d02e      	beq.n	408014 <_printf_i+0x80>
  407fb6:	d80a      	bhi.n	407fce <_printf_i+0x3a>
  407fb8:	2a00      	cmp	r2, #0
  407fba:	f000 80c8 	beq.w	40814e <_printf_i+0x1ba>
  407fbe:	2a58      	cmp	r2, #88	; 0x58
  407fc0:	f000 808a 	beq.w	4080d8 <_printf_i+0x144>
  407fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  407fc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  407fcc:	e02a      	b.n	408024 <_printf_i+0x90>
  407fce:	2a64      	cmp	r2, #100	; 0x64
  407fd0:	d001      	beq.n	407fd6 <_printf_i+0x42>
  407fd2:	2a69      	cmp	r2, #105	; 0x69
  407fd4:	d1f6      	bne.n	407fc4 <_printf_i+0x30>
  407fd6:	6821      	ldr	r1, [r4, #0]
  407fd8:	681a      	ldr	r2, [r3, #0]
  407fda:	f011 0f80 	tst.w	r1, #128	; 0x80
  407fde:	d023      	beq.n	408028 <_printf_i+0x94>
  407fe0:	1d11      	adds	r1, r2, #4
  407fe2:	6019      	str	r1, [r3, #0]
  407fe4:	6813      	ldr	r3, [r2, #0]
  407fe6:	e027      	b.n	408038 <_printf_i+0xa4>
  407fe8:	2a73      	cmp	r2, #115	; 0x73
  407fea:	f000 80b4 	beq.w	408156 <_printf_i+0x1c2>
  407fee:	d808      	bhi.n	408002 <_printf_i+0x6e>
  407ff0:	2a6f      	cmp	r2, #111	; 0x6f
  407ff2:	d02a      	beq.n	40804a <_printf_i+0xb6>
  407ff4:	2a70      	cmp	r2, #112	; 0x70
  407ff6:	d1e5      	bne.n	407fc4 <_printf_i+0x30>
  407ff8:	680a      	ldr	r2, [r1, #0]
  407ffa:	f042 0220 	orr.w	r2, r2, #32
  407ffe:	600a      	str	r2, [r1, #0]
  408000:	e003      	b.n	40800a <_printf_i+0x76>
  408002:	2a75      	cmp	r2, #117	; 0x75
  408004:	d021      	beq.n	40804a <_printf_i+0xb6>
  408006:	2a78      	cmp	r2, #120	; 0x78
  408008:	d1dc      	bne.n	407fc4 <_printf_i+0x30>
  40800a:	2278      	movs	r2, #120	; 0x78
  40800c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  408010:	496e      	ldr	r1, [pc, #440]	; (4081cc <_printf_i+0x238>)
  408012:	e064      	b.n	4080de <_printf_i+0x14a>
  408014:	681a      	ldr	r2, [r3, #0]
  408016:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40801a:	1d11      	adds	r1, r2, #4
  40801c:	6019      	str	r1, [r3, #0]
  40801e:	6813      	ldr	r3, [r2, #0]
  408020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  408024:	2301      	movs	r3, #1
  408026:	e0a3      	b.n	408170 <_printf_i+0x1dc>
  408028:	f011 0f40 	tst.w	r1, #64	; 0x40
  40802c:	f102 0104 	add.w	r1, r2, #4
  408030:	6019      	str	r1, [r3, #0]
  408032:	d0d7      	beq.n	407fe4 <_printf_i+0x50>
  408034:	f9b2 3000 	ldrsh.w	r3, [r2]
  408038:	2b00      	cmp	r3, #0
  40803a:	da03      	bge.n	408044 <_printf_i+0xb0>
  40803c:	222d      	movs	r2, #45	; 0x2d
  40803e:	425b      	negs	r3, r3
  408040:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  408044:	4962      	ldr	r1, [pc, #392]	; (4081d0 <_printf_i+0x23c>)
  408046:	220a      	movs	r2, #10
  408048:	e017      	b.n	40807a <_printf_i+0xe6>
  40804a:	6820      	ldr	r0, [r4, #0]
  40804c:	6819      	ldr	r1, [r3, #0]
  40804e:	f010 0f80 	tst.w	r0, #128	; 0x80
  408052:	d003      	beq.n	40805c <_printf_i+0xc8>
  408054:	1d08      	adds	r0, r1, #4
  408056:	6018      	str	r0, [r3, #0]
  408058:	680b      	ldr	r3, [r1, #0]
  40805a:	e006      	b.n	40806a <_printf_i+0xd6>
  40805c:	f010 0f40 	tst.w	r0, #64	; 0x40
  408060:	f101 0004 	add.w	r0, r1, #4
  408064:	6018      	str	r0, [r3, #0]
  408066:	d0f7      	beq.n	408058 <_printf_i+0xc4>
  408068:	880b      	ldrh	r3, [r1, #0]
  40806a:	4959      	ldr	r1, [pc, #356]	; (4081d0 <_printf_i+0x23c>)
  40806c:	2a6f      	cmp	r2, #111	; 0x6f
  40806e:	bf14      	ite	ne
  408070:	220a      	movne	r2, #10
  408072:	2208      	moveq	r2, #8
  408074:	2000      	movs	r0, #0
  408076:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40807a:	6865      	ldr	r5, [r4, #4]
  40807c:	60a5      	str	r5, [r4, #8]
  40807e:	2d00      	cmp	r5, #0
  408080:	f2c0 809c 	blt.w	4081bc <_printf_i+0x228>
  408084:	6820      	ldr	r0, [r4, #0]
  408086:	f020 0004 	bic.w	r0, r0, #4
  40808a:	6020      	str	r0, [r4, #0]
  40808c:	2b00      	cmp	r3, #0
  40808e:	d13f      	bne.n	408110 <_printf_i+0x17c>
  408090:	2d00      	cmp	r5, #0
  408092:	f040 8095 	bne.w	4081c0 <_printf_i+0x22c>
  408096:	4675      	mov	r5, lr
  408098:	2a08      	cmp	r2, #8
  40809a:	d10b      	bne.n	4080b4 <_printf_i+0x120>
  40809c:	6823      	ldr	r3, [r4, #0]
  40809e:	07da      	lsls	r2, r3, #31
  4080a0:	d508      	bpl.n	4080b4 <_printf_i+0x120>
  4080a2:	6923      	ldr	r3, [r4, #16]
  4080a4:	6862      	ldr	r2, [r4, #4]
  4080a6:	429a      	cmp	r2, r3
  4080a8:	bfde      	ittt	le
  4080aa:	2330      	movle	r3, #48	; 0x30
  4080ac:	f805 3c01 	strble.w	r3, [r5, #-1]
  4080b0:	f105 35ff 	addle.w	r5, r5, #4294967295
  4080b4:	ebae 0305 	sub.w	r3, lr, r5
  4080b8:	6123      	str	r3, [r4, #16]
  4080ba:	f8cd 8000 	str.w	r8, [sp]
  4080be:	463b      	mov	r3, r7
  4080c0:	aa03      	add	r2, sp, #12
  4080c2:	4621      	mov	r1, r4
  4080c4:	4630      	mov	r0, r6
  4080c6:	f7ff feef 	bl	407ea8 <_printf_common>
  4080ca:	3001      	adds	r0, #1
  4080cc:	d155      	bne.n	40817a <_printf_i+0x1e6>
  4080ce:	f04f 30ff 	mov.w	r0, #4294967295
  4080d2:	b005      	add	sp, #20
  4080d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4080d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4080dc:	493c      	ldr	r1, [pc, #240]	; (4081d0 <_printf_i+0x23c>)
  4080de:	6822      	ldr	r2, [r4, #0]
  4080e0:	6818      	ldr	r0, [r3, #0]
  4080e2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4080e6:	f100 0504 	add.w	r5, r0, #4
  4080ea:	601d      	str	r5, [r3, #0]
  4080ec:	d001      	beq.n	4080f2 <_printf_i+0x15e>
  4080ee:	6803      	ldr	r3, [r0, #0]
  4080f0:	e002      	b.n	4080f8 <_printf_i+0x164>
  4080f2:	0655      	lsls	r5, r2, #25
  4080f4:	d5fb      	bpl.n	4080ee <_printf_i+0x15a>
  4080f6:	8803      	ldrh	r3, [r0, #0]
  4080f8:	07d0      	lsls	r0, r2, #31
  4080fa:	bf44      	itt	mi
  4080fc:	f042 0220 	orrmi.w	r2, r2, #32
  408100:	6022      	strmi	r2, [r4, #0]
  408102:	b91b      	cbnz	r3, 40810c <_printf_i+0x178>
  408104:	6822      	ldr	r2, [r4, #0]
  408106:	f022 0220 	bic.w	r2, r2, #32
  40810a:	6022      	str	r2, [r4, #0]
  40810c:	2210      	movs	r2, #16
  40810e:	e7b1      	b.n	408074 <_printf_i+0xe0>
  408110:	4675      	mov	r5, lr
  408112:	fbb3 f0f2 	udiv	r0, r3, r2
  408116:	fb02 3310 	mls	r3, r2, r0, r3
  40811a:	5ccb      	ldrb	r3, [r1, r3]
  40811c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  408120:	4603      	mov	r3, r0
  408122:	2800      	cmp	r0, #0
  408124:	d1f5      	bne.n	408112 <_printf_i+0x17e>
  408126:	e7b7      	b.n	408098 <_printf_i+0x104>
  408128:	6808      	ldr	r0, [r1, #0]
  40812a:	681a      	ldr	r2, [r3, #0]
  40812c:	6949      	ldr	r1, [r1, #20]
  40812e:	f010 0f80 	tst.w	r0, #128	; 0x80
  408132:	d004      	beq.n	40813e <_printf_i+0x1aa>
  408134:	1d10      	adds	r0, r2, #4
  408136:	6018      	str	r0, [r3, #0]
  408138:	6813      	ldr	r3, [r2, #0]
  40813a:	6019      	str	r1, [r3, #0]
  40813c:	e007      	b.n	40814e <_printf_i+0x1ba>
  40813e:	f010 0f40 	tst.w	r0, #64	; 0x40
  408142:	f102 0004 	add.w	r0, r2, #4
  408146:	6018      	str	r0, [r3, #0]
  408148:	6813      	ldr	r3, [r2, #0]
  40814a:	d0f6      	beq.n	40813a <_printf_i+0x1a6>
  40814c:	8019      	strh	r1, [r3, #0]
  40814e:	2300      	movs	r3, #0
  408150:	6123      	str	r3, [r4, #16]
  408152:	4675      	mov	r5, lr
  408154:	e7b1      	b.n	4080ba <_printf_i+0x126>
  408156:	681a      	ldr	r2, [r3, #0]
  408158:	1d11      	adds	r1, r2, #4
  40815a:	6019      	str	r1, [r3, #0]
  40815c:	6815      	ldr	r5, [r2, #0]
  40815e:	6862      	ldr	r2, [r4, #4]
  408160:	2100      	movs	r1, #0
  408162:	4628      	mov	r0, r5
  408164:	f7ff fb14 	bl	407790 <memchr>
  408168:	b108      	cbz	r0, 40816e <_printf_i+0x1da>
  40816a:	1b40      	subs	r0, r0, r5
  40816c:	6060      	str	r0, [r4, #4]
  40816e:	6863      	ldr	r3, [r4, #4]
  408170:	6123      	str	r3, [r4, #16]
  408172:	2300      	movs	r3, #0
  408174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  408178:	e79f      	b.n	4080ba <_printf_i+0x126>
  40817a:	6923      	ldr	r3, [r4, #16]
  40817c:	462a      	mov	r2, r5
  40817e:	4639      	mov	r1, r7
  408180:	4630      	mov	r0, r6
  408182:	47c0      	blx	r8
  408184:	3001      	adds	r0, #1
  408186:	d0a2      	beq.n	4080ce <_printf_i+0x13a>
  408188:	6823      	ldr	r3, [r4, #0]
  40818a:	079b      	lsls	r3, r3, #30
  40818c:	d507      	bpl.n	40819e <_printf_i+0x20a>
  40818e:	2500      	movs	r5, #0
  408190:	f104 0919 	add.w	r9, r4, #25
  408194:	68e3      	ldr	r3, [r4, #12]
  408196:	9a03      	ldr	r2, [sp, #12]
  408198:	1a9b      	subs	r3, r3, r2
  40819a:	429d      	cmp	r5, r3
  40819c:	db05      	blt.n	4081aa <_printf_i+0x216>
  40819e:	68e0      	ldr	r0, [r4, #12]
  4081a0:	9b03      	ldr	r3, [sp, #12]
  4081a2:	4298      	cmp	r0, r3
  4081a4:	bfb8      	it	lt
  4081a6:	4618      	movlt	r0, r3
  4081a8:	e793      	b.n	4080d2 <_printf_i+0x13e>
  4081aa:	2301      	movs	r3, #1
  4081ac:	464a      	mov	r2, r9
  4081ae:	4639      	mov	r1, r7
  4081b0:	4630      	mov	r0, r6
  4081b2:	47c0      	blx	r8
  4081b4:	3001      	adds	r0, #1
  4081b6:	d08a      	beq.n	4080ce <_printf_i+0x13a>
  4081b8:	3501      	adds	r5, #1
  4081ba:	e7eb      	b.n	408194 <_printf_i+0x200>
  4081bc:	2b00      	cmp	r3, #0
  4081be:	d1a7      	bne.n	408110 <_printf_i+0x17c>
  4081c0:	780b      	ldrb	r3, [r1, #0]
  4081c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4081c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4081ca:	e765      	b.n	408098 <_printf_i+0x104>
  4081cc:	0040cc77 	.word	0x0040cc77
  4081d0:	0040cc66 	.word	0x0040cc66

004081d4 <iprintf>:
  4081d4:	b40f      	push	{r0, r1, r2, r3}
  4081d6:	4b0a      	ldr	r3, [pc, #40]	; (408200 <iprintf+0x2c>)
  4081d8:	b513      	push	{r0, r1, r4, lr}
  4081da:	681c      	ldr	r4, [r3, #0]
  4081dc:	b124      	cbz	r4, 4081e8 <iprintf+0x14>
  4081de:	69a3      	ldr	r3, [r4, #24]
  4081e0:	b913      	cbnz	r3, 4081e8 <iprintf+0x14>
  4081e2:	4620      	mov	r0, r4
  4081e4:	f7ff fa0a 	bl	4075fc <__sinit>
  4081e8:	ab05      	add	r3, sp, #20
  4081ea:	9a04      	ldr	r2, [sp, #16]
  4081ec:	68a1      	ldr	r1, [r4, #8]
  4081ee:	9301      	str	r3, [sp, #4]
  4081f0:	4620      	mov	r0, r4
  4081f2:	f003 f9db 	bl	40b5ac <_vfiprintf_r>
  4081f6:	b002      	add	sp, #8
  4081f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4081fc:	b004      	add	sp, #16
  4081fe:	4770      	bx	lr
  408200:	20400050 	.word	0x20400050

00408204 <_puts_r>:
  408204:	b570      	push	{r4, r5, r6, lr}
  408206:	460e      	mov	r6, r1
  408208:	4605      	mov	r5, r0
  40820a:	b118      	cbz	r0, 408214 <_puts_r+0x10>
  40820c:	6983      	ldr	r3, [r0, #24]
  40820e:	b90b      	cbnz	r3, 408214 <_puts_r+0x10>
  408210:	f7ff f9f4 	bl	4075fc <__sinit>
  408214:	69ab      	ldr	r3, [r5, #24]
  408216:	68ac      	ldr	r4, [r5, #8]
  408218:	b913      	cbnz	r3, 408220 <_puts_r+0x1c>
  40821a:	4628      	mov	r0, r5
  40821c:	f7ff f9ee 	bl	4075fc <__sinit>
  408220:	4b23      	ldr	r3, [pc, #140]	; (4082b0 <_puts_r+0xac>)
  408222:	429c      	cmp	r4, r3
  408224:	d117      	bne.n	408256 <_puts_r+0x52>
  408226:	686c      	ldr	r4, [r5, #4]
  408228:	89a3      	ldrh	r3, [r4, #12]
  40822a:	071b      	lsls	r3, r3, #28
  40822c:	d51d      	bpl.n	40826a <_puts_r+0x66>
  40822e:	6923      	ldr	r3, [r4, #16]
  408230:	b1db      	cbz	r3, 40826a <_puts_r+0x66>
  408232:	3e01      	subs	r6, #1
  408234:	68a3      	ldr	r3, [r4, #8]
  408236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  40823a:	3b01      	subs	r3, #1
  40823c:	60a3      	str	r3, [r4, #8]
  40823e:	b9e9      	cbnz	r1, 40827c <_puts_r+0x78>
  408240:	2b00      	cmp	r3, #0
  408242:	da2e      	bge.n	4082a2 <_puts_r+0x9e>
  408244:	4622      	mov	r2, r4
  408246:	210a      	movs	r1, #10
  408248:	4628      	mov	r0, r5
  40824a:	f001 f82f 	bl	4092ac <__swbuf_r>
  40824e:	3001      	adds	r0, #1
  408250:	d011      	beq.n	408276 <_puts_r+0x72>
  408252:	200a      	movs	r0, #10
  408254:	bd70      	pop	{r4, r5, r6, pc}
  408256:	4b17      	ldr	r3, [pc, #92]	; (4082b4 <_puts_r+0xb0>)
  408258:	429c      	cmp	r4, r3
  40825a:	d101      	bne.n	408260 <_puts_r+0x5c>
  40825c:	68ac      	ldr	r4, [r5, #8]
  40825e:	e7e3      	b.n	408228 <_puts_r+0x24>
  408260:	4b15      	ldr	r3, [pc, #84]	; (4082b8 <_puts_r+0xb4>)
  408262:	429c      	cmp	r4, r3
  408264:	bf08      	it	eq
  408266:	68ec      	ldreq	r4, [r5, #12]
  408268:	e7de      	b.n	408228 <_puts_r+0x24>
  40826a:	4621      	mov	r1, r4
  40826c:	4628      	mov	r0, r5
  40826e:	f001 f881 	bl	409374 <__swsetup_r>
  408272:	2800      	cmp	r0, #0
  408274:	d0dd      	beq.n	408232 <_puts_r+0x2e>
  408276:	f04f 30ff 	mov.w	r0, #4294967295
  40827a:	bd70      	pop	{r4, r5, r6, pc}
  40827c:	2b00      	cmp	r3, #0
  40827e:	da04      	bge.n	40828a <_puts_r+0x86>
  408280:	69a2      	ldr	r2, [r4, #24]
  408282:	4293      	cmp	r3, r2
  408284:	db06      	blt.n	408294 <_puts_r+0x90>
  408286:	290a      	cmp	r1, #10
  408288:	d004      	beq.n	408294 <_puts_r+0x90>
  40828a:	6823      	ldr	r3, [r4, #0]
  40828c:	1c5a      	adds	r2, r3, #1
  40828e:	6022      	str	r2, [r4, #0]
  408290:	7019      	strb	r1, [r3, #0]
  408292:	e7cf      	b.n	408234 <_puts_r+0x30>
  408294:	4622      	mov	r2, r4
  408296:	4628      	mov	r0, r5
  408298:	f001 f808 	bl	4092ac <__swbuf_r>
  40829c:	3001      	adds	r0, #1
  40829e:	d1c9      	bne.n	408234 <_puts_r+0x30>
  4082a0:	e7e9      	b.n	408276 <_puts_r+0x72>
  4082a2:	6823      	ldr	r3, [r4, #0]
  4082a4:	200a      	movs	r0, #10
  4082a6:	1c5a      	adds	r2, r3, #1
  4082a8:	6022      	str	r2, [r4, #0]
  4082aa:	7018      	strb	r0, [r3, #0]
  4082ac:	bd70      	pop	{r4, r5, r6, pc}
  4082ae:	bf00      	nop
  4082b0:	0040cc10 	.word	0x0040cc10
  4082b4:	0040cc30 	.word	0x0040cc30
  4082b8:	0040cbf0 	.word	0x0040cbf0

004082bc <puts>:
  4082bc:	4b02      	ldr	r3, [pc, #8]	; (4082c8 <puts+0xc>)
  4082be:	4601      	mov	r1, r0
  4082c0:	6818      	ldr	r0, [r3, #0]
  4082c2:	f7ff bf9f 	b.w	408204 <_puts_r>
  4082c6:	bf00      	nop
  4082c8:	20400050 	.word	0x20400050

004082cc <lflush>:
  4082cc:	8983      	ldrh	r3, [r0, #12]
  4082ce:	f003 0309 	and.w	r3, r3, #9
  4082d2:	2b09      	cmp	r3, #9
  4082d4:	d101      	bne.n	4082da <lflush+0xe>
  4082d6:	f001 bfdb 	b.w	40a290 <fflush>
  4082da:	2000      	movs	r0, #0
  4082dc:	4770      	bx	lr
	...

004082e0 <__srefill_r>:
  4082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082e2:	460c      	mov	r4, r1
  4082e4:	4605      	mov	r5, r0
  4082e6:	b118      	cbz	r0, 4082f0 <__srefill_r+0x10>
  4082e8:	6983      	ldr	r3, [r0, #24]
  4082ea:	b90b      	cbnz	r3, 4082f0 <__srefill_r+0x10>
  4082ec:	f7ff f986 	bl	4075fc <__sinit>
  4082f0:	4b3b      	ldr	r3, [pc, #236]	; (4083e0 <__srefill_r+0x100>)
  4082f2:	429c      	cmp	r4, r3
  4082f4:	d10a      	bne.n	40830c <__srefill_r+0x2c>
  4082f6:	686c      	ldr	r4, [r5, #4]
  4082f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4082fc:	2300      	movs	r3, #0
  4082fe:	6063      	str	r3, [r4, #4]
  408300:	b293      	uxth	r3, r2
  408302:	069e      	lsls	r6, r3, #26
  408304:	d50c      	bpl.n	408320 <__srefill_r+0x40>
  408306:	f04f 30ff 	mov.w	r0, #4294967295
  40830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40830c:	4b35      	ldr	r3, [pc, #212]	; (4083e4 <__srefill_r+0x104>)
  40830e:	429c      	cmp	r4, r3
  408310:	d101      	bne.n	408316 <__srefill_r+0x36>
  408312:	68ac      	ldr	r4, [r5, #8]
  408314:	e7f0      	b.n	4082f8 <__srefill_r+0x18>
  408316:	4b34      	ldr	r3, [pc, #208]	; (4083e8 <__srefill_r+0x108>)
  408318:	429c      	cmp	r4, r3
  40831a:	bf08      	it	eq
  40831c:	68ec      	ldreq	r4, [r5, #12]
  40831e:	e7eb      	b.n	4082f8 <__srefill_r+0x18>
  408320:	0758      	lsls	r0, r3, #29
  408322:	d448      	bmi.n	4083b6 <__srefill_r+0xd6>
  408324:	06d9      	lsls	r1, r3, #27
  408326:	d405      	bmi.n	408334 <__srefill_r+0x54>
  408328:	2309      	movs	r3, #9
  40832a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40832e:	602b      	str	r3, [r5, #0]
  408330:	81a2      	strh	r2, [r4, #12]
  408332:	e7e8      	b.n	408306 <__srefill_r+0x26>
  408334:	071a      	lsls	r2, r3, #28
  408336:	d50b      	bpl.n	408350 <__srefill_r+0x70>
  408338:	4621      	mov	r1, r4
  40833a:	4628      	mov	r0, r5
  40833c:	f001 ff7e 	bl	40a23c <_fflush_r>
  408340:	2800      	cmp	r0, #0
  408342:	d1e0      	bne.n	408306 <__srefill_r+0x26>
  408344:	89a3      	ldrh	r3, [r4, #12]
  408346:	60a0      	str	r0, [r4, #8]
  408348:	f023 0308 	bic.w	r3, r3, #8
  40834c:	81a3      	strh	r3, [r4, #12]
  40834e:	61a0      	str	r0, [r4, #24]
  408350:	89a3      	ldrh	r3, [r4, #12]
  408352:	f043 0304 	orr.w	r3, r3, #4
  408356:	81a3      	strh	r3, [r4, #12]
  408358:	6923      	ldr	r3, [r4, #16]
  40835a:	b91b      	cbnz	r3, 408364 <__srefill_r+0x84>
  40835c:	4621      	mov	r1, r4
  40835e:	4628      	mov	r0, r5
  408360:	f002 fb0c 	bl	40a97c <__smakebuf_r>
  408364:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  408368:	b2be      	uxth	r6, r7
  40836a:	07b3      	lsls	r3, r6, #30
  40836c:	d00f      	beq.n	40838e <__srefill_r+0xae>
  40836e:	2301      	movs	r3, #1
  408370:	81a3      	strh	r3, [r4, #12]
  408372:	4b1e      	ldr	r3, [pc, #120]	; (4083ec <__srefill_r+0x10c>)
  408374:	491e      	ldr	r1, [pc, #120]	; (4083f0 <__srefill_r+0x110>)
  408376:	6818      	ldr	r0, [r3, #0]
  408378:	f006 0609 	and.w	r6, r6, #9
  40837c:	f7ff f9aa 	bl	4076d4 <_fwalk>
  408380:	2e09      	cmp	r6, #9
  408382:	81a7      	strh	r7, [r4, #12]
  408384:	d103      	bne.n	40838e <__srefill_r+0xae>
  408386:	4621      	mov	r1, r4
  408388:	4628      	mov	r0, r5
  40838a:	f001 fecf 	bl	40a12c <__sflush_r>
  40838e:	6922      	ldr	r2, [r4, #16]
  408390:	6022      	str	r2, [r4, #0]
  408392:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408394:	6963      	ldr	r3, [r4, #20]
  408396:	6a21      	ldr	r1, [r4, #32]
  408398:	4628      	mov	r0, r5
  40839a:	47b0      	blx	r6
  40839c:	2800      	cmp	r0, #0
  40839e:	6060      	str	r0, [r4, #4]
  4083a0:	dc1c      	bgt.n	4083dc <__srefill_r+0xfc>
  4083a2:	89a3      	ldrh	r3, [r4, #12]
  4083a4:	bf17      	itett	ne
  4083a6:	2200      	movne	r2, #0
  4083a8:	f043 0320 	orreq.w	r3, r3, #32
  4083ac:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
  4083b0:	6062      	strne	r2, [r4, #4]
  4083b2:	81a3      	strh	r3, [r4, #12]
  4083b4:	e7a7      	b.n	408306 <__srefill_r+0x26>
  4083b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4083b8:	2900      	cmp	r1, #0
  4083ba:	d0cd      	beq.n	408358 <__srefill_r+0x78>
  4083bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4083c0:	4299      	cmp	r1, r3
  4083c2:	d002      	beq.n	4083ca <__srefill_r+0xea>
  4083c4:	4628      	mov	r0, r5
  4083c6:	f002 ff2b 	bl	40b220 <_free_r>
  4083ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4083cc:	6063      	str	r3, [r4, #4]
  4083ce:	2000      	movs	r0, #0
  4083d0:	6360      	str	r0, [r4, #52]	; 0x34
  4083d2:	2b00      	cmp	r3, #0
  4083d4:	d0c0      	beq.n	408358 <__srefill_r+0x78>
  4083d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4083d8:	6023      	str	r3, [r4, #0]
  4083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083dc:	2000      	movs	r0, #0
  4083de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083e0:	0040cc10 	.word	0x0040cc10
  4083e4:	0040cc30 	.word	0x0040cc30
  4083e8:	0040cbf0 	.word	0x0040cbf0
  4083ec:	0040cc50 	.word	0x0040cc50
  4083f0:	004082cd 	.word	0x004082cd

004083f4 <_sbrk_r>:
  4083f4:	b538      	push	{r3, r4, r5, lr}
  4083f6:	4c06      	ldr	r4, [pc, #24]	; (408410 <_sbrk_r+0x1c>)
  4083f8:	2300      	movs	r3, #0
  4083fa:	4605      	mov	r5, r0
  4083fc:	4608      	mov	r0, r1
  4083fe:	6023      	str	r3, [r4, #0]
  408400:	f7fb fb7c 	bl	403afc <_sbrk>
  408404:	1c43      	adds	r3, r0, #1
  408406:	d102      	bne.n	40840e <_sbrk_r+0x1a>
  408408:	6823      	ldr	r3, [r4, #0]
  40840a:	b103      	cbz	r3, 40840e <_sbrk_r+0x1a>
  40840c:	602b      	str	r3, [r5, #0]
  40840e:	bd38      	pop	{r3, r4, r5, pc}
  408410:	204308dc 	.word	0x204308dc

00408414 <setbuf>:
  408414:	2900      	cmp	r1, #0
  408416:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40841a:	bf0c      	ite	eq
  40841c:	2202      	moveq	r2, #2
  40841e:	2200      	movne	r2, #0
  408420:	f000 b800 	b.w	408424 <setvbuf>

00408424 <setvbuf>:
  408424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  408428:	461d      	mov	r5, r3
  40842a:	4b51      	ldr	r3, [pc, #324]	; (408570 <setvbuf+0x14c>)
  40842c:	681e      	ldr	r6, [r3, #0]
  40842e:	4604      	mov	r4, r0
  408430:	460f      	mov	r7, r1
  408432:	4690      	mov	r8, r2
  408434:	b126      	cbz	r6, 408440 <setvbuf+0x1c>
  408436:	69b3      	ldr	r3, [r6, #24]
  408438:	b913      	cbnz	r3, 408440 <setvbuf+0x1c>
  40843a:	4630      	mov	r0, r6
  40843c:	f7ff f8de 	bl	4075fc <__sinit>
  408440:	4b4c      	ldr	r3, [pc, #304]	; (408574 <setvbuf+0x150>)
  408442:	429c      	cmp	r4, r3
  408444:	d152      	bne.n	4084ec <setvbuf+0xc8>
  408446:	6874      	ldr	r4, [r6, #4]
  408448:	f1b8 0f02 	cmp.w	r8, #2
  40844c:	d006      	beq.n	40845c <setvbuf+0x38>
  40844e:	f1b8 0f01 	cmp.w	r8, #1
  408452:	f200 8089 	bhi.w	408568 <setvbuf+0x144>
  408456:	2d00      	cmp	r5, #0
  408458:	f2c0 8086 	blt.w	408568 <setvbuf+0x144>
  40845c:	4621      	mov	r1, r4
  40845e:	4630      	mov	r0, r6
  408460:	f001 feec 	bl	40a23c <_fflush_r>
  408464:	6b61      	ldr	r1, [r4, #52]	; 0x34
  408466:	b141      	cbz	r1, 40847a <setvbuf+0x56>
  408468:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40846c:	4299      	cmp	r1, r3
  40846e:	d002      	beq.n	408476 <setvbuf+0x52>
  408470:	4630      	mov	r0, r6
  408472:	f002 fed5 	bl	40b220 <_free_r>
  408476:	2300      	movs	r3, #0
  408478:	6363      	str	r3, [r4, #52]	; 0x34
  40847a:	2300      	movs	r3, #0
  40847c:	61a3      	str	r3, [r4, #24]
  40847e:	6063      	str	r3, [r4, #4]
  408480:	89a3      	ldrh	r3, [r4, #12]
  408482:	061b      	lsls	r3, r3, #24
  408484:	d503      	bpl.n	40848e <setvbuf+0x6a>
  408486:	6921      	ldr	r1, [r4, #16]
  408488:	4630      	mov	r0, r6
  40848a:	f002 fec9 	bl	40b220 <_free_r>
  40848e:	89a3      	ldrh	r3, [r4, #12]
  408490:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  408494:	f023 0303 	bic.w	r3, r3, #3
  408498:	f1b8 0f02 	cmp.w	r8, #2
  40849c:	81a3      	strh	r3, [r4, #12]
  40849e:	d05d      	beq.n	40855c <setvbuf+0x138>
  4084a0:	ab01      	add	r3, sp, #4
  4084a2:	466a      	mov	r2, sp
  4084a4:	4621      	mov	r1, r4
  4084a6:	4630      	mov	r0, r6
  4084a8:	f002 fa44 	bl	40a934 <__swhatbuf_r>
  4084ac:	89a3      	ldrh	r3, [r4, #12]
  4084ae:	4318      	orrs	r0, r3
  4084b0:	81a0      	strh	r0, [r4, #12]
  4084b2:	bb2d      	cbnz	r5, 408500 <setvbuf+0xdc>
  4084b4:	9d00      	ldr	r5, [sp, #0]
  4084b6:	4628      	mov	r0, r5
  4084b8:	f002 faa0 	bl	40a9fc <malloc>
  4084bc:	4607      	mov	r7, r0
  4084be:	2800      	cmp	r0, #0
  4084c0:	d14e      	bne.n	408560 <setvbuf+0x13c>
  4084c2:	f8dd 9000 	ldr.w	r9, [sp]
  4084c6:	45a9      	cmp	r9, r5
  4084c8:	d13c      	bne.n	408544 <setvbuf+0x120>
  4084ca:	f04f 30ff 	mov.w	r0, #4294967295
  4084ce:	89a3      	ldrh	r3, [r4, #12]
  4084d0:	f043 0302 	orr.w	r3, r3, #2
  4084d4:	81a3      	strh	r3, [r4, #12]
  4084d6:	2300      	movs	r3, #0
  4084d8:	60a3      	str	r3, [r4, #8]
  4084da:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4084de:	6023      	str	r3, [r4, #0]
  4084e0:	6123      	str	r3, [r4, #16]
  4084e2:	2301      	movs	r3, #1
  4084e4:	6163      	str	r3, [r4, #20]
  4084e6:	b003      	add	sp, #12
  4084e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4084ec:	4b22      	ldr	r3, [pc, #136]	; (408578 <setvbuf+0x154>)
  4084ee:	429c      	cmp	r4, r3
  4084f0:	d101      	bne.n	4084f6 <setvbuf+0xd2>
  4084f2:	68b4      	ldr	r4, [r6, #8]
  4084f4:	e7a8      	b.n	408448 <setvbuf+0x24>
  4084f6:	4b21      	ldr	r3, [pc, #132]	; (40857c <setvbuf+0x158>)
  4084f8:	429c      	cmp	r4, r3
  4084fa:	bf08      	it	eq
  4084fc:	68f4      	ldreq	r4, [r6, #12]
  4084fe:	e7a3      	b.n	408448 <setvbuf+0x24>
  408500:	2f00      	cmp	r7, #0
  408502:	d0d8      	beq.n	4084b6 <setvbuf+0x92>
  408504:	69b3      	ldr	r3, [r6, #24]
  408506:	b913      	cbnz	r3, 40850e <setvbuf+0xea>
  408508:	4630      	mov	r0, r6
  40850a:	f7ff f877 	bl	4075fc <__sinit>
  40850e:	f1b8 0f01 	cmp.w	r8, #1
  408512:	bf08      	it	eq
  408514:	89a3      	ldrheq	r3, [r4, #12]
  408516:	6027      	str	r7, [r4, #0]
  408518:	bf04      	itt	eq
  40851a:	f043 0301 	orreq.w	r3, r3, #1
  40851e:	81a3      	strheq	r3, [r4, #12]
  408520:	89a3      	ldrh	r3, [r4, #12]
  408522:	6127      	str	r7, [r4, #16]
  408524:	f013 0008 	ands.w	r0, r3, #8
  408528:	6165      	str	r5, [r4, #20]
  40852a:	d01b      	beq.n	408564 <setvbuf+0x140>
  40852c:	f013 0001 	ands.w	r0, r3, #1
  408530:	bf18      	it	ne
  408532:	426d      	negne	r5, r5
  408534:	f04f 0300 	mov.w	r3, #0
  408538:	bf1d      	ittte	ne
  40853a:	60a3      	strne	r3, [r4, #8]
  40853c:	61a5      	strne	r5, [r4, #24]
  40853e:	4618      	movne	r0, r3
  408540:	60a5      	streq	r5, [r4, #8]
  408542:	e7d0      	b.n	4084e6 <setvbuf+0xc2>
  408544:	4648      	mov	r0, r9
  408546:	f002 fa59 	bl	40a9fc <malloc>
  40854a:	4607      	mov	r7, r0
  40854c:	2800      	cmp	r0, #0
  40854e:	d0bc      	beq.n	4084ca <setvbuf+0xa6>
  408550:	89a3      	ldrh	r3, [r4, #12]
  408552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408556:	81a3      	strh	r3, [r4, #12]
  408558:	464d      	mov	r5, r9
  40855a:	e7d3      	b.n	408504 <setvbuf+0xe0>
  40855c:	2000      	movs	r0, #0
  40855e:	e7b6      	b.n	4084ce <setvbuf+0xaa>
  408560:	46a9      	mov	r9, r5
  408562:	e7f5      	b.n	408550 <setvbuf+0x12c>
  408564:	60a0      	str	r0, [r4, #8]
  408566:	e7be      	b.n	4084e6 <setvbuf+0xc2>
  408568:	f04f 30ff 	mov.w	r0, #4294967295
  40856c:	e7bb      	b.n	4084e6 <setvbuf+0xc2>
  40856e:	bf00      	nop
  408570:	20400050 	.word	0x20400050
  408574:	0040cc10 	.word	0x0040cc10
  408578:	0040cc30 	.word	0x0040cc30
  40857c:	0040cbf0 	.word	0x0040cbf0

00408580 <siprintf>:
  408580:	b40e      	push	{r1, r2, r3}
  408582:	b500      	push	{lr}
  408584:	b09c      	sub	sp, #112	; 0x70
  408586:	f44f 7102 	mov.w	r1, #520	; 0x208
  40858a:	ab1d      	add	r3, sp, #116	; 0x74
  40858c:	f8ad 1014 	strh.w	r1, [sp, #20]
  408590:	9002      	str	r0, [sp, #8]
  408592:	9006      	str	r0, [sp, #24]
  408594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408598:	480a      	ldr	r0, [pc, #40]	; (4085c4 <siprintf+0x44>)
  40859a:	9104      	str	r1, [sp, #16]
  40859c:	9107      	str	r1, [sp, #28]
  40859e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4085a2:	f853 2b04 	ldr.w	r2, [r3], #4
  4085a6:	f8ad 1016 	strh.w	r1, [sp, #22]
  4085aa:	6800      	ldr	r0, [r0, #0]
  4085ac:	9301      	str	r3, [sp, #4]
  4085ae:	a902      	add	r1, sp, #8
  4085b0:	f002 fee0 	bl	40b374 <_svfiprintf_r>
  4085b4:	9b02      	ldr	r3, [sp, #8]
  4085b6:	2200      	movs	r2, #0
  4085b8:	701a      	strb	r2, [r3, #0]
  4085ba:	b01c      	add	sp, #112	; 0x70
  4085bc:	f85d eb04 	ldr.w	lr, [sp], #4
  4085c0:	b003      	add	sp, #12
  4085c2:	4770      	bx	lr
  4085c4:	20400050 	.word	0x20400050

004085c8 <__sread>:
  4085c8:	b510      	push	{r4, lr}
  4085ca:	460c      	mov	r4, r1
  4085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085d0:	f003 f902 	bl	40b7d8 <_read_r>
  4085d4:	2800      	cmp	r0, #0
  4085d6:	bfab      	itete	ge
  4085d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4085da:	89a3      	ldrhlt	r3, [r4, #12]
  4085dc:	181b      	addge	r3, r3, r0
  4085de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4085e2:	bfac      	ite	ge
  4085e4:	6563      	strge	r3, [r4, #84]	; 0x54
  4085e6:	81a3      	strhlt	r3, [r4, #12]
  4085e8:	bd10      	pop	{r4, pc}

004085ea <__swrite>:
  4085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085ee:	461f      	mov	r7, r3
  4085f0:	898b      	ldrh	r3, [r1, #12]
  4085f2:	05db      	lsls	r3, r3, #23
  4085f4:	4605      	mov	r5, r0
  4085f6:	460c      	mov	r4, r1
  4085f8:	4616      	mov	r6, r2
  4085fa:	d505      	bpl.n	408608 <__swrite+0x1e>
  4085fc:	2302      	movs	r3, #2
  4085fe:	2200      	movs	r2, #0
  408600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408604:	f002 f984 	bl	40a910 <_lseek_r>
  408608:	89a3      	ldrh	r3, [r4, #12]
  40860a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40860e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408612:	81a3      	strh	r3, [r4, #12]
  408614:	4632      	mov	r2, r6
  408616:	463b      	mov	r3, r7
  408618:	4628      	mov	r0, r5
  40861a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40861e:	f000 be97 	b.w	409350 <_write_r>

00408622 <__sseek>:
  408622:	b510      	push	{r4, lr}
  408624:	460c      	mov	r4, r1
  408626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40862a:	f002 f971 	bl	40a910 <_lseek_r>
  40862e:	1c43      	adds	r3, r0, #1
  408630:	89a3      	ldrh	r3, [r4, #12]
  408632:	bf15      	itete	ne
  408634:	6560      	strne	r0, [r4, #84]	; 0x54
  408636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40863a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40863e:	81a3      	strheq	r3, [r4, #12]
  408640:	bf18      	it	ne
  408642:	81a3      	strhne	r3, [r4, #12]
  408644:	bd10      	pop	{r4, pc}

00408646 <__sclose>:
  408646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40864a:	f000 bf01 	b.w	409450 <_close_r>

0040864e <strlen>:
  40864e:	4603      	mov	r3, r0
  408650:	f813 2b01 	ldrb.w	r2, [r3], #1
  408654:	2a00      	cmp	r2, #0
  408656:	d1fb      	bne.n	408650 <strlen+0x2>
  408658:	1a18      	subs	r0, r3, r0
  40865a:	3801      	subs	r0, #1
  40865c:	4770      	bx	lr

0040865e <sulp>:
  40865e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408662:	460f      	mov	r7, r1
  408664:	4690      	mov	r8, r2
  408666:	f002 fca5 	bl	40afb4 <__ulp>
  40866a:	4604      	mov	r4, r0
  40866c:	460d      	mov	r5, r1
  40866e:	f1b8 0f00 	cmp.w	r8, #0
  408672:	d011      	beq.n	408698 <sulp+0x3a>
  408674:	f3c7 530a 	ubfx	r3, r7, #20, #11
  408678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40867c:	2b00      	cmp	r3, #0
  40867e:	dd0b      	ble.n	408698 <sulp+0x3a>
  408680:	051b      	lsls	r3, r3, #20
  408682:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  408686:	2400      	movs	r4, #0
  408688:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40868c:	4622      	mov	r2, r4
  40868e:	462b      	mov	r3, r5
  408690:	f003 faf8 	bl	40bc84 <__aeabi_dmul>
  408694:	4604      	mov	r4, r0
  408696:	460d      	mov	r5, r1
  408698:	4620      	mov	r0, r4
  40869a:	4629      	mov	r1, r5
  40869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004086a0 <_strtod_l>:
  4086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086a4:	4699      	mov	r9, r3
  4086a6:	b09f      	sub	sp, #124	; 0x7c
  4086a8:	2300      	movs	r3, #0
  4086aa:	4680      	mov	r8, r0
  4086ac:	4648      	mov	r0, r9
  4086ae:	460c      	mov	r4, r1
  4086b0:	9215      	str	r2, [sp, #84]	; 0x54
  4086b2:	931a      	str	r3, [sp, #104]	; 0x68
  4086b4:	f002 f91b 	bl	40a8ee <__localeconv_l>
  4086b8:	4607      	mov	r7, r0
  4086ba:	6800      	ldr	r0, [r0, #0]
  4086bc:	f7ff ffc7 	bl	40864e <strlen>
  4086c0:	f04f 0a00 	mov.w	sl, #0
  4086c4:	4605      	mov	r5, r0
  4086c6:	f04f 0b00 	mov.w	fp, #0
  4086ca:	9419      	str	r4, [sp, #100]	; 0x64
  4086cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4086ce:	781a      	ldrb	r2, [r3, #0]
  4086d0:	2a0d      	cmp	r2, #13
  4086d2:	d833      	bhi.n	40873c <_strtod_l+0x9c>
  4086d4:	2a09      	cmp	r2, #9
  4086d6:	d237      	bcs.n	408748 <_strtod_l+0xa8>
  4086d8:	2a00      	cmp	r2, #0
  4086da:	d03f      	beq.n	40875c <_strtod_l+0xbc>
  4086dc:	2300      	movs	r3, #0
  4086de:	9309      	str	r3, [sp, #36]	; 0x24
  4086e0:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4086e2:	7833      	ldrb	r3, [r6, #0]
  4086e4:	2b30      	cmp	r3, #48	; 0x30
  4086e6:	f040 8101 	bne.w	4088ec <_strtod_l+0x24c>
  4086ea:	7873      	ldrb	r3, [r6, #1]
  4086ec:	2b58      	cmp	r3, #88	; 0x58
  4086ee:	d001      	beq.n	4086f4 <_strtod_l+0x54>
  4086f0:	2b78      	cmp	r3, #120	; 0x78
  4086f2:	d16b      	bne.n	4087cc <_strtod_l+0x12c>
  4086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086f6:	9301      	str	r3, [sp, #4]
  4086f8:	ab1a      	add	r3, sp, #104	; 0x68
  4086fa:	9300      	str	r3, [sp, #0]
  4086fc:	f8cd 9008 	str.w	r9, [sp, #8]
  408700:	ab1b      	add	r3, sp, #108	; 0x6c
  408702:	4aaa      	ldr	r2, [pc, #680]	; (4089ac <_strtod_l+0x30c>)
  408704:	a919      	add	r1, sp, #100	; 0x64
  408706:	4640      	mov	r0, r8
  408708:	f001 fe1e 	bl	40a348 <__gethex>
  40870c:	f010 0407 	ands.w	r4, r0, #7
  408710:	4605      	mov	r5, r0
  408712:	d005      	beq.n	408720 <_strtod_l+0x80>
  408714:	2c06      	cmp	r4, #6
  408716:	d12b      	bne.n	408770 <_strtod_l+0xd0>
  408718:	3601      	adds	r6, #1
  40871a:	2300      	movs	r3, #0
  40871c:	9619      	str	r6, [sp, #100]	; 0x64
  40871e:	9309      	str	r3, [sp, #36]	; 0x24
  408720:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408722:	2b00      	cmp	r3, #0
  408724:	f040 8599 	bne.w	40925a <_strtod_l+0xbba>
  408728:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40872a:	b1e3      	cbz	r3, 408766 <_strtod_l+0xc6>
  40872c:	4652      	mov	r2, sl
  40872e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
  408732:	4610      	mov	r0, r2
  408734:	4619      	mov	r1, r3
  408736:	b01f      	add	sp, #124	; 0x7c
  408738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40873c:	2a2b      	cmp	r2, #43	; 0x2b
  40873e:	d006      	beq.n	40874e <_strtod_l+0xae>
  408740:	2a2d      	cmp	r2, #45	; 0x2d
  408742:	d013      	beq.n	40876c <_strtod_l+0xcc>
  408744:	2a20      	cmp	r2, #32
  408746:	d1c9      	bne.n	4086dc <_strtod_l+0x3c>
  408748:	3301      	adds	r3, #1
  40874a:	9319      	str	r3, [sp, #100]	; 0x64
  40874c:	e7be      	b.n	4086cc <_strtod_l+0x2c>
  40874e:	2200      	movs	r2, #0
  408750:	9209      	str	r2, [sp, #36]	; 0x24
  408752:	1c5a      	adds	r2, r3, #1
  408754:	9219      	str	r2, [sp, #100]	; 0x64
  408756:	785b      	ldrb	r3, [r3, #1]
  408758:	2b00      	cmp	r3, #0
  40875a:	d1c1      	bne.n	4086e0 <_strtod_l+0x40>
  40875c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40875e:	9419      	str	r4, [sp, #100]	; 0x64
  408760:	2b00      	cmp	r3, #0
  408762:	f040 8578 	bne.w	409256 <_strtod_l+0xbb6>
  408766:	4652      	mov	r2, sl
  408768:	465b      	mov	r3, fp
  40876a:	e7e2      	b.n	408732 <_strtod_l+0x92>
  40876c:	2201      	movs	r2, #1
  40876e:	e7ef      	b.n	408750 <_strtod_l+0xb0>
  408770:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408772:	b13a      	cbz	r2, 408784 <_strtod_l+0xe4>
  408774:	2135      	movs	r1, #53	; 0x35
  408776:	a81c      	add	r0, sp, #112	; 0x70
  408778:	f002 fd09 	bl	40b18e <__copybits>
  40877c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40877e:	4640      	mov	r0, r8
  408780:	f002 f98c 	bl	40aa9c <_Bfree>
  408784:	3c01      	subs	r4, #1
  408786:	2c04      	cmp	r4, #4
  408788:	d808      	bhi.n	40879c <_strtod_l+0xfc>
  40878a:	e8df f004 	tbb	[pc, r4]
  40878e:	030c      	.short	0x030c
  408790:	1a17      	.short	0x1a17
  408792:	0c          	.byte	0x0c
  408793:	00          	.byte	0x00
  408794:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
  408798:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
  40879c:	0729      	lsls	r1, r5, #28
  40879e:	d5bf      	bpl.n	408720 <_strtod_l+0x80>
  4087a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
  4087a4:	e7bc      	b.n	408720 <_strtod_l+0x80>
  4087a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4087a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4087aa:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
  4087ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4087b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
  4087b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
  4087ba:	e7ef      	b.n	40879c <_strtod_l+0xfc>
  4087bc:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 4089b8 <_strtod_l+0x318>
  4087c0:	e7ec      	b.n	40879c <_strtod_l+0xfc>
  4087c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
  4087c6:	f04f 3aff 	mov.w	sl, #4294967295
  4087ca:	e7e7      	b.n	40879c <_strtod_l+0xfc>
  4087cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4087ce:	1c5a      	adds	r2, r3, #1
  4087d0:	9219      	str	r2, [sp, #100]	; 0x64
  4087d2:	785b      	ldrb	r3, [r3, #1]
  4087d4:	2b30      	cmp	r3, #48	; 0x30
  4087d6:	d0f9      	beq.n	4087cc <_strtod_l+0x12c>
  4087d8:	2b00      	cmp	r3, #0
  4087da:	d0a1      	beq.n	408720 <_strtod_l+0x80>
  4087dc:	2301      	movs	r3, #1
  4087de:	9308      	str	r3, [sp, #32]
  4087e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4087e2:	930a      	str	r3, [sp, #40]	; 0x28
  4087e4:	2300      	movs	r3, #0
  4087e6:	9305      	str	r3, [sp, #20]
  4087e8:	9306      	str	r3, [sp, #24]
  4087ea:	9304      	str	r3, [sp, #16]
  4087ec:	220a      	movs	r2, #10
  4087ee:	9819      	ldr	r0, [sp, #100]	; 0x64
  4087f0:	7806      	ldrb	r6, [r0, #0]
  4087f2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4087f6:	b2d9      	uxtb	r1, r3
  4087f8:	2909      	cmp	r1, #9
  4087fa:	d979      	bls.n	4088f0 <_strtod_l+0x250>
  4087fc:	462a      	mov	r2, r5
  4087fe:	6839      	ldr	r1, [r7, #0]
  408800:	f002 fffc 	bl	40b7fc <strncmp>
  408804:	2800      	cmp	r0, #0
  408806:	f000 8085 	beq.w	408914 <_strtod_l+0x274>
  40880a:	2000      	movs	r0, #0
  40880c:	9d04      	ldr	r5, [sp, #16]
  40880e:	4633      	mov	r3, r6
  408810:	4602      	mov	r2, r0
  408812:	4601      	mov	r1, r0
  408814:	2b65      	cmp	r3, #101	; 0x65
  408816:	d002      	beq.n	40881e <_strtod_l+0x17e>
  408818:	2b45      	cmp	r3, #69	; 0x45
  40881a:	f040 80ef 	bne.w	4089fc <_strtod_l+0x35c>
  40881e:	b925      	cbnz	r5, 40882a <_strtod_l+0x18a>
  408820:	b910      	cbnz	r0, 408828 <_strtod_l+0x188>
  408822:	9b08      	ldr	r3, [sp, #32]
  408824:	2b00      	cmp	r3, #0
  408826:	d099      	beq.n	40875c <_strtod_l+0xbc>
  408828:	2500      	movs	r5, #0
  40882a:	9c19      	ldr	r4, [sp, #100]	; 0x64
  40882c:	1c63      	adds	r3, r4, #1
  40882e:	9319      	str	r3, [sp, #100]	; 0x64
  408830:	7863      	ldrb	r3, [r4, #1]
  408832:	2b2b      	cmp	r3, #43	; 0x2b
  408834:	f000 80cf 	beq.w	4089d6 <_strtod_l+0x336>
  408838:	2b2d      	cmp	r3, #45	; 0x2d
  40883a:	f000 80d2 	beq.w	4089e2 <_strtod_l+0x342>
  40883e:	2600      	movs	r6, #0
  408840:	9607      	str	r6, [sp, #28]
  408842:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
  408846:	2e09      	cmp	r6, #9
  408848:	f200 80d7 	bhi.w	4089fa <_strtod_l+0x35a>
  40884c:	2b30      	cmp	r3, #48	; 0x30
  40884e:	f000 80ca 	beq.w	4089e6 <_strtod_l+0x346>
  408852:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
  408856:	2e08      	cmp	r6, #8
  408858:	f200 80d0 	bhi.w	4089fc <_strtod_l+0x35c>
  40885c:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
  408860:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408862:	f04f 0c0a 	mov.w	ip, #10
  408866:	461f      	mov	r7, r3
  408868:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40886a:	1c5e      	adds	r6, r3, #1
  40886c:	9619      	str	r6, [sp, #100]	; 0x64
  40886e:	785b      	ldrb	r3, [r3, #1]
  408870:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
  408874:	f1b9 0f09 	cmp.w	r9, #9
  408878:	f240 80ba 	bls.w	4089f0 <_strtod_l+0x350>
  40887c:	1bf6      	subs	r6, r6, r7
  40887e:	2e08      	cmp	r6, #8
  408880:	f644 691f 	movw	r9, #19999	; 0x4e1f
  408884:	dc02      	bgt.n	40888c <_strtod_l+0x1ec>
  408886:	45f1      	cmp	r9, lr
  408888:	bfa8      	it	ge
  40888a:	46f1      	movge	r9, lr
  40888c:	9e07      	ldr	r6, [sp, #28]
  40888e:	b10e      	cbz	r6, 408894 <_strtod_l+0x1f4>
  408890:	f1c9 0900 	rsb	r9, r9, #0
  408894:	2d00      	cmp	r5, #0
  408896:	f040 80d7 	bne.w	408a48 <_strtod_l+0x3a8>
  40889a:	2800      	cmp	r0, #0
  40889c:	f47f af40 	bne.w	408720 <_strtod_l+0x80>
  4088a0:	9a08      	ldr	r2, [sp, #32]
  4088a2:	2a00      	cmp	r2, #0
  4088a4:	f47f af3c 	bne.w	408720 <_strtod_l+0x80>
  4088a8:	2900      	cmp	r1, #0
  4088aa:	f47f af57 	bne.w	40875c <_strtod_l+0xbc>
  4088ae:	2b4e      	cmp	r3, #78	; 0x4e
  4088b0:	f000 80ad 	beq.w	408a0e <_strtod_l+0x36e>
  4088b4:	f300 80a5 	bgt.w	408a02 <_strtod_l+0x362>
  4088b8:	2b49      	cmp	r3, #73	; 0x49
  4088ba:	f47f af4f 	bne.w	40875c <_strtod_l+0xbc>
  4088be:	493c      	ldr	r1, [pc, #240]	; (4089b0 <_strtod_l+0x310>)
  4088c0:	a819      	add	r0, sp, #100	; 0x64
  4088c2:	f001 ff71 	bl	40a7a8 <__match>
  4088c6:	2800      	cmp	r0, #0
  4088c8:	f43f af48 	beq.w	40875c <_strtod_l+0xbc>
  4088cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4088ce:	4939      	ldr	r1, [pc, #228]	; (4089b4 <_strtod_l+0x314>)
  4088d0:	3b01      	subs	r3, #1
  4088d2:	a819      	add	r0, sp, #100	; 0x64
  4088d4:	9319      	str	r3, [sp, #100]	; 0x64
  4088d6:	f001 ff67 	bl	40a7a8 <__match>
  4088da:	b910      	cbnz	r0, 4088e2 <_strtod_l+0x242>
  4088dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4088de:	3301      	adds	r3, #1
  4088e0:	9319      	str	r3, [sp, #100]	; 0x64
  4088e2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 4089b8 <_strtod_l+0x318>
  4088e6:	f04f 0a00 	mov.w	sl, #0
  4088ea:	e719      	b.n	408720 <_strtod_l+0x80>
  4088ec:	2300      	movs	r3, #0
  4088ee:	e776      	b.n	4087de <_strtod_l+0x13e>
  4088f0:	9904      	ldr	r1, [sp, #16]
  4088f2:	2908      	cmp	r1, #8
  4088f4:	bfd5      	itete	le
  4088f6:	9906      	ldrle	r1, [sp, #24]
  4088f8:	9905      	ldrgt	r1, [sp, #20]
  4088fa:	fb02 3301 	mlale	r3, r2, r1, r3
  4088fe:	fb02 3301 	mlagt	r3, r2, r1, r3
  408902:	bfd4      	ite	le
  408904:	9306      	strle	r3, [sp, #24]
  408906:	9305      	strgt	r3, [sp, #20]
  408908:	9b04      	ldr	r3, [sp, #16]
  40890a:	3001      	adds	r0, #1
  40890c:	3301      	adds	r3, #1
  40890e:	9304      	str	r3, [sp, #16]
  408910:	9019      	str	r0, [sp, #100]	; 0x64
  408912:	e76c      	b.n	4087ee <_strtod_l+0x14e>
  408914:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408916:	195a      	adds	r2, r3, r5
  408918:	9219      	str	r2, [sp, #100]	; 0x64
  40891a:	9a04      	ldr	r2, [sp, #16]
  40891c:	5d5b      	ldrb	r3, [r3, r5]
  40891e:	2a00      	cmp	r2, #0
  408920:	d154      	bne.n	4089cc <_strtod_l+0x32c>
  408922:	4610      	mov	r0, r2
  408924:	2b30      	cmp	r3, #48	; 0x30
  408926:	d02a      	beq.n	40897e <_strtod_l+0x2de>
  408928:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  40892c:	2a08      	cmp	r2, #8
  40892e:	f200 8499 	bhi.w	409264 <_strtod_l+0xbc4>
  408932:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408934:	920a      	str	r2, [sp, #40]	; 0x28
  408936:	4602      	mov	r2, r0
  408938:	2000      	movs	r0, #0
  40893a:	4605      	mov	r5, r0
  40893c:	3b30      	subs	r3, #48	; 0x30
  40893e:	f100 0101 	add.w	r1, r0, #1
  408942:	d011      	beq.n	408968 <_strtod_l+0x2c8>
  408944:	440a      	add	r2, r1
  408946:	eb00 0c05 	add.w	ip, r0, r5
  40894a:	4629      	mov	r1, r5
  40894c:	260a      	movs	r6, #10
  40894e:	4561      	cmp	r1, ip
  408950:	d11b      	bne.n	40898a <_strtod_l+0x2ea>
  408952:	4428      	add	r0, r5
  408954:	2808      	cmp	r0, #8
  408956:	f100 0501 	add.w	r5, r0, #1
  40895a:	dc2f      	bgt.n	4089bc <_strtod_l+0x31c>
  40895c:	9806      	ldr	r0, [sp, #24]
  40895e:	210a      	movs	r1, #10
  408960:	fb01 3300 	mla	r3, r1, r0, r3
  408964:	9306      	str	r3, [sp, #24]
  408966:	2100      	movs	r1, #0
  408968:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40896a:	1c58      	adds	r0, r3, #1
  40896c:	9019      	str	r0, [sp, #100]	; 0x64
  40896e:	785b      	ldrb	r3, [r3, #1]
  408970:	4608      	mov	r0, r1
  408972:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  408976:	2909      	cmp	r1, #9
  408978:	d9e0      	bls.n	40893c <_strtod_l+0x29c>
  40897a:	2101      	movs	r1, #1
  40897c:	e74a      	b.n	408814 <_strtod_l+0x174>
  40897e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408980:	1c5a      	adds	r2, r3, #1
  408982:	9219      	str	r2, [sp, #100]	; 0x64
  408984:	3001      	adds	r0, #1
  408986:	785b      	ldrb	r3, [r3, #1]
  408988:	e7cc      	b.n	408924 <_strtod_l+0x284>
  40898a:	3101      	adds	r1, #1
  40898c:	f101 3eff 	add.w	lr, r1, #4294967295
  408990:	f1be 0f08 	cmp.w	lr, #8
  408994:	dc03      	bgt.n	40899e <_strtod_l+0x2fe>
  408996:	9f06      	ldr	r7, [sp, #24]
  408998:	4377      	muls	r7, r6
  40899a:	9706      	str	r7, [sp, #24]
  40899c:	e7d7      	b.n	40894e <_strtod_l+0x2ae>
  40899e:	2910      	cmp	r1, #16
  4089a0:	bfde      	ittt	le
  4089a2:	9f05      	ldrle	r7, [sp, #20]
  4089a4:	4377      	mulle	r7, r6
  4089a6:	9705      	strle	r7, [sp, #20]
  4089a8:	e7d1      	b.n	40894e <_strtod_l+0x2ae>
  4089aa:	bf00      	nop
  4089ac:	0040cc88 	.word	0x0040cc88
  4089b0:	0040cc59 	.word	0x0040cc59
  4089b4:	0040ccdb 	.word	0x0040ccdb
  4089b8:	7ff00000 	.word	0x7ff00000
  4089bc:	2d10      	cmp	r5, #16
  4089be:	bfdf      	itttt	le
  4089c0:	9805      	ldrle	r0, [sp, #20]
  4089c2:	210a      	movle	r1, #10
  4089c4:	fb01 3300 	mlale	r3, r1, r0, r3
  4089c8:	9305      	strle	r3, [sp, #20]
  4089ca:	e7cc      	b.n	408966 <_strtod_l+0x2c6>
  4089cc:	4602      	mov	r2, r0
  4089ce:	9d04      	ldr	r5, [sp, #16]
  4089d0:	e7cf      	b.n	408972 <_strtod_l+0x2d2>
  4089d2:	2101      	movs	r1, #1
  4089d4:	e724      	b.n	408820 <_strtod_l+0x180>
  4089d6:	2300      	movs	r3, #0
  4089d8:	9307      	str	r3, [sp, #28]
  4089da:	1ca3      	adds	r3, r4, #2
  4089dc:	9319      	str	r3, [sp, #100]	; 0x64
  4089de:	78a3      	ldrb	r3, [r4, #2]
  4089e0:	e72f      	b.n	408842 <_strtod_l+0x1a2>
  4089e2:	2301      	movs	r3, #1
  4089e4:	e7f8      	b.n	4089d8 <_strtod_l+0x338>
  4089e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4089e8:	1c5e      	adds	r6, r3, #1
  4089ea:	9619      	str	r6, [sp, #100]	; 0x64
  4089ec:	785b      	ldrb	r3, [r3, #1]
  4089ee:	e72d      	b.n	40884c <_strtod_l+0x1ac>
  4089f0:	fb0c 3e0e 	mla	lr, ip, lr, r3
  4089f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
  4089f8:	e736      	b.n	408868 <_strtod_l+0x1c8>
  4089fa:	9419      	str	r4, [sp, #100]	; 0x64
  4089fc:	f04f 0900 	mov.w	r9, #0
  408a00:	e748      	b.n	408894 <_strtod_l+0x1f4>
  408a02:	2b69      	cmp	r3, #105	; 0x69
  408a04:	f43f af5b 	beq.w	4088be <_strtod_l+0x21e>
  408a08:	2b6e      	cmp	r3, #110	; 0x6e
  408a0a:	f47f aea7 	bne.w	40875c <_strtod_l+0xbc>
  408a0e:	498c      	ldr	r1, [pc, #560]	; (408c40 <_strtod_l+0x5a0>)
  408a10:	a819      	add	r0, sp, #100	; 0x64
  408a12:	f001 fec9 	bl	40a7a8 <__match>
  408a16:	2800      	cmp	r0, #0
  408a18:	f43f aea0 	beq.w	40875c <_strtod_l+0xbc>
  408a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408a1e:	781b      	ldrb	r3, [r3, #0]
  408a20:	2b28      	cmp	r3, #40	; 0x28
  408a22:	d10e      	bne.n	408a42 <_strtod_l+0x3a2>
  408a24:	aa1c      	add	r2, sp, #112	; 0x70
  408a26:	4987      	ldr	r1, [pc, #540]	; (408c44 <_strtod_l+0x5a4>)
  408a28:	a819      	add	r0, sp, #100	; 0x64
  408a2a:	f001 fed0 	bl	40a7ce <__hexnan>
  408a2e:	2805      	cmp	r0, #5
  408a30:	d107      	bne.n	408a42 <_strtod_l+0x3a2>
  408a32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a34:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
  408a38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
  408a3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
  408a40:	e66e      	b.n	408720 <_strtod_l+0x80>
  408a42:	f8df b210 	ldr.w	fp, [pc, #528]	; 408c54 <_strtod_l+0x5b4>
  408a46:	e74e      	b.n	4088e6 <_strtod_l+0x246>
  408a48:	9b04      	ldr	r3, [sp, #16]
  408a4a:	9806      	ldr	r0, [sp, #24]
  408a4c:	2b00      	cmp	r3, #0
  408a4e:	bf08      	it	eq
  408a50:	462b      	moveq	r3, r5
  408a52:	2d10      	cmp	r5, #16
  408a54:	462c      	mov	r4, r5
  408a56:	eba9 0902 	sub.w	r9, r9, r2
  408a5a:	bfa8      	it	ge
  408a5c:	2410      	movge	r4, #16
  408a5e:	9304      	str	r3, [sp, #16]
  408a60:	f003 f89a 	bl	40bb98 <__aeabi_ui2d>
  408a64:	2c09      	cmp	r4, #9
  408a66:	4682      	mov	sl, r0
  408a68:	468b      	mov	fp, r1
  408a6a:	dd13      	ble.n	408a94 <_strtod_l+0x3f4>
  408a6c:	4b76      	ldr	r3, [pc, #472]	; (408c48 <_strtod_l+0x5a8>)
  408a6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  408a72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  408a76:	f003 f905 	bl	40bc84 <__aeabi_dmul>
  408a7a:	4606      	mov	r6, r0
  408a7c:	9805      	ldr	r0, [sp, #20]
  408a7e:	460f      	mov	r7, r1
  408a80:	f003 f88a 	bl	40bb98 <__aeabi_ui2d>
  408a84:	4602      	mov	r2, r0
  408a86:	460b      	mov	r3, r1
  408a88:	4630      	mov	r0, r6
  408a8a:	4639      	mov	r1, r7
  408a8c:	f002 ff48 	bl	40b920 <__adddf3>
  408a90:	4682      	mov	sl, r0
  408a92:	468b      	mov	fp, r1
  408a94:	2d0f      	cmp	r5, #15
  408a96:	dc36      	bgt.n	408b06 <_strtod_l+0x466>
  408a98:	f1b9 0f00 	cmp.w	r9, #0
  408a9c:	f43f ae40 	beq.w	408720 <_strtod_l+0x80>
  408aa0:	dd24      	ble.n	408aec <_strtod_l+0x44c>
  408aa2:	f1b9 0f16 	cmp.w	r9, #22
  408aa6:	dc0b      	bgt.n	408ac0 <_strtod_l+0x420>
  408aa8:	4d67      	ldr	r5, [pc, #412]	; (408c48 <_strtod_l+0x5a8>)
  408aaa:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
  408aae:	e9d9 0100 	ldrd	r0, r1, [r9]
  408ab2:	4652      	mov	r2, sl
  408ab4:	465b      	mov	r3, fp
  408ab6:	f003 f8e5 	bl	40bc84 <__aeabi_dmul>
  408aba:	4682      	mov	sl, r0
  408abc:	468b      	mov	fp, r1
  408abe:	e62f      	b.n	408720 <_strtod_l+0x80>
  408ac0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  408ac4:	4599      	cmp	r9, r3
  408ac6:	dc1e      	bgt.n	408b06 <_strtod_l+0x466>
  408ac8:	4c5f      	ldr	r4, [pc, #380]	; (408c48 <_strtod_l+0x5a8>)
  408aca:	f1c5 050f 	rsb	r5, r5, #15
  408ace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  408ad2:	eba9 0505 	sub.w	r5, r9, r5
  408ad6:	4652      	mov	r2, sl
  408ad8:	465b      	mov	r3, fp
  408ada:	e9d1 0100 	ldrd	r0, r1, [r1]
  408ade:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  408ae2:	f003 f8cf 	bl	40bc84 <__aeabi_dmul>
  408ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
  408aea:	e7e4      	b.n	408ab6 <_strtod_l+0x416>
  408aec:	f119 0f16 	cmn.w	r9, #22
  408af0:	db09      	blt.n	408b06 <_strtod_l+0x466>
  408af2:	4d55      	ldr	r5, [pc, #340]	; (408c48 <_strtod_l+0x5a8>)
  408af4:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
  408af8:	e9d9 2300 	ldrd	r2, r3, [r9]
  408afc:	4650      	mov	r0, sl
  408afe:	4659      	mov	r1, fp
  408b00:	f003 f9ea 	bl	40bed8 <__aeabi_ddiv>
  408b04:	e7d9      	b.n	408aba <_strtod_l+0x41a>
  408b06:	1b2c      	subs	r4, r5, r4
  408b08:	444c      	add	r4, r9
  408b0a:	2c00      	cmp	r4, #0
  408b0c:	dd73      	ble.n	408bf6 <_strtod_l+0x556>
  408b0e:	f014 030f 	ands.w	r3, r4, #15
  408b12:	d00a      	beq.n	408b2a <_strtod_l+0x48a>
  408b14:	494c      	ldr	r1, [pc, #304]	; (408c48 <_strtod_l+0x5a8>)
  408b16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408b1a:	4652      	mov	r2, sl
  408b1c:	465b      	mov	r3, fp
  408b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
  408b22:	f003 f8af 	bl	40bc84 <__aeabi_dmul>
  408b26:	4682      	mov	sl, r0
  408b28:	468b      	mov	fp, r1
  408b2a:	f034 040f 	bics.w	r4, r4, #15
  408b2e:	d054      	beq.n	408bda <_strtod_l+0x53a>
  408b30:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  408b34:	dd27      	ble.n	408b86 <_strtod_l+0x4e6>
  408b36:	f04f 0900 	mov.w	r9, #0
  408b3a:	f8cd 9010 	str.w	r9, [sp, #16]
  408b3e:	f8cd 901c 	str.w	r9, [sp, #28]
  408b42:	f8cd 9018 	str.w	r9, [sp, #24]
  408b46:	2322      	movs	r3, #34	; 0x22
  408b48:	f8df b10c 	ldr.w	fp, [pc, #268]	; 408c58 <_strtod_l+0x5b8>
  408b4c:	f8c8 3000 	str.w	r3, [r8]
  408b50:	f04f 0a00 	mov.w	sl, #0
  408b54:	9b07      	ldr	r3, [sp, #28]
  408b56:	2b00      	cmp	r3, #0
  408b58:	f43f ade2 	beq.w	408720 <_strtod_l+0x80>
  408b5c:	991a      	ldr	r1, [sp, #104]	; 0x68
  408b5e:	4640      	mov	r0, r8
  408b60:	f001 ff9c 	bl	40aa9c <_Bfree>
  408b64:	9906      	ldr	r1, [sp, #24]
  408b66:	4640      	mov	r0, r8
  408b68:	f001 ff98 	bl	40aa9c <_Bfree>
  408b6c:	9904      	ldr	r1, [sp, #16]
  408b6e:	4640      	mov	r0, r8
  408b70:	f001 ff94 	bl	40aa9c <_Bfree>
  408b74:	9907      	ldr	r1, [sp, #28]
  408b76:	4640      	mov	r0, r8
  408b78:	f001 ff90 	bl	40aa9c <_Bfree>
  408b7c:	4649      	mov	r1, r9
  408b7e:	4640      	mov	r0, r8
  408b80:	f001 ff8c 	bl	40aa9c <_Bfree>
  408b84:	e5cc      	b.n	408720 <_strtod_l+0x80>
  408b86:	2300      	movs	r3, #0
  408b88:	4e30      	ldr	r6, [pc, #192]	; (408c4c <_strtod_l+0x5ac>)
  408b8a:	1124      	asrs	r4, r4, #4
  408b8c:	4650      	mov	r0, sl
  408b8e:	4659      	mov	r1, fp
  408b90:	461f      	mov	r7, r3
  408b92:	2c01      	cmp	r4, #1
  408b94:	dc24      	bgt.n	408be0 <_strtod_l+0x540>
  408b96:	b10b      	cbz	r3, 408b9c <_strtod_l+0x4fc>
  408b98:	4682      	mov	sl, r0
  408b9a:	468b      	mov	fp, r1
  408b9c:	4b2b      	ldr	r3, [pc, #172]	; (408c4c <_strtod_l+0x5ac>)
  408b9e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
  408ba2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
  408ba6:	4652      	mov	r2, sl
  408ba8:	465b      	mov	r3, fp
  408baa:	e9d7 0100 	ldrd	r0, r1, [r7]
  408bae:	f003 f869 	bl	40bc84 <__aeabi_dmul>
  408bb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  408bb6:	468b      	mov	fp, r1
  408bb8:	460a      	mov	r2, r1
  408bba:	0d1b      	lsrs	r3, r3, #20
  408bbc:	4924      	ldr	r1, [pc, #144]	; (408c50 <_strtod_l+0x5b0>)
  408bbe:	051b      	lsls	r3, r3, #20
  408bc0:	428b      	cmp	r3, r1
  408bc2:	4682      	mov	sl, r0
  408bc4:	d8b7      	bhi.n	408b36 <_strtod_l+0x496>
  408bc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  408bca:	428b      	cmp	r3, r1
  408bcc:	bf86      	itte	hi
  408bce:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 408c5c <_strtod_l+0x5bc>
  408bd2:	f04f 3aff 	movhi.w	sl, #4294967295
  408bd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
  408bda:	2300      	movs	r3, #0
  408bdc:	9305      	str	r3, [sp, #20]
  408bde:	e070      	b.n	408cc2 <_strtod_l+0x622>
  408be0:	07e2      	lsls	r2, r4, #31
  408be2:	d504      	bpl.n	408bee <_strtod_l+0x54e>
  408be4:	e9d6 2300 	ldrd	r2, r3, [r6]
  408be8:	f003 f84c 	bl	40bc84 <__aeabi_dmul>
  408bec:	2301      	movs	r3, #1
  408bee:	3701      	adds	r7, #1
  408bf0:	1064      	asrs	r4, r4, #1
  408bf2:	3608      	adds	r6, #8
  408bf4:	e7cd      	b.n	408b92 <_strtod_l+0x4f2>
  408bf6:	d0f0      	beq.n	408bda <_strtod_l+0x53a>
  408bf8:	4264      	negs	r4, r4
  408bfa:	f014 020f 	ands.w	r2, r4, #15
  408bfe:	d00a      	beq.n	408c16 <_strtod_l+0x576>
  408c00:	4b11      	ldr	r3, [pc, #68]	; (408c48 <_strtod_l+0x5a8>)
  408c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408c06:	4650      	mov	r0, sl
  408c08:	4659      	mov	r1, fp
  408c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c0e:	f003 f963 	bl	40bed8 <__aeabi_ddiv>
  408c12:	4682      	mov	sl, r0
  408c14:	468b      	mov	fp, r1
  408c16:	1124      	asrs	r4, r4, #4
  408c18:	d0df      	beq.n	408bda <_strtod_l+0x53a>
  408c1a:	2c1f      	cmp	r4, #31
  408c1c:	dd20      	ble.n	408c60 <_strtod_l+0x5c0>
  408c1e:	f04f 0900 	mov.w	r9, #0
  408c22:	f8cd 9010 	str.w	r9, [sp, #16]
  408c26:	f8cd 901c 	str.w	r9, [sp, #28]
  408c2a:	f8cd 9018 	str.w	r9, [sp, #24]
  408c2e:	2322      	movs	r3, #34	; 0x22
  408c30:	f04f 0a00 	mov.w	sl, #0
  408c34:	f04f 0b00 	mov.w	fp, #0
  408c38:	f8c8 3000 	str.w	r3, [r8]
  408c3c:	e78a      	b.n	408b54 <_strtod_l+0x4b4>
  408c3e:	bf00      	nop
  408c40:	0040cc61 	.word	0x0040cc61
  408c44:	0040cc9c 	.word	0x0040cc9c
  408c48:	0040cd18 	.word	0x0040cd18
  408c4c:	0040ccf0 	.word	0x0040ccf0
  408c50:	7ca00000 	.word	0x7ca00000
  408c54:	fff80000 	.word	0xfff80000
  408c58:	7ff00000 	.word	0x7ff00000
  408c5c:	7fefffff 	.word	0x7fefffff
  408c60:	f014 0310 	ands.w	r3, r4, #16
  408c64:	bf18      	it	ne
  408c66:	236a      	movne	r3, #106	; 0x6a
  408c68:	4e9f      	ldr	r6, [pc, #636]	; (408ee8 <_strtod_l+0x848>)
  408c6a:	9305      	str	r3, [sp, #20]
  408c6c:	4650      	mov	r0, sl
  408c6e:	4659      	mov	r1, fp
  408c70:	2300      	movs	r3, #0
  408c72:	2c00      	cmp	r4, #0
  408c74:	f300 8106 	bgt.w	408e84 <_strtod_l+0x7e4>
  408c78:	b10b      	cbz	r3, 408c7e <_strtod_l+0x5de>
  408c7a:	4682      	mov	sl, r0
  408c7c:	468b      	mov	fp, r1
  408c7e:	9b05      	ldr	r3, [sp, #20]
  408c80:	b1bb      	cbz	r3, 408cb2 <_strtod_l+0x612>
  408c82:	f3cb 530a 	ubfx	r3, fp, #20, #11
  408c86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  408c8a:	2b00      	cmp	r3, #0
  408c8c:	4659      	mov	r1, fp
  408c8e:	dd10      	ble.n	408cb2 <_strtod_l+0x612>
  408c90:	2b1f      	cmp	r3, #31
  408c92:	f340 8101 	ble.w	408e98 <_strtod_l+0x7f8>
  408c96:	2b34      	cmp	r3, #52	; 0x34
  408c98:	bfde      	ittt	le
  408c9a:	3b20      	suble	r3, #32
  408c9c:	f04f 32ff 	movle.w	r2, #4294967295
  408ca0:	fa02 f303 	lslle.w	r3, r2, r3
  408ca4:	f04f 0a00 	mov.w	sl, #0
  408ca8:	bfcc      	ite	gt
  408caa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
  408cae:	ea03 0b01 	andle.w	fp, r3, r1
  408cb2:	2200      	movs	r2, #0
  408cb4:	2300      	movs	r3, #0
  408cb6:	4650      	mov	r0, sl
  408cb8:	4659      	mov	r1, fp
  408cba:	f003 fa4b 	bl	40c154 <__aeabi_dcmpeq>
  408cbe:	2800      	cmp	r0, #0
  408cc0:	d1ad      	bne.n	408c1e <_strtod_l+0x57e>
  408cc2:	9b06      	ldr	r3, [sp, #24]
  408cc4:	9300      	str	r3, [sp, #0]
  408cc6:	9a04      	ldr	r2, [sp, #16]
  408cc8:	990a      	ldr	r1, [sp, #40]	; 0x28
  408cca:	462b      	mov	r3, r5
  408ccc:	4640      	mov	r0, r8
  408cce:	f001 ff37 	bl	40ab40 <__s2b>
  408cd2:	9007      	str	r0, [sp, #28]
  408cd4:	2800      	cmp	r0, #0
  408cd6:	f43f af2e 	beq.w	408b36 <_strtod_l+0x496>
  408cda:	f1b9 0f00 	cmp.w	r9, #0
  408cde:	f1c9 0300 	rsb	r3, r9, #0
  408ce2:	bfa8      	it	ge
  408ce4:	2300      	movge	r3, #0
  408ce6:	930e      	str	r3, [sp, #56]	; 0x38
  408ce8:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  408cec:	f04f 0900 	mov.w	r9, #0
  408cf0:	930f      	str	r3, [sp, #60]	; 0x3c
  408cf2:	f8cd 9010 	str.w	r9, [sp, #16]
  408cf6:	9b07      	ldr	r3, [sp, #28]
  408cf8:	4640      	mov	r0, r8
  408cfa:	6859      	ldr	r1, [r3, #4]
  408cfc:	f001 fe9a 	bl	40aa34 <_Balloc>
  408d00:	9006      	str	r0, [sp, #24]
  408d02:	2800      	cmp	r0, #0
  408d04:	f43f af1f 	beq.w	408b46 <_strtod_l+0x4a6>
  408d08:	9b07      	ldr	r3, [sp, #28]
  408d0a:	691a      	ldr	r2, [r3, #16]
  408d0c:	3202      	adds	r2, #2
  408d0e:	f103 010c 	add.w	r1, r3, #12
  408d12:	0092      	lsls	r2, r2, #2
  408d14:	300c      	adds	r0, #12
  408d16:	f7fe fd8b 	bl	407830 <memcpy>
  408d1a:	ab1c      	add	r3, sp, #112	; 0x70
  408d1c:	9301      	str	r3, [sp, #4]
  408d1e:	ab1b      	add	r3, sp, #108	; 0x6c
  408d20:	9300      	str	r3, [sp, #0]
  408d22:	4652      	mov	r2, sl
  408d24:	465b      	mov	r3, fp
  408d26:	4640      	mov	r0, r8
  408d28:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  408d2c:	f002 f9b8 	bl	40b0a0 <__d2b>
  408d30:	901a      	str	r0, [sp, #104]	; 0x68
  408d32:	2800      	cmp	r0, #0
  408d34:	f43f af07 	beq.w	408b46 <_strtod_l+0x4a6>
  408d38:	2101      	movs	r1, #1
  408d3a:	4640      	mov	r0, r8
  408d3c:	f001 ff8c 	bl	40ac58 <__i2b>
  408d40:	9004      	str	r0, [sp, #16]
  408d42:	4603      	mov	r3, r0
  408d44:	2800      	cmp	r0, #0
  408d46:	f43f aefe 	beq.w	408b46 <_strtod_l+0x4a6>
  408d4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  408d4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  408d4e:	2d00      	cmp	r5, #0
  408d50:	bfab      	itete	ge
  408d52:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
  408d54:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
  408d56:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
  408d58:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
  408d5a:	bfac      	ite	ge
  408d5c:	195e      	addge	r6, r3, r5
  408d5e:	1b5c      	sublt	r4, r3, r5
  408d60:	9b05      	ldr	r3, [sp, #20]
  408d62:	1aed      	subs	r5, r5, r3
  408d64:	4415      	add	r5, r2
  408d66:	4b61      	ldr	r3, [pc, #388]	; (408eec <_strtod_l+0x84c>)
  408d68:	3d01      	subs	r5, #1
  408d6a:	429d      	cmp	r5, r3
  408d6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
  408d70:	f280 80a4 	bge.w	408ebc <_strtod_l+0x81c>
  408d74:	1b5b      	subs	r3, r3, r5
  408d76:	2b1f      	cmp	r3, #31
  408d78:	eba2 0203 	sub.w	r2, r2, r3
  408d7c:	f04f 0701 	mov.w	r7, #1
  408d80:	f300 8091 	bgt.w	408ea6 <_strtod_l+0x806>
  408d84:	fa07 f303 	lsl.w	r3, r7, r3
  408d88:	9314      	str	r3, [sp, #80]	; 0x50
  408d8a:	2500      	movs	r5, #0
  408d8c:	18b7      	adds	r7, r6, r2
  408d8e:	9b05      	ldr	r3, [sp, #20]
  408d90:	42be      	cmp	r6, r7
  408d92:	4414      	add	r4, r2
  408d94:	441c      	add	r4, r3
  408d96:	4633      	mov	r3, r6
  408d98:	bfa8      	it	ge
  408d9a:	463b      	movge	r3, r7
  408d9c:	42a3      	cmp	r3, r4
  408d9e:	bfa8      	it	ge
  408da0:	4623      	movge	r3, r4
  408da2:	2b00      	cmp	r3, #0
  408da4:	bfc2      	ittt	gt
  408da6:	1aff      	subgt	r7, r7, r3
  408da8:	1ae4      	subgt	r4, r4, r3
  408daa:	1af6      	subgt	r6, r6, r3
  408dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408dae:	b1bb      	cbz	r3, 408de0 <_strtod_l+0x740>
  408db0:	461a      	mov	r2, r3
  408db2:	9904      	ldr	r1, [sp, #16]
  408db4:	4640      	mov	r0, r8
  408db6:	f001 ffe5 	bl	40ad84 <__pow5mult>
  408dba:	9004      	str	r0, [sp, #16]
  408dbc:	2800      	cmp	r0, #0
  408dbe:	f43f aec2 	beq.w	408b46 <_strtod_l+0x4a6>
  408dc2:	4601      	mov	r1, r0
  408dc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408dc6:	4640      	mov	r0, r8
  408dc8:	f001 ff4f 	bl	40ac6a <__multiply>
  408dcc:	9008      	str	r0, [sp, #32]
  408dce:	2800      	cmp	r0, #0
  408dd0:	f43f aeb9 	beq.w	408b46 <_strtod_l+0x4a6>
  408dd4:	991a      	ldr	r1, [sp, #104]	; 0x68
  408dd6:	4640      	mov	r0, r8
  408dd8:	f001 fe60 	bl	40aa9c <_Bfree>
  408ddc:	9b08      	ldr	r3, [sp, #32]
  408dde:	931a      	str	r3, [sp, #104]	; 0x68
  408de0:	2f00      	cmp	r7, #0
  408de2:	dc6f      	bgt.n	408ec4 <_strtod_l+0x824>
  408de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408de6:	2b00      	cmp	r3, #0
  408de8:	d175      	bne.n	408ed6 <_strtod_l+0x836>
  408dea:	2c00      	cmp	r4, #0
  408dec:	dd08      	ble.n	408e00 <_strtod_l+0x760>
  408dee:	4622      	mov	r2, r4
  408df0:	9906      	ldr	r1, [sp, #24]
  408df2:	4640      	mov	r0, r8
  408df4:	f002 f814 	bl	40ae20 <__lshift>
  408df8:	9006      	str	r0, [sp, #24]
  408dfa:	2800      	cmp	r0, #0
  408dfc:	f43f aea3 	beq.w	408b46 <_strtod_l+0x4a6>
  408e00:	2e00      	cmp	r6, #0
  408e02:	dd08      	ble.n	408e16 <_strtod_l+0x776>
  408e04:	4632      	mov	r2, r6
  408e06:	9904      	ldr	r1, [sp, #16]
  408e08:	4640      	mov	r0, r8
  408e0a:	f002 f809 	bl	40ae20 <__lshift>
  408e0e:	9004      	str	r0, [sp, #16]
  408e10:	2800      	cmp	r0, #0
  408e12:	f43f ae98 	beq.w	408b46 <_strtod_l+0x4a6>
  408e16:	9a06      	ldr	r2, [sp, #24]
  408e18:	991a      	ldr	r1, [sp, #104]	; 0x68
  408e1a:	4640      	mov	r0, r8
  408e1c:	f002 f86b 	bl	40aef6 <__mdiff>
  408e20:	4681      	mov	r9, r0
  408e22:	2800      	cmp	r0, #0
  408e24:	f43f ae8f 	beq.w	408b46 <_strtod_l+0x4a6>
  408e28:	2400      	movs	r4, #0
  408e2a:	68c3      	ldr	r3, [r0, #12]
  408e2c:	9904      	ldr	r1, [sp, #16]
  408e2e:	60c4      	str	r4, [r0, #12]
  408e30:	9308      	str	r3, [sp, #32]
  408e32:	f002 f846 	bl	40aec2 <__mcmp>
  408e36:	42a0      	cmp	r0, r4
  408e38:	da5a      	bge.n	408ef0 <_strtod_l+0x850>
  408e3a:	9b08      	ldr	r3, [sp, #32]
  408e3c:	b9f3      	cbnz	r3, 408e7c <_strtod_l+0x7dc>
  408e3e:	f1ba 0f00 	cmp.w	sl, #0
  408e42:	d11b      	bne.n	408e7c <_strtod_l+0x7dc>
  408e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408e48:	b9c3      	cbnz	r3, 408e7c <_strtod_l+0x7dc>
  408e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  408e4e:	0d1b      	lsrs	r3, r3, #20
  408e50:	051b      	lsls	r3, r3, #20
  408e52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  408e56:	d911      	bls.n	408e7c <_strtod_l+0x7dc>
  408e58:	f8d9 3014 	ldr.w	r3, [r9, #20]
  408e5c:	b91b      	cbnz	r3, 408e66 <_strtod_l+0x7c6>
  408e5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
  408e62:	2b01      	cmp	r3, #1
  408e64:	dd0a      	ble.n	408e7c <_strtod_l+0x7dc>
  408e66:	4649      	mov	r1, r9
  408e68:	2201      	movs	r2, #1
  408e6a:	4640      	mov	r0, r8
  408e6c:	f001 ffd8 	bl	40ae20 <__lshift>
  408e70:	9904      	ldr	r1, [sp, #16]
  408e72:	4681      	mov	r9, r0
  408e74:	f002 f825 	bl	40aec2 <__mcmp>
  408e78:	2800      	cmp	r0, #0
  408e7a:	dc6a      	bgt.n	408f52 <_strtod_l+0x8b2>
  408e7c:	9b05      	ldr	r3, [sp, #20]
  408e7e:	2b00      	cmp	r3, #0
  408e80:	d174      	bne.n	408f6c <_strtod_l+0x8cc>
  408e82:	e66b      	b.n	408b5c <_strtod_l+0x4bc>
  408e84:	07e2      	lsls	r2, r4, #31
  408e86:	d504      	bpl.n	408e92 <_strtod_l+0x7f2>
  408e88:	e9d6 2300 	ldrd	r2, r3, [r6]
  408e8c:	f002 fefa 	bl	40bc84 <__aeabi_dmul>
  408e90:	2301      	movs	r3, #1
  408e92:	1064      	asrs	r4, r4, #1
  408e94:	3608      	adds	r6, #8
  408e96:	e6ec      	b.n	408c72 <_strtod_l+0x5d2>
  408e98:	f04f 32ff 	mov.w	r2, #4294967295
  408e9c:	fa02 f303 	lsl.w	r3, r2, r3
  408ea0:	ea03 0a0a 	and.w	sl, r3, sl
  408ea4:	e705      	b.n	408cb2 <_strtod_l+0x612>
  408ea6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
  408eaa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
  408eae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
  408eb2:	35e2      	adds	r5, #226	; 0xe2
  408eb4:	fa07 f505 	lsl.w	r5, r7, r5
  408eb8:	9714      	str	r7, [sp, #80]	; 0x50
  408eba:	e767      	b.n	408d8c <_strtod_l+0x6ec>
  408ebc:	2301      	movs	r3, #1
  408ebe:	2500      	movs	r5, #0
  408ec0:	9314      	str	r3, [sp, #80]	; 0x50
  408ec2:	e763      	b.n	408d8c <_strtod_l+0x6ec>
  408ec4:	463a      	mov	r2, r7
  408ec6:	991a      	ldr	r1, [sp, #104]	; 0x68
  408ec8:	4640      	mov	r0, r8
  408eca:	f001 ffa9 	bl	40ae20 <__lshift>
  408ece:	901a      	str	r0, [sp, #104]	; 0x68
  408ed0:	2800      	cmp	r0, #0
  408ed2:	d187      	bne.n	408de4 <_strtod_l+0x744>
  408ed4:	e637      	b.n	408b46 <_strtod_l+0x4a6>
  408ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408ed8:	9906      	ldr	r1, [sp, #24]
  408eda:	4640      	mov	r0, r8
  408edc:	f001 ff52 	bl	40ad84 <__pow5mult>
  408ee0:	9006      	str	r0, [sp, #24]
  408ee2:	2800      	cmp	r0, #0
  408ee4:	d181      	bne.n	408dea <_strtod_l+0x74a>
  408ee6:	e62e      	b.n	408b46 <_strtod_l+0x4a6>
  408ee8:	0040ccb0 	.word	0x0040ccb0
  408eec:	fffffc02 	.word	0xfffffc02
  408ef0:	f040 8086 	bne.w	409000 <_strtod_l+0x960>
  408ef4:	9a08      	ldr	r2, [sp, #32]
  408ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408efa:	b332      	cbz	r2, 408f4a <_strtod_l+0x8aa>
  408efc:	4aac      	ldr	r2, [pc, #688]	; (4091b0 <_strtod_l+0xb10>)
  408efe:	4293      	cmp	r3, r2
  408f00:	4659      	mov	r1, fp
  408f02:	d152      	bne.n	408faa <_strtod_l+0x90a>
  408f04:	9b05      	ldr	r3, [sp, #20]
  408f06:	4650      	mov	r0, sl
  408f08:	b1d3      	cbz	r3, 408f40 <_strtod_l+0x8a0>
  408f0a:	4aaa      	ldr	r2, [pc, #680]	; (4091b4 <_strtod_l+0xb14>)
  408f0c:	400a      	ands	r2, r1
  408f0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
  408f12:	f04f 34ff 	mov.w	r4, #4294967295
  408f16:	d816      	bhi.n	408f46 <_strtod_l+0x8a6>
  408f18:	0d12      	lsrs	r2, r2, #20
  408f1a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
  408f1e:	fa04 f303 	lsl.w	r3, r4, r3
  408f22:	4283      	cmp	r3, r0
  408f24:	d141      	bne.n	408faa <_strtod_l+0x90a>
  408f26:	4aa4      	ldr	r2, [pc, #656]	; (4091b8 <_strtod_l+0xb18>)
  408f28:	4291      	cmp	r1, r2
  408f2a:	d102      	bne.n	408f32 <_strtod_l+0x892>
  408f2c:	3301      	adds	r3, #1
  408f2e:	f43f ae0a 	beq.w	408b46 <_strtod_l+0x4a6>
  408f32:	4ba0      	ldr	r3, [pc, #640]	; (4091b4 <_strtod_l+0xb14>)
  408f34:	400b      	ands	r3, r1
  408f36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
  408f3a:	f04f 0a00 	mov.w	sl, #0
  408f3e:	e79d      	b.n	408e7c <_strtod_l+0x7dc>
  408f40:	f04f 33ff 	mov.w	r3, #4294967295
  408f44:	e7ed      	b.n	408f22 <_strtod_l+0x882>
  408f46:	4623      	mov	r3, r4
  408f48:	e7eb      	b.n	408f22 <_strtod_l+0x882>
  408f4a:	bb73      	cbnz	r3, 408faa <_strtod_l+0x90a>
  408f4c:	f1ba 0f00 	cmp.w	sl, #0
  408f50:	d12b      	bne.n	408faa <_strtod_l+0x90a>
  408f52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  408f56:	9a05      	ldr	r2, [sp, #20]
  408f58:	0d1b      	lsrs	r3, r3, #20
  408f5a:	051b      	lsls	r3, r3, #20
  408f5c:	b1e2      	cbz	r2, 408f98 <_strtod_l+0x8f8>
  408f5e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  408f62:	dc19      	bgt.n	408f98 <_strtod_l+0x8f8>
  408f64:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  408f68:	f77f ae61 	ble.w	408c2e <_strtod_l+0x58e>
  408f6c:	4b93      	ldr	r3, [pc, #588]	; (4091bc <_strtod_l+0xb1c>)
  408f6e:	930d      	str	r3, [sp, #52]	; 0x34
  408f70:	2300      	movs	r3, #0
  408f72:	930c      	str	r3, [sp, #48]	; 0x30
  408f74:	4650      	mov	r0, sl
  408f76:	4659      	mov	r1, fp
  408f78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  408f7c:	f002 fe82 	bl	40bc84 <__aeabi_dmul>
  408f80:	4682      	mov	sl, r0
  408f82:	468b      	mov	fp, r1
  408f84:	2900      	cmp	r1, #0
  408f86:	f47f ade9 	bne.w	408b5c <_strtod_l+0x4bc>
  408f8a:	2800      	cmp	r0, #0
  408f8c:	f47f ade6 	bne.w	408b5c <_strtod_l+0x4bc>
  408f90:	2322      	movs	r3, #34	; 0x22
  408f92:	f8c8 3000 	str.w	r3, [r8]
  408f96:	e5e1      	b.n	408b5c <_strtod_l+0x4bc>
  408f98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  408f9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
  408fa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
  408fa4:	f04f 3aff 	mov.w	sl, #4294967295
  408fa8:	e768      	b.n	408e7c <_strtod_l+0x7dc>
  408faa:	b19d      	cbz	r5, 408fd4 <_strtod_l+0x934>
  408fac:	ea15 0f0b 	tst.w	r5, fp
  408fb0:	f43f af64 	beq.w	408e7c <_strtod_l+0x7dc>
  408fb4:	9b08      	ldr	r3, [sp, #32]
  408fb6:	9a05      	ldr	r2, [sp, #20]
  408fb8:	4650      	mov	r0, sl
  408fba:	4659      	mov	r1, fp
  408fbc:	b173      	cbz	r3, 408fdc <_strtod_l+0x93c>
  408fbe:	f7ff fb4e 	bl	40865e <sulp>
  408fc2:	4602      	mov	r2, r0
  408fc4:	460b      	mov	r3, r1
  408fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  408fca:	f002 fca9 	bl	40b920 <__adddf3>
  408fce:	4682      	mov	sl, r0
  408fd0:	468b      	mov	fp, r1
  408fd2:	e753      	b.n	408e7c <_strtod_l+0x7dc>
  408fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408fd6:	ea13 0f0a 	tst.w	r3, sl
  408fda:	e7e9      	b.n	408fb0 <_strtod_l+0x910>
  408fdc:	f7ff fb3f 	bl	40865e <sulp>
  408fe0:	4602      	mov	r2, r0
  408fe2:	460b      	mov	r3, r1
  408fe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  408fe8:	f002 fc98 	bl	40b91c <__aeabi_dsub>
  408fec:	2200      	movs	r2, #0
  408fee:	2300      	movs	r3, #0
  408ff0:	4682      	mov	sl, r0
  408ff2:	468b      	mov	fp, r1
  408ff4:	f003 f8ae 	bl	40c154 <__aeabi_dcmpeq>
  408ff8:	2800      	cmp	r0, #0
  408ffa:	f47f ae18 	bne.w	408c2e <_strtod_l+0x58e>
  408ffe:	e73d      	b.n	408e7c <_strtod_l+0x7dc>
  409000:	9904      	ldr	r1, [sp, #16]
  409002:	4648      	mov	r0, r9
  409004:	f002 f89b 	bl	40b13e <__ratio>
  409008:	2200      	movs	r2, #0
  40900a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40900e:	4606      	mov	r6, r0
  409010:	460f      	mov	r7, r1
  409012:	f003 f8b3 	bl	40c17c <__aeabi_dcmple>
  409016:	2800      	cmp	r0, #0
  409018:	d070      	beq.n	4090fc <_strtod_l+0xa5c>
  40901a:	9b08      	ldr	r3, [sp, #32]
  40901c:	2b00      	cmp	r3, #0
  40901e:	d043      	beq.n	4090a8 <_strtod_l+0xa08>
  409020:	4f67      	ldr	r7, [pc, #412]	; (4091c0 <_strtod_l+0xb20>)
  409022:	2600      	movs	r6, #0
  409024:	4d66      	ldr	r5, [pc, #408]	; (4091c0 <_strtod_l+0xb20>)
  409026:	4b63      	ldr	r3, [pc, #396]	; (4091b4 <_strtod_l+0xb14>)
  409028:	ea0b 0303 	and.w	r3, fp, r3
  40902c:	9314      	str	r3, [sp, #80]	; 0x50
  40902e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409030:	4b64      	ldr	r3, [pc, #400]	; (4091c4 <_strtod_l+0xb24>)
  409032:	429a      	cmp	r2, r3
  409034:	f040 80ce 	bne.w	4091d4 <_strtod_l+0xb34>
  409038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40903c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
  409040:	4650      	mov	r0, sl
  409042:	4659      	mov	r1, fp
  409044:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  409048:	f001 ffb4 	bl	40afb4 <__ulp>
  40904c:	4602      	mov	r2, r0
  40904e:	460b      	mov	r3, r1
  409050:	4630      	mov	r0, r6
  409052:	4639      	mov	r1, r7
  409054:	f002 fe16 	bl	40bc84 <__aeabi_dmul>
  409058:	4652      	mov	r2, sl
  40905a:	465b      	mov	r3, fp
  40905c:	f002 fc60 	bl	40b920 <__adddf3>
  409060:	4a54      	ldr	r2, [pc, #336]	; (4091b4 <_strtod_l+0xb14>)
  409062:	4b59      	ldr	r3, [pc, #356]	; (4091c8 <_strtod_l+0xb28>)
  409064:	400a      	ands	r2, r1
  409066:	429a      	cmp	r2, r3
  409068:	4682      	mov	sl, r0
  40906a:	d95d      	bls.n	409128 <_strtod_l+0xa88>
  40906c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40906e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
  409072:	429a      	cmp	r2, r3
  409074:	d103      	bne.n	40907e <_strtod_l+0x9de>
  409076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409078:	3301      	adds	r3, #1
  40907a:	f43f ad64 	beq.w	408b46 <_strtod_l+0x4a6>
  40907e:	f8df b138 	ldr.w	fp, [pc, #312]	; 4091b8 <_strtod_l+0xb18>
  409082:	f04f 3aff 	mov.w	sl, #4294967295
  409086:	991a      	ldr	r1, [sp, #104]	; 0x68
  409088:	4640      	mov	r0, r8
  40908a:	f001 fd07 	bl	40aa9c <_Bfree>
  40908e:	9906      	ldr	r1, [sp, #24]
  409090:	4640      	mov	r0, r8
  409092:	f001 fd03 	bl	40aa9c <_Bfree>
  409096:	9904      	ldr	r1, [sp, #16]
  409098:	4640      	mov	r0, r8
  40909a:	f001 fcff 	bl	40aa9c <_Bfree>
  40909e:	4649      	mov	r1, r9
  4090a0:	4640      	mov	r0, r8
  4090a2:	f001 fcfb 	bl	40aa9c <_Bfree>
  4090a6:	e626      	b.n	408cf6 <_strtod_l+0x656>
  4090a8:	f1ba 0f00 	cmp.w	sl, #0
  4090ac:	d118      	bne.n	4090e0 <_strtod_l+0xa40>
  4090ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4090b2:	b9e3      	cbnz	r3, 4090ee <_strtod_l+0xa4e>
  4090b4:	2200      	movs	r2, #0
  4090b6:	4b42      	ldr	r3, [pc, #264]	; (4091c0 <_strtod_l+0xb20>)
  4090b8:	4630      	mov	r0, r6
  4090ba:	4639      	mov	r1, r7
  4090bc:	f003 f854 	bl	40c168 <__aeabi_dcmplt>
  4090c0:	b9c8      	cbnz	r0, 4090f6 <_strtod_l+0xa56>
  4090c2:	2200      	movs	r2, #0
  4090c4:	4b41      	ldr	r3, [pc, #260]	; (4091cc <_strtod_l+0xb2c>)
  4090c6:	4630      	mov	r0, r6
  4090c8:	4639      	mov	r1, r7
  4090ca:	f002 fddb 	bl	40bc84 <__aeabi_dmul>
  4090ce:	4604      	mov	r4, r0
  4090d0:	460d      	mov	r5, r1
  4090d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4090d6:	9416      	str	r4, [sp, #88]	; 0x58
  4090d8:	9317      	str	r3, [sp, #92]	; 0x5c
  4090da:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  4090de:	e7a2      	b.n	409026 <_strtod_l+0x986>
  4090e0:	f1ba 0f01 	cmp.w	sl, #1
  4090e4:	d103      	bne.n	4090ee <_strtod_l+0xa4e>
  4090e6:	f1bb 0f00 	cmp.w	fp, #0
  4090ea:	f43f ada0 	beq.w	408c2e <_strtod_l+0x58e>
  4090ee:	2600      	movs	r6, #0
  4090f0:	4f37      	ldr	r7, [pc, #220]	; (4091d0 <_strtod_l+0xb30>)
  4090f2:	2400      	movs	r4, #0
  4090f4:	e796      	b.n	409024 <_strtod_l+0x984>
  4090f6:	9c08      	ldr	r4, [sp, #32]
  4090f8:	4d34      	ldr	r5, [pc, #208]	; (4091cc <_strtod_l+0xb2c>)
  4090fa:	e7ea      	b.n	4090d2 <_strtod_l+0xa32>
  4090fc:	4b33      	ldr	r3, [pc, #204]	; (4091cc <_strtod_l+0xb2c>)
  4090fe:	2200      	movs	r2, #0
  409100:	4630      	mov	r0, r6
  409102:	4639      	mov	r1, r7
  409104:	f002 fdbe 	bl	40bc84 <__aeabi_dmul>
  409108:	9b08      	ldr	r3, [sp, #32]
  40910a:	4604      	mov	r4, r0
  40910c:	460d      	mov	r5, r1
  40910e:	b933      	cbnz	r3, 40911e <_strtod_l+0xa7e>
  409110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409114:	9010      	str	r0, [sp, #64]	; 0x40
  409116:	9311      	str	r3, [sp, #68]	; 0x44
  409118:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  40911c:	e783      	b.n	409026 <_strtod_l+0x986>
  40911e:	4602      	mov	r2, r0
  409120:	460b      	mov	r3, r1
  409122:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  409126:	e7f7      	b.n	409118 <_strtod_l+0xa78>
  409128:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
  40912c:	9b05      	ldr	r3, [sp, #20]
  40912e:	2b00      	cmp	r3, #0
  409130:	d1a9      	bne.n	409086 <_strtod_l+0x9e6>
  409132:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  409136:	0d1b      	lsrs	r3, r3, #20
  409138:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40913a:	051b      	lsls	r3, r3, #20
  40913c:	429a      	cmp	r2, r3
  40913e:	465e      	mov	r6, fp
  409140:	d1a1      	bne.n	409086 <_strtod_l+0x9e6>
  409142:	4629      	mov	r1, r5
  409144:	4620      	mov	r0, r4
  409146:	f003 f84d 	bl	40c1e4 <__aeabi_d2iz>
  40914a:	f002 fd35 	bl	40bbb8 <__aeabi_i2d>
  40914e:	460b      	mov	r3, r1
  409150:	4602      	mov	r2, r0
  409152:	4629      	mov	r1, r5
  409154:	4620      	mov	r0, r4
  409156:	f002 fbe1 	bl	40b91c <__aeabi_dsub>
  40915a:	9b08      	ldr	r3, [sp, #32]
  40915c:	4604      	mov	r4, r0
  40915e:	460d      	mov	r5, r1
  409160:	b933      	cbnz	r3, 409170 <_strtod_l+0xad0>
  409162:	f1ba 0f00 	cmp.w	sl, #0
  409166:	d103      	bne.n	409170 <_strtod_l+0xad0>
  409168:	f3cb 0613 	ubfx	r6, fp, #0, #20
  40916c:	2e00      	cmp	r6, #0
  40916e:	d06c      	beq.n	40924a <_strtod_l+0xbaa>
  409170:	a30b      	add	r3, pc, #44	; (adr r3, 4091a0 <_strtod_l+0xb00>)
  409172:	e9d3 2300 	ldrd	r2, r3, [r3]
  409176:	4620      	mov	r0, r4
  409178:	4629      	mov	r1, r5
  40917a:	f002 fff5 	bl	40c168 <__aeabi_dcmplt>
  40917e:	2800      	cmp	r0, #0
  409180:	f47f acec 	bne.w	408b5c <_strtod_l+0x4bc>
  409184:	a308      	add	r3, pc, #32	; (adr r3, 4091a8 <_strtod_l+0xb08>)
  409186:	e9d3 2300 	ldrd	r2, r3, [r3]
  40918a:	4620      	mov	r0, r4
  40918c:	4629      	mov	r1, r5
  40918e:	f003 f809 	bl	40c1a4 <__aeabi_dcmpgt>
  409192:	2800      	cmp	r0, #0
  409194:	f43f af77 	beq.w	409086 <_strtod_l+0x9e6>
  409198:	e4e0      	b.n	408b5c <_strtod_l+0x4bc>
  40919a:	bf00      	nop
  40919c:	f3af 8000 	nop.w
  4091a0:	94a03595 	.word	0x94a03595
  4091a4:	3fdfffff 	.word	0x3fdfffff
  4091a8:	35afe535 	.word	0x35afe535
  4091ac:	3fe00000 	.word	0x3fe00000
  4091b0:	000fffff 	.word	0x000fffff
  4091b4:	7ff00000 	.word	0x7ff00000
  4091b8:	7fefffff 	.word	0x7fefffff
  4091bc:	39500000 	.word	0x39500000
  4091c0:	3ff00000 	.word	0x3ff00000
  4091c4:	7fe00000 	.word	0x7fe00000
  4091c8:	7c9fffff 	.word	0x7c9fffff
  4091cc:	3fe00000 	.word	0x3fe00000
  4091d0:	bff00000 	.word	0xbff00000
  4091d4:	9b05      	ldr	r3, [sp, #20]
  4091d6:	b313      	cbz	r3, 40921e <_strtod_l+0xb7e>
  4091d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4091da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  4091de:	d81e      	bhi.n	40921e <_strtod_l+0xb7e>
  4091e0:	a325      	add	r3, pc, #148	; (adr r3, 409278 <_strtod_l+0xbd8>)
  4091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091e6:	4620      	mov	r0, r4
  4091e8:	4629      	mov	r1, r5
  4091ea:	f002 ffc7 	bl	40c17c <__aeabi_dcmple>
  4091ee:	b190      	cbz	r0, 409216 <_strtod_l+0xb76>
  4091f0:	4629      	mov	r1, r5
  4091f2:	4620      	mov	r0, r4
  4091f4:	f003 f81e 	bl	40c234 <__aeabi_d2uiz>
  4091f8:	2800      	cmp	r0, #0
  4091fa:	bf08      	it	eq
  4091fc:	2001      	moveq	r0, #1
  4091fe:	f002 fccb 	bl	40bb98 <__aeabi_ui2d>
  409202:	9b08      	ldr	r3, [sp, #32]
  409204:	4604      	mov	r4, r0
  409206:	460d      	mov	r5, r1
  409208:	b9d3      	cbnz	r3, 409240 <_strtod_l+0xba0>
  40920a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40920e:	9012      	str	r0, [sp, #72]	; 0x48
  409210:	9313      	str	r3, [sp, #76]	; 0x4c
  409212:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  409216:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409218:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  40921c:	1a9f      	subs	r7, r3, r2
  40921e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409222:	f001 fec7 	bl	40afb4 <__ulp>
  409226:	4602      	mov	r2, r0
  409228:	460b      	mov	r3, r1
  40922a:	4630      	mov	r0, r6
  40922c:	4639      	mov	r1, r7
  40922e:	f002 fd29 	bl	40bc84 <__aeabi_dmul>
  409232:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409236:	f002 fb73 	bl	40b920 <__adddf3>
  40923a:	4682      	mov	sl, r0
  40923c:	468b      	mov	fp, r1
  40923e:	e775      	b.n	40912c <_strtod_l+0xa8c>
  409240:	4602      	mov	r2, r0
  409242:	460b      	mov	r3, r1
  409244:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409248:	e7e3      	b.n	409212 <_strtod_l+0xb72>
  40924a:	a30d      	add	r3, pc, #52	; (adr r3, 409280 <_strtod_l+0xbe0>)
  40924c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409250:	f002 ff8a 	bl	40c168 <__aeabi_dcmplt>
  409254:	e79d      	b.n	409192 <_strtod_l+0xaf2>
  409256:	2300      	movs	r3, #0
  409258:	9309      	str	r3, [sp, #36]	; 0x24
  40925a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40925c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40925e:	6013      	str	r3, [r2, #0]
  409260:	f7ff ba62 	b.w	408728 <_strtod_l+0x88>
  409264:	2b65      	cmp	r3, #101	; 0x65
  409266:	f04f 0200 	mov.w	r2, #0
  40926a:	f43f abb2 	beq.w	4089d2 <_strtod_l+0x332>
  40926e:	4615      	mov	r5, r2
  409270:	2101      	movs	r1, #1
  409272:	f7ff bad1 	b.w	408818 <_strtod_l+0x178>
  409276:	bf00      	nop
  409278:	ffc00000 	.word	0xffc00000
  40927c:	41dfffff 	.word	0x41dfffff
  409280:	94a03595 	.word	0x94a03595
  409284:	3fcfffff 	.word	0x3fcfffff

00409288 <strtod>:
  409288:	4b06      	ldr	r3, [pc, #24]	; (4092a4 <strtod+0x1c>)
  40928a:	4a07      	ldr	r2, [pc, #28]	; (4092a8 <strtod+0x20>)
  40928c:	b410      	push	{r4}
  40928e:	681c      	ldr	r4, [r3, #0]
  409290:	6a23      	ldr	r3, [r4, #32]
  409292:	2b00      	cmp	r3, #0
  409294:	bf08      	it	eq
  409296:	4613      	moveq	r3, r2
  409298:	460a      	mov	r2, r1
  40929a:	4601      	mov	r1, r0
  40929c:	4620      	mov	r0, r4
  40929e:	bc10      	pop	{r4}
  4092a0:	f7ff b9fe 	b.w	4086a0 <_strtod_l>
  4092a4:	20400050 	.word	0x20400050
  4092a8:	204000b4 	.word	0x204000b4

004092ac <__swbuf_r>:
  4092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4092ae:	460e      	mov	r6, r1
  4092b0:	4614      	mov	r4, r2
  4092b2:	4605      	mov	r5, r0
  4092b4:	b118      	cbz	r0, 4092be <__swbuf_r+0x12>
  4092b6:	6983      	ldr	r3, [r0, #24]
  4092b8:	b90b      	cbnz	r3, 4092be <__swbuf_r+0x12>
  4092ba:	f7fe f99f 	bl	4075fc <__sinit>
  4092be:	4b21      	ldr	r3, [pc, #132]	; (409344 <__swbuf_r+0x98>)
  4092c0:	429c      	cmp	r4, r3
  4092c2:	d12a      	bne.n	40931a <__swbuf_r+0x6e>
  4092c4:	686c      	ldr	r4, [r5, #4]
  4092c6:	69a3      	ldr	r3, [r4, #24]
  4092c8:	60a3      	str	r3, [r4, #8]
  4092ca:	89a3      	ldrh	r3, [r4, #12]
  4092cc:	071a      	lsls	r2, r3, #28
  4092ce:	d52e      	bpl.n	40932e <__swbuf_r+0x82>
  4092d0:	6923      	ldr	r3, [r4, #16]
  4092d2:	b363      	cbz	r3, 40932e <__swbuf_r+0x82>
  4092d4:	6923      	ldr	r3, [r4, #16]
  4092d6:	6820      	ldr	r0, [r4, #0]
  4092d8:	1ac0      	subs	r0, r0, r3
  4092da:	6963      	ldr	r3, [r4, #20]
  4092dc:	b2f6      	uxtb	r6, r6
  4092de:	4298      	cmp	r0, r3
  4092e0:	4637      	mov	r7, r6
  4092e2:	db04      	blt.n	4092ee <__swbuf_r+0x42>
  4092e4:	4621      	mov	r1, r4
  4092e6:	4628      	mov	r0, r5
  4092e8:	f000 ffa8 	bl	40a23c <_fflush_r>
  4092ec:	bb28      	cbnz	r0, 40933a <__swbuf_r+0x8e>
  4092ee:	68a3      	ldr	r3, [r4, #8]
  4092f0:	3b01      	subs	r3, #1
  4092f2:	60a3      	str	r3, [r4, #8]
  4092f4:	6823      	ldr	r3, [r4, #0]
  4092f6:	1c5a      	adds	r2, r3, #1
  4092f8:	6022      	str	r2, [r4, #0]
  4092fa:	701e      	strb	r6, [r3, #0]
  4092fc:	6963      	ldr	r3, [r4, #20]
  4092fe:	3001      	adds	r0, #1
  409300:	4298      	cmp	r0, r3
  409302:	d004      	beq.n	40930e <__swbuf_r+0x62>
  409304:	89a3      	ldrh	r3, [r4, #12]
  409306:	07db      	lsls	r3, r3, #31
  409308:	d519      	bpl.n	40933e <__swbuf_r+0x92>
  40930a:	2e0a      	cmp	r6, #10
  40930c:	d117      	bne.n	40933e <__swbuf_r+0x92>
  40930e:	4621      	mov	r1, r4
  409310:	4628      	mov	r0, r5
  409312:	f000 ff93 	bl	40a23c <_fflush_r>
  409316:	b190      	cbz	r0, 40933e <__swbuf_r+0x92>
  409318:	e00f      	b.n	40933a <__swbuf_r+0x8e>
  40931a:	4b0b      	ldr	r3, [pc, #44]	; (409348 <__swbuf_r+0x9c>)
  40931c:	429c      	cmp	r4, r3
  40931e:	d101      	bne.n	409324 <__swbuf_r+0x78>
  409320:	68ac      	ldr	r4, [r5, #8]
  409322:	e7d0      	b.n	4092c6 <__swbuf_r+0x1a>
  409324:	4b09      	ldr	r3, [pc, #36]	; (40934c <__swbuf_r+0xa0>)
  409326:	429c      	cmp	r4, r3
  409328:	bf08      	it	eq
  40932a:	68ec      	ldreq	r4, [r5, #12]
  40932c:	e7cb      	b.n	4092c6 <__swbuf_r+0x1a>
  40932e:	4621      	mov	r1, r4
  409330:	4628      	mov	r0, r5
  409332:	f000 f81f 	bl	409374 <__swsetup_r>
  409336:	2800      	cmp	r0, #0
  409338:	d0cc      	beq.n	4092d4 <__swbuf_r+0x28>
  40933a:	f04f 37ff 	mov.w	r7, #4294967295
  40933e:	4638      	mov	r0, r7
  409340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409342:	bf00      	nop
  409344:	0040cc10 	.word	0x0040cc10
  409348:	0040cc30 	.word	0x0040cc30
  40934c:	0040cbf0 	.word	0x0040cbf0

00409350 <_write_r>:
  409350:	b538      	push	{r3, r4, r5, lr}
  409352:	4c07      	ldr	r4, [pc, #28]	; (409370 <_write_r+0x20>)
  409354:	4605      	mov	r5, r0
  409356:	4608      	mov	r0, r1
  409358:	4611      	mov	r1, r2
  40935a:	2200      	movs	r2, #0
  40935c:	6022      	str	r2, [r4, #0]
  40935e:	461a      	mov	r2, r3
  409360:	f7fc faea 	bl	405938 <_write>
  409364:	1c43      	adds	r3, r0, #1
  409366:	d102      	bne.n	40936e <_write_r+0x1e>
  409368:	6823      	ldr	r3, [r4, #0]
  40936a:	b103      	cbz	r3, 40936e <_write_r+0x1e>
  40936c:	602b      	str	r3, [r5, #0]
  40936e:	bd38      	pop	{r3, r4, r5, pc}
  409370:	204308dc 	.word	0x204308dc

00409374 <__swsetup_r>:
  409374:	4b32      	ldr	r3, [pc, #200]	; (409440 <__swsetup_r+0xcc>)
  409376:	b570      	push	{r4, r5, r6, lr}
  409378:	681d      	ldr	r5, [r3, #0]
  40937a:	4606      	mov	r6, r0
  40937c:	460c      	mov	r4, r1
  40937e:	b125      	cbz	r5, 40938a <__swsetup_r+0x16>
  409380:	69ab      	ldr	r3, [r5, #24]
  409382:	b913      	cbnz	r3, 40938a <__swsetup_r+0x16>
  409384:	4628      	mov	r0, r5
  409386:	f7fe f939 	bl	4075fc <__sinit>
  40938a:	4b2e      	ldr	r3, [pc, #184]	; (409444 <__swsetup_r+0xd0>)
  40938c:	429c      	cmp	r4, r3
  40938e:	d10f      	bne.n	4093b0 <__swsetup_r+0x3c>
  409390:	686c      	ldr	r4, [r5, #4]
  409392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409396:	b29a      	uxth	r2, r3
  409398:	0715      	lsls	r5, r2, #28
  40939a:	d42c      	bmi.n	4093f6 <__swsetup_r+0x82>
  40939c:	06d0      	lsls	r0, r2, #27
  40939e:	d411      	bmi.n	4093c4 <__swsetup_r+0x50>
  4093a0:	2209      	movs	r2, #9
  4093a2:	6032      	str	r2, [r6, #0]
  4093a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4093a8:	81a3      	strh	r3, [r4, #12]
  4093aa:	f04f 30ff 	mov.w	r0, #4294967295
  4093ae:	bd70      	pop	{r4, r5, r6, pc}
  4093b0:	4b25      	ldr	r3, [pc, #148]	; (409448 <__swsetup_r+0xd4>)
  4093b2:	429c      	cmp	r4, r3
  4093b4:	d101      	bne.n	4093ba <__swsetup_r+0x46>
  4093b6:	68ac      	ldr	r4, [r5, #8]
  4093b8:	e7eb      	b.n	409392 <__swsetup_r+0x1e>
  4093ba:	4b24      	ldr	r3, [pc, #144]	; (40944c <__swsetup_r+0xd8>)
  4093bc:	429c      	cmp	r4, r3
  4093be:	bf08      	it	eq
  4093c0:	68ec      	ldreq	r4, [r5, #12]
  4093c2:	e7e6      	b.n	409392 <__swsetup_r+0x1e>
  4093c4:	0751      	lsls	r1, r2, #29
  4093c6:	d512      	bpl.n	4093ee <__swsetup_r+0x7a>
  4093c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4093ca:	b141      	cbz	r1, 4093de <__swsetup_r+0x6a>
  4093cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4093d0:	4299      	cmp	r1, r3
  4093d2:	d002      	beq.n	4093da <__swsetup_r+0x66>
  4093d4:	4630      	mov	r0, r6
  4093d6:	f001 ff23 	bl	40b220 <_free_r>
  4093da:	2300      	movs	r3, #0
  4093dc:	6363      	str	r3, [r4, #52]	; 0x34
  4093de:	89a3      	ldrh	r3, [r4, #12]
  4093e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4093e4:	81a3      	strh	r3, [r4, #12]
  4093e6:	2300      	movs	r3, #0
  4093e8:	6063      	str	r3, [r4, #4]
  4093ea:	6923      	ldr	r3, [r4, #16]
  4093ec:	6023      	str	r3, [r4, #0]
  4093ee:	89a3      	ldrh	r3, [r4, #12]
  4093f0:	f043 0308 	orr.w	r3, r3, #8
  4093f4:	81a3      	strh	r3, [r4, #12]
  4093f6:	6923      	ldr	r3, [r4, #16]
  4093f8:	b94b      	cbnz	r3, 40940e <__swsetup_r+0x9a>
  4093fa:	89a3      	ldrh	r3, [r4, #12]
  4093fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
  409400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409404:	d003      	beq.n	40940e <__swsetup_r+0x9a>
  409406:	4621      	mov	r1, r4
  409408:	4630      	mov	r0, r6
  40940a:	f001 fab7 	bl	40a97c <__smakebuf_r>
  40940e:	89a2      	ldrh	r2, [r4, #12]
  409410:	f012 0301 	ands.w	r3, r2, #1
  409414:	d00c      	beq.n	409430 <__swsetup_r+0xbc>
  409416:	2300      	movs	r3, #0
  409418:	60a3      	str	r3, [r4, #8]
  40941a:	6963      	ldr	r3, [r4, #20]
  40941c:	425b      	negs	r3, r3
  40941e:	61a3      	str	r3, [r4, #24]
  409420:	6923      	ldr	r3, [r4, #16]
  409422:	b953      	cbnz	r3, 40943a <__swsetup_r+0xc6>
  409424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409428:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  40942c:	d1ba      	bne.n	4093a4 <__swsetup_r+0x30>
  40942e:	bd70      	pop	{r4, r5, r6, pc}
  409430:	0792      	lsls	r2, r2, #30
  409432:	bf58      	it	pl
  409434:	6963      	ldrpl	r3, [r4, #20]
  409436:	60a3      	str	r3, [r4, #8]
  409438:	e7f2      	b.n	409420 <__swsetup_r+0xac>
  40943a:	2000      	movs	r0, #0
  40943c:	e7f7      	b.n	40942e <__swsetup_r+0xba>
  40943e:	bf00      	nop
  409440:	20400050 	.word	0x20400050
  409444:	0040cc10 	.word	0x0040cc10
  409448:	0040cc30 	.word	0x0040cc30
  40944c:	0040cbf0 	.word	0x0040cbf0

00409450 <_close_r>:
  409450:	b538      	push	{r3, r4, r5, lr}
  409452:	4c06      	ldr	r4, [pc, #24]	; (40946c <_close_r+0x1c>)
  409454:	2300      	movs	r3, #0
  409456:	4605      	mov	r5, r0
  409458:	4608      	mov	r0, r1
  40945a:	6023      	str	r3, [r4, #0]
  40945c:	f7fa fb60 	bl	403b20 <_close>
  409460:	1c43      	adds	r3, r0, #1
  409462:	d102      	bne.n	40946a <_close_r+0x1a>
  409464:	6823      	ldr	r3, [r4, #0]
  409466:	b103      	cbz	r3, 40946a <_close_r+0x1a>
  409468:	602b      	str	r3, [r5, #0]
  40946a:	bd38      	pop	{r3, r4, r5, pc}
  40946c:	204308dc 	.word	0x204308dc

00409470 <quorem>:
  409470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409474:	6903      	ldr	r3, [r0, #16]
  409476:	690c      	ldr	r4, [r1, #16]
  409478:	429c      	cmp	r4, r3
  40947a:	4680      	mov	r8, r0
  40947c:	f300 8082 	bgt.w	409584 <quorem+0x114>
  409480:	3c01      	subs	r4, #1
  409482:	f101 0714 	add.w	r7, r1, #20
  409486:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40948a:	f100 0614 	add.w	r6, r0, #20
  40948e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  409492:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  409496:	eb06 030e 	add.w	r3, r6, lr
  40949a:	3501      	adds	r5, #1
  40949c:	eb07 090e 	add.w	r9, r7, lr
  4094a0:	9301      	str	r3, [sp, #4]
  4094a2:	fbb0 f5f5 	udiv	r5, r0, r5
  4094a6:	b395      	cbz	r5, 40950e <quorem+0x9e>
  4094a8:	f04f 0a00 	mov.w	sl, #0
  4094ac:	4638      	mov	r0, r7
  4094ae:	46b4      	mov	ip, r6
  4094b0:	46d3      	mov	fp, sl
  4094b2:	f850 2b04 	ldr.w	r2, [r0], #4
  4094b6:	b293      	uxth	r3, r2
  4094b8:	fb05 a303 	mla	r3, r5, r3, sl
  4094bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4094c0:	b29b      	uxth	r3, r3
  4094c2:	ebab 0303 	sub.w	r3, fp, r3
  4094c6:	0c12      	lsrs	r2, r2, #16
  4094c8:	f8bc b000 	ldrh.w	fp, [ip]
  4094cc:	fb05 a202 	mla	r2, r5, r2, sl
  4094d0:	fa13 f38b 	uxtah	r3, r3, fp
  4094d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4094d8:	fa1f fb82 	uxth.w	fp, r2
  4094dc:	f8dc 2000 	ldr.w	r2, [ip]
  4094e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4094e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4094e8:	b29b      	uxth	r3, r3
  4094ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4094ee:	4581      	cmp	r9, r0
  4094f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4094f4:	f84c 3b04 	str.w	r3, [ip], #4
  4094f8:	d2db      	bcs.n	4094b2 <quorem+0x42>
  4094fa:	f856 300e 	ldr.w	r3, [r6, lr]
  4094fe:	b933      	cbnz	r3, 40950e <quorem+0x9e>
  409500:	9b01      	ldr	r3, [sp, #4]
  409502:	3b04      	subs	r3, #4
  409504:	429e      	cmp	r6, r3
  409506:	461a      	mov	r2, r3
  409508:	d330      	bcc.n	40956c <quorem+0xfc>
  40950a:	f8c8 4010 	str.w	r4, [r8, #16]
  40950e:	4640      	mov	r0, r8
  409510:	f001 fcd7 	bl	40aec2 <__mcmp>
  409514:	2800      	cmp	r0, #0
  409516:	db25      	blt.n	409564 <quorem+0xf4>
  409518:	3501      	adds	r5, #1
  40951a:	4630      	mov	r0, r6
  40951c:	f04f 0e00 	mov.w	lr, #0
  409520:	f857 2b04 	ldr.w	r2, [r7], #4
  409524:	f8d0 c000 	ldr.w	ip, [r0]
  409528:	b293      	uxth	r3, r2
  40952a:	ebae 0303 	sub.w	r3, lr, r3
  40952e:	0c12      	lsrs	r2, r2, #16
  409530:	fa13 f38c 	uxtah	r3, r3, ip
  409534:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  409538:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40953c:	b29b      	uxth	r3, r3
  40953e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409542:	45b9      	cmp	r9, r7
  409544:	ea4f 4e22 	mov.w	lr, r2, asr #16
  409548:	f840 3b04 	str.w	r3, [r0], #4
  40954c:	d2e8      	bcs.n	409520 <quorem+0xb0>
  40954e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  409552:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  409556:	b92a      	cbnz	r2, 409564 <quorem+0xf4>
  409558:	3b04      	subs	r3, #4
  40955a:	429e      	cmp	r6, r3
  40955c:	461a      	mov	r2, r3
  40955e:	d30b      	bcc.n	409578 <quorem+0x108>
  409560:	f8c8 4010 	str.w	r4, [r8, #16]
  409564:	4628      	mov	r0, r5
  409566:	b003      	add	sp, #12
  409568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40956c:	6812      	ldr	r2, [r2, #0]
  40956e:	3b04      	subs	r3, #4
  409570:	2a00      	cmp	r2, #0
  409572:	d1ca      	bne.n	40950a <quorem+0x9a>
  409574:	3c01      	subs	r4, #1
  409576:	e7c5      	b.n	409504 <quorem+0x94>
  409578:	6812      	ldr	r2, [r2, #0]
  40957a:	3b04      	subs	r3, #4
  40957c:	2a00      	cmp	r2, #0
  40957e:	d1ef      	bne.n	409560 <quorem+0xf0>
  409580:	3c01      	subs	r4, #1
  409582:	e7ea      	b.n	40955a <quorem+0xea>
  409584:	2000      	movs	r0, #0
  409586:	e7ee      	b.n	409566 <quorem+0xf6>

00409588 <_dtoa_r>:
  409588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40958c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40958e:	b095      	sub	sp, #84	; 0x54
  409590:	4604      	mov	r4, r0
  409592:	9d21      	ldr	r5, [sp, #132]	; 0x84
  409594:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409598:	b93e      	cbnz	r6, 4095aa <_dtoa_r+0x22>
  40959a:	2010      	movs	r0, #16
  40959c:	f001 fa2e 	bl	40a9fc <malloc>
  4095a0:	6260      	str	r0, [r4, #36]	; 0x24
  4095a2:	6046      	str	r6, [r0, #4]
  4095a4:	6086      	str	r6, [r0, #8]
  4095a6:	6006      	str	r6, [r0, #0]
  4095a8:	60c6      	str	r6, [r0, #12]
  4095aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4095ac:	6819      	ldr	r1, [r3, #0]
  4095ae:	b151      	cbz	r1, 4095c6 <_dtoa_r+0x3e>
  4095b0:	685a      	ldr	r2, [r3, #4]
  4095b2:	604a      	str	r2, [r1, #4]
  4095b4:	2301      	movs	r3, #1
  4095b6:	4093      	lsls	r3, r2
  4095b8:	608b      	str	r3, [r1, #8]
  4095ba:	4620      	mov	r0, r4
  4095bc:	f001 fa6e 	bl	40aa9c <_Bfree>
  4095c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4095c2:	2200      	movs	r2, #0
  4095c4:	601a      	str	r2, [r3, #0]
  4095c6:	9b03      	ldr	r3, [sp, #12]
  4095c8:	2b00      	cmp	r3, #0
  4095ca:	bfbf      	itttt	lt
  4095cc:	2301      	movlt	r3, #1
  4095ce:	602b      	strlt	r3, [r5, #0]
  4095d0:	9b03      	ldrlt	r3, [sp, #12]
  4095d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4095d6:	bfb2      	itee	lt
  4095d8:	9303      	strlt	r3, [sp, #12]
  4095da:	2300      	movge	r3, #0
  4095dc:	602b      	strge	r3, [r5, #0]
  4095de:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4095e2:	4ba9      	ldr	r3, [pc, #676]	; (409888 <_dtoa_r+0x300>)
  4095e4:	ea33 0309 	bics.w	r3, r3, r9
  4095e8:	d11b      	bne.n	409622 <_dtoa_r+0x9a>
  4095ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4095ec:	f242 730f 	movw	r3, #9999	; 0x270f
  4095f0:	6013      	str	r3, [r2, #0]
  4095f2:	9b02      	ldr	r3, [sp, #8]
  4095f4:	b923      	cbnz	r3, 409600 <_dtoa_r+0x78>
  4095f6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4095fa:	2800      	cmp	r0, #0
  4095fc:	f000 8581 	beq.w	40a102 <_dtoa_r+0xb7a>
  409600:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409602:	b953      	cbnz	r3, 40961a <_dtoa_r+0x92>
  409604:	4ba1      	ldr	r3, [pc, #644]	; (40988c <_dtoa_r+0x304>)
  409606:	e021      	b.n	40964c <_dtoa_r+0xc4>
  409608:	4ba1      	ldr	r3, [pc, #644]	; (409890 <_dtoa_r+0x308>)
  40960a:	9306      	str	r3, [sp, #24]
  40960c:	3308      	adds	r3, #8
  40960e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409610:	6013      	str	r3, [r2, #0]
  409612:	9806      	ldr	r0, [sp, #24]
  409614:	b015      	add	sp, #84	; 0x54
  409616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40961a:	4b9c      	ldr	r3, [pc, #624]	; (40988c <_dtoa_r+0x304>)
  40961c:	9306      	str	r3, [sp, #24]
  40961e:	3303      	adds	r3, #3
  409620:	e7f5      	b.n	40960e <_dtoa_r+0x86>
  409622:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409626:	2200      	movs	r2, #0
  409628:	2300      	movs	r3, #0
  40962a:	4630      	mov	r0, r6
  40962c:	4639      	mov	r1, r7
  40962e:	f002 fd91 	bl	40c154 <__aeabi_dcmpeq>
  409632:	4680      	mov	r8, r0
  409634:	b160      	cbz	r0, 409650 <_dtoa_r+0xc8>
  409636:	9a20      	ldr	r2, [sp, #128]	; 0x80
  409638:	2301      	movs	r3, #1
  40963a:	6013      	str	r3, [r2, #0]
  40963c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40963e:	2b00      	cmp	r3, #0
  409640:	f000 855c 	beq.w	40a0fc <_dtoa_r+0xb74>
  409644:	4b93      	ldr	r3, [pc, #588]	; (409894 <_dtoa_r+0x30c>)
  409646:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409648:	6013      	str	r3, [r2, #0]
  40964a:	3b01      	subs	r3, #1
  40964c:	9306      	str	r3, [sp, #24]
  40964e:	e7e0      	b.n	409612 <_dtoa_r+0x8a>
  409650:	ab12      	add	r3, sp, #72	; 0x48
  409652:	9301      	str	r3, [sp, #4]
  409654:	ab13      	add	r3, sp, #76	; 0x4c
  409656:	9300      	str	r3, [sp, #0]
  409658:	4632      	mov	r2, r6
  40965a:	463b      	mov	r3, r7
  40965c:	4620      	mov	r0, r4
  40965e:	f001 fd1f 	bl	40b0a0 <__d2b>
  409662:	f3c9 550a 	ubfx	r5, r9, #20, #11
  409666:	4682      	mov	sl, r0
  409668:	2d00      	cmp	r5, #0
  40966a:	d07c      	beq.n	409766 <_dtoa_r+0x1de>
  40966c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  409670:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  409674:	4630      	mov	r0, r6
  409676:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40967a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40967e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  409682:	2200      	movs	r2, #0
  409684:	4b84      	ldr	r3, [pc, #528]	; (409898 <_dtoa_r+0x310>)
  409686:	f002 f949 	bl	40b91c <__aeabi_dsub>
  40968a:	a379      	add	r3, pc, #484	; (adr r3, 409870 <_dtoa_r+0x2e8>)
  40968c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409690:	f002 faf8 	bl	40bc84 <__aeabi_dmul>
  409694:	a378      	add	r3, pc, #480	; (adr r3, 409878 <_dtoa_r+0x2f0>)
  409696:	e9d3 2300 	ldrd	r2, r3, [r3]
  40969a:	f002 f941 	bl	40b920 <__adddf3>
  40969e:	4606      	mov	r6, r0
  4096a0:	4628      	mov	r0, r5
  4096a2:	460f      	mov	r7, r1
  4096a4:	f002 fa88 	bl	40bbb8 <__aeabi_i2d>
  4096a8:	a375      	add	r3, pc, #468	; (adr r3, 409880 <_dtoa_r+0x2f8>)
  4096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096ae:	f002 fae9 	bl	40bc84 <__aeabi_dmul>
  4096b2:	4602      	mov	r2, r0
  4096b4:	460b      	mov	r3, r1
  4096b6:	4630      	mov	r0, r6
  4096b8:	4639      	mov	r1, r7
  4096ba:	f002 f931 	bl	40b920 <__adddf3>
  4096be:	4606      	mov	r6, r0
  4096c0:	460f      	mov	r7, r1
  4096c2:	f002 fd8f 	bl	40c1e4 <__aeabi_d2iz>
  4096c6:	2200      	movs	r2, #0
  4096c8:	4683      	mov	fp, r0
  4096ca:	2300      	movs	r3, #0
  4096cc:	4630      	mov	r0, r6
  4096ce:	4639      	mov	r1, r7
  4096d0:	f002 fd4a 	bl	40c168 <__aeabi_dcmplt>
  4096d4:	b158      	cbz	r0, 4096ee <_dtoa_r+0x166>
  4096d6:	4658      	mov	r0, fp
  4096d8:	f002 fa6e 	bl	40bbb8 <__aeabi_i2d>
  4096dc:	4602      	mov	r2, r0
  4096de:	460b      	mov	r3, r1
  4096e0:	4630      	mov	r0, r6
  4096e2:	4639      	mov	r1, r7
  4096e4:	f002 fd36 	bl	40c154 <__aeabi_dcmpeq>
  4096e8:	b908      	cbnz	r0, 4096ee <_dtoa_r+0x166>
  4096ea:	f10b 3bff 	add.w	fp, fp, #4294967295
  4096ee:	f1bb 0f16 	cmp.w	fp, #22
  4096f2:	d857      	bhi.n	4097a4 <_dtoa_r+0x21c>
  4096f4:	4969      	ldr	r1, [pc, #420]	; (40989c <_dtoa_r+0x314>)
  4096f6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4096fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4096fe:	e9d1 0100 	ldrd	r0, r1, [r1]
  409702:	f002 fd4f 	bl	40c1a4 <__aeabi_dcmpgt>
  409706:	2800      	cmp	r0, #0
  409708:	d04e      	beq.n	4097a8 <_dtoa_r+0x220>
  40970a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40970e:	2300      	movs	r3, #0
  409710:	930d      	str	r3, [sp, #52]	; 0x34
  409712:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409714:	1b5d      	subs	r5, r3, r5
  409716:	1e6b      	subs	r3, r5, #1
  409718:	9307      	str	r3, [sp, #28]
  40971a:	bf43      	ittte	mi
  40971c:	2300      	movmi	r3, #0
  40971e:	f1c5 0801 	rsbmi	r8, r5, #1
  409722:	9307      	strmi	r3, [sp, #28]
  409724:	f04f 0800 	movpl.w	r8, #0
  409728:	f1bb 0f00 	cmp.w	fp, #0
  40972c:	db3e      	blt.n	4097ac <_dtoa_r+0x224>
  40972e:	9b07      	ldr	r3, [sp, #28]
  409730:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  409734:	445b      	add	r3, fp
  409736:	9307      	str	r3, [sp, #28]
  409738:	2300      	movs	r3, #0
  40973a:	9308      	str	r3, [sp, #32]
  40973c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40973e:	2b09      	cmp	r3, #9
  409740:	f200 80b0 	bhi.w	4098a4 <_dtoa_r+0x31c>
  409744:	2b05      	cmp	r3, #5
  409746:	bfc4      	itt	gt
  409748:	3b04      	subgt	r3, #4
  40974a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40974c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40974e:	f1a3 0302 	sub.w	r3, r3, #2
  409752:	bfcc      	ite	gt
  409754:	2600      	movgt	r6, #0
  409756:	2601      	movle	r6, #1
  409758:	2b03      	cmp	r3, #3
  40975a:	f200 80af 	bhi.w	4098bc <_dtoa_r+0x334>
  40975e:	e8df f003 	tbb	[pc, r3]
  409762:	8583      	.short	0x8583
  409764:	772d      	.short	0x772d
  409766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409768:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40976a:	441d      	add	r5, r3
  40976c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  409770:	2b20      	cmp	r3, #32
  409772:	dd11      	ble.n	409798 <_dtoa_r+0x210>
  409774:	9a02      	ldr	r2, [sp, #8]
  409776:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40977a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40977e:	fa22 f000 	lsr.w	r0, r2, r0
  409782:	fa09 f303 	lsl.w	r3, r9, r3
  409786:	4318      	orrs	r0, r3
  409788:	f002 fa06 	bl	40bb98 <__aeabi_ui2d>
  40978c:	2301      	movs	r3, #1
  40978e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409792:	3d01      	subs	r5, #1
  409794:	9310      	str	r3, [sp, #64]	; 0x40
  409796:	e774      	b.n	409682 <_dtoa_r+0xfa>
  409798:	f1c3 0020 	rsb	r0, r3, #32
  40979c:	9b02      	ldr	r3, [sp, #8]
  40979e:	fa03 f000 	lsl.w	r0, r3, r0
  4097a2:	e7f1      	b.n	409788 <_dtoa_r+0x200>
  4097a4:	2301      	movs	r3, #1
  4097a6:	e7b3      	b.n	409710 <_dtoa_r+0x188>
  4097a8:	900d      	str	r0, [sp, #52]	; 0x34
  4097aa:	e7b2      	b.n	409712 <_dtoa_r+0x18a>
  4097ac:	f1cb 0300 	rsb	r3, fp, #0
  4097b0:	9308      	str	r3, [sp, #32]
  4097b2:	2300      	movs	r3, #0
  4097b4:	eba8 080b 	sub.w	r8, r8, fp
  4097b8:	930c      	str	r3, [sp, #48]	; 0x30
  4097ba:	e7bf      	b.n	40973c <_dtoa_r+0x1b4>
  4097bc:	2301      	movs	r3, #1
  4097be:	9309      	str	r3, [sp, #36]	; 0x24
  4097c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4097c2:	2b00      	cmp	r3, #0
  4097c4:	dd7d      	ble.n	4098c2 <_dtoa_r+0x33a>
  4097c6:	9304      	str	r3, [sp, #16]
  4097c8:	4699      	mov	r9, r3
  4097ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4097cc:	2200      	movs	r2, #0
  4097ce:	606a      	str	r2, [r5, #4]
  4097d0:	2104      	movs	r1, #4
  4097d2:	f101 0214 	add.w	r2, r1, #20
  4097d6:	429a      	cmp	r2, r3
  4097d8:	d978      	bls.n	4098cc <_dtoa_r+0x344>
  4097da:	6869      	ldr	r1, [r5, #4]
  4097dc:	4620      	mov	r0, r4
  4097de:	f001 f929 	bl	40aa34 <_Balloc>
  4097e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4097e4:	6028      	str	r0, [r5, #0]
  4097e6:	681b      	ldr	r3, [r3, #0]
  4097e8:	9306      	str	r3, [sp, #24]
  4097ea:	f1b9 0f0e 	cmp.w	r9, #14
  4097ee:	f200 80ee 	bhi.w	4099ce <_dtoa_r+0x446>
  4097f2:	2e00      	cmp	r6, #0
  4097f4:	f000 80eb 	beq.w	4099ce <_dtoa_r+0x446>
  4097f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4097fc:	f1bb 0f00 	cmp.w	fp, #0
  409800:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  409804:	dd77      	ble.n	4098f6 <_dtoa_r+0x36e>
  409806:	4a25      	ldr	r2, [pc, #148]	; (40989c <_dtoa_r+0x314>)
  409808:	f00b 030f 	and.w	r3, fp, #15
  40980c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  409810:	e9d3 2300 	ldrd	r2, r3, [r3]
  409814:	ea4f 162b 	mov.w	r6, fp, asr #4
  409818:	06f0      	lsls	r0, r6, #27
  40981a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40981e:	d55a      	bpl.n	4098d6 <_dtoa_r+0x34e>
  409820:	4b1f      	ldr	r3, [pc, #124]	; (4098a0 <_dtoa_r+0x318>)
  409822:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409826:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40982a:	f002 fb55 	bl	40bed8 <__aeabi_ddiv>
  40982e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409832:	f006 060f 	and.w	r6, r6, #15
  409836:	2503      	movs	r5, #3
  409838:	4f19      	ldr	r7, [pc, #100]	; (4098a0 <_dtoa_r+0x318>)
  40983a:	2e00      	cmp	r6, #0
  40983c:	d14d      	bne.n	4098da <_dtoa_r+0x352>
  40983e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409846:	f002 fb47 	bl	40bed8 <__aeabi_ddiv>
  40984a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40984e:	e06c      	b.n	40992a <_dtoa_r+0x3a2>
  409850:	2301      	movs	r3, #1
  409852:	9309      	str	r3, [sp, #36]	; 0x24
  409854:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409856:	445b      	add	r3, fp
  409858:	f103 0901 	add.w	r9, r3, #1
  40985c:	9304      	str	r3, [sp, #16]
  40985e:	464b      	mov	r3, r9
  409860:	2b01      	cmp	r3, #1
  409862:	bfb8      	it	lt
  409864:	2301      	movlt	r3, #1
  409866:	e7b0      	b.n	4097ca <_dtoa_r+0x242>
  409868:	2300      	movs	r3, #0
  40986a:	e7a8      	b.n	4097be <_dtoa_r+0x236>
  40986c:	2300      	movs	r3, #0
  40986e:	e7f0      	b.n	409852 <_dtoa_r+0x2ca>
  409870:	636f4361 	.word	0x636f4361
  409874:	3fd287a7 	.word	0x3fd287a7
  409878:	8b60c8b3 	.word	0x8b60c8b3
  40987c:	3fc68a28 	.word	0x3fc68a28
  409880:	509f79fb 	.word	0x509f79fb
  409884:	3fd34413 	.word	0x3fd34413
  409888:	7ff00000 	.word	0x7ff00000
  40988c:	0040cce1 	.word	0x0040cce1
  409890:	0040ccd8 	.word	0x0040ccd8
  409894:	0040cc65 	.word	0x0040cc65
  409898:	3ff80000 	.word	0x3ff80000
  40989c:	0040cd18 	.word	0x0040cd18
  4098a0:	0040ccf0 	.word	0x0040ccf0
  4098a4:	2601      	movs	r6, #1
  4098a6:	2300      	movs	r3, #0
  4098a8:	931e      	str	r3, [sp, #120]	; 0x78
  4098aa:	9609      	str	r6, [sp, #36]	; 0x24
  4098ac:	f04f 33ff 	mov.w	r3, #4294967295
  4098b0:	9304      	str	r3, [sp, #16]
  4098b2:	4699      	mov	r9, r3
  4098b4:	2200      	movs	r2, #0
  4098b6:	2312      	movs	r3, #18
  4098b8:	921f      	str	r2, [sp, #124]	; 0x7c
  4098ba:	e786      	b.n	4097ca <_dtoa_r+0x242>
  4098bc:	2301      	movs	r3, #1
  4098be:	9309      	str	r3, [sp, #36]	; 0x24
  4098c0:	e7f4      	b.n	4098ac <_dtoa_r+0x324>
  4098c2:	2301      	movs	r3, #1
  4098c4:	9304      	str	r3, [sp, #16]
  4098c6:	4699      	mov	r9, r3
  4098c8:	461a      	mov	r2, r3
  4098ca:	e7f5      	b.n	4098b8 <_dtoa_r+0x330>
  4098cc:	686a      	ldr	r2, [r5, #4]
  4098ce:	3201      	adds	r2, #1
  4098d0:	606a      	str	r2, [r5, #4]
  4098d2:	0049      	lsls	r1, r1, #1
  4098d4:	e77d      	b.n	4097d2 <_dtoa_r+0x24a>
  4098d6:	2502      	movs	r5, #2
  4098d8:	e7ae      	b.n	409838 <_dtoa_r+0x2b0>
  4098da:	07f1      	lsls	r1, r6, #31
  4098dc:	d508      	bpl.n	4098f0 <_dtoa_r+0x368>
  4098de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4098e2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4098e6:	f002 f9cd 	bl	40bc84 <__aeabi_dmul>
  4098ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4098ee:	3501      	adds	r5, #1
  4098f0:	1076      	asrs	r6, r6, #1
  4098f2:	3708      	adds	r7, #8
  4098f4:	e7a1      	b.n	40983a <_dtoa_r+0x2b2>
  4098f6:	f000 80a5 	beq.w	409a44 <_dtoa_r+0x4bc>
  4098fa:	f1cb 0600 	rsb	r6, fp, #0
  4098fe:	4ba3      	ldr	r3, [pc, #652]	; (409b8c <_dtoa_r+0x604>)
  409900:	4fa3      	ldr	r7, [pc, #652]	; (409b90 <_dtoa_r+0x608>)
  409902:	f006 020f 	and.w	r2, r6, #15
  409906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40990a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40990e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409912:	f002 f9b7 	bl	40bc84 <__aeabi_dmul>
  409916:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40991a:	1136      	asrs	r6, r6, #4
  40991c:	2300      	movs	r3, #0
  40991e:	2502      	movs	r5, #2
  409920:	2e00      	cmp	r6, #0
  409922:	f040 8084 	bne.w	409a2e <_dtoa_r+0x4a6>
  409926:	2b00      	cmp	r3, #0
  409928:	d18f      	bne.n	40984a <_dtoa_r+0x2c2>
  40992a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40992c:	2b00      	cmp	r3, #0
  40992e:	f000 808b 	beq.w	409a48 <_dtoa_r+0x4c0>
  409932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409936:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40993a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40993e:	2200      	movs	r2, #0
  409940:	4b94      	ldr	r3, [pc, #592]	; (409b94 <_dtoa_r+0x60c>)
  409942:	f002 fc11 	bl	40c168 <__aeabi_dcmplt>
  409946:	2800      	cmp	r0, #0
  409948:	d07e      	beq.n	409a48 <_dtoa_r+0x4c0>
  40994a:	f1b9 0f00 	cmp.w	r9, #0
  40994e:	d07b      	beq.n	409a48 <_dtoa_r+0x4c0>
  409950:	9b04      	ldr	r3, [sp, #16]
  409952:	2b00      	cmp	r3, #0
  409954:	dd37      	ble.n	4099c6 <_dtoa_r+0x43e>
  409956:	2200      	movs	r2, #0
  409958:	4b8f      	ldr	r3, [pc, #572]	; (409b98 <_dtoa_r+0x610>)
  40995a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40995e:	f002 f991 	bl	40bc84 <__aeabi_dmul>
  409962:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409966:	9e04      	ldr	r6, [sp, #16]
  409968:	f10b 37ff 	add.w	r7, fp, #4294967295
  40996c:	3501      	adds	r5, #1
  40996e:	4628      	mov	r0, r5
  409970:	f002 f922 	bl	40bbb8 <__aeabi_i2d>
  409974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409978:	f002 f984 	bl	40bc84 <__aeabi_dmul>
  40997c:	4b87      	ldr	r3, [pc, #540]	; (409b9c <_dtoa_r+0x614>)
  40997e:	2200      	movs	r2, #0
  409980:	f001 ffce 	bl	40b920 <__adddf3>
  409984:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40998a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40998e:	950b      	str	r5, [sp, #44]	; 0x2c
  409990:	2e00      	cmp	r6, #0
  409992:	d15c      	bne.n	409a4e <_dtoa_r+0x4c6>
  409994:	2200      	movs	r2, #0
  409996:	4b82      	ldr	r3, [pc, #520]	; (409ba0 <_dtoa_r+0x618>)
  409998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40999c:	f001 ffbe 	bl	40b91c <__aeabi_dsub>
  4099a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4099a2:	462b      	mov	r3, r5
  4099a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4099a8:	f002 fbfc 	bl	40c1a4 <__aeabi_dcmpgt>
  4099ac:	2800      	cmp	r0, #0
  4099ae:	f040 82f7 	bne.w	409fa0 <_dtoa_r+0xa18>
  4099b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4099b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4099b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4099bc:	f002 fbd4 	bl	40c168 <__aeabi_dcmplt>
  4099c0:	2800      	cmp	r0, #0
  4099c2:	f040 82eb 	bne.w	409f9c <_dtoa_r+0xa14>
  4099c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4099ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4099ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4099d0:	2b00      	cmp	r3, #0
  4099d2:	f2c0 8151 	blt.w	409c78 <_dtoa_r+0x6f0>
  4099d6:	f1bb 0f0e 	cmp.w	fp, #14
  4099da:	f300 814d 	bgt.w	409c78 <_dtoa_r+0x6f0>
  4099de:	4b6b      	ldr	r3, [pc, #428]	; (409b8c <_dtoa_r+0x604>)
  4099e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4099ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4099ee:	2b00      	cmp	r3, #0
  4099f0:	f280 80da 	bge.w	409ba8 <_dtoa_r+0x620>
  4099f4:	f1b9 0f00 	cmp.w	r9, #0
  4099f8:	f300 80d6 	bgt.w	409ba8 <_dtoa_r+0x620>
  4099fc:	f040 82cd 	bne.w	409f9a <_dtoa_r+0xa12>
  409a00:	2200      	movs	r2, #0
  409a02:	4b67      	ldr	r3, [pc, #412]	; (409ba0 <_dtoa_r+0x618>)
  409a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409a08:	f002 f93c 	bl	40bc84 <__aeabi_dmul>
  409a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409a10:	f002 fbbe 	bl	40c190 <__aeabi_dcmpge>
  409a14:	464e      	mov	r6, r9
  409a16:	464f      	mov	r7, r9
  409a18:	2800      	cmp	r0, #0
  409a1a:	f040 82a4 	bne.w	409f66 <_dtoa_r+0x9de>
  409a1e:	9b06      	ldr	r3, [sp, #24]
  409a20:	9a06      	ldr	r2, [sp, #24]
  409a22:	1c5d      	adds	r5, r3, #1
  409a24:	2331      	movs	r3, #49	; 0x31
  409a26:	7013      	strb	r3, [r2, #0]
  409a28:	f10b 0b01 	add.w	fp, fp, #1
  409a2c:	e29f      	b.n	409f6e <_dtoa_r+0x9e6>
  409a2e:	07f2      	lsls	r2, r6, #31
  409a30:	d505      	bpl.n	409a3e <_dtoa_r+0x4b6>
  409a32:	e9d7 2300 	ldrd	r2, r3, [r7]
  409a36:	f002 f925 	bl	40bc84 <__aeabi_dmul>
  409a3a:	3501      	adds	r5, #1
  409a3c:	2301      	movs	r3, #1
  409a3e:	1076      	asrs	r6, r6, #1
  409a40:	3708      	adds	r7, #8
  409a42:	e76d      	b.n	409920 <_dtoa_r+0x398>
  409a44:	2502      	movs	r5, #2
  409a46:	e770      	b.n	40992a <_dtoa_r+0x3a2>
  409a48:	465f      	mov	r7, fp
  409a4a:	464e      	mov	r6, r9
  409a4c:	e78f      	b.n	40996e <_dtoa_r+0x3e6>
  409a4e:	9a06      	ldr	r2, [sp, #24]
  409a50:	4b4e      	ldr	r3, [pc, #312]	; (409b8c <_dtoa_r+0x604>)
  409a52:	4432      	add	r2, r6
  409a54:	9211      	str	r2, [sp, #68]	; 0x44
  409a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409a58:	1e71      	subs	r1, r6, #1
  409a5a:	2a00      	cmp	r2, #0
  409a5c:	d048      	beq.n	409af0 <_dtoa_r+0x568>
  409a5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  409a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a66:	2000      	movs	r0, #0
  409a68:	494e      	ldr	r1, [pc, #312]	; (409ba4 <_dtoa_r+0x61c>)
  409a6a:	f002 fa35 	bl	40bed8 <__aeabi_ddiv>
  409a6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409a72:	f001 ff53 	bl	40b91c <__aeabi_dsub>
  409a76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409a7a:	9d06      	ldr	r5, [sp, #24]
  409a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409a80:	f002 fbb0 	bl	40c1e4 <__aeabi_d2iz>
  409a84:	4606      	mov	r6, r0
  409a86:	f002 f897 	bl	40bbb8 <__aeabi_i2d>
  409a8a:	4602      	mov	r2, r0
  409a8c:	460b      	mov	r3, r1
  409a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409a92:	f001 ff43 	bl	40b91c <__aeabi_dsub>
  409a96:	3630      	adds	r6, #48	; 0x30
  409a98:	f805 6b01 	strb.w	r6, [r5], #1
  409a9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409aa4:	f002 fb60 	bl	40c168 <__aeabi_dcmplt>
  409aa8:	2800      	cmp	r0, #0
  409aaa:	d165      	bne.n	409b78 <_dtoa_r+0x5f0>
  409aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409ab0:	2000      	movs	r0, #0
  409ab2:	4938      	ldr	r1, [pc, #224]	; (409b94 <_dtoa_r+0x60c>)
  409ab4:	f001 ff32 	bl	40b91c <__aeabi_dsub>
  409ab8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409abc:	f002 fb54 	bl	40c168 <__aeabi_dcmplt>
  409ac0:	2800      	cmp	r0, #0
  409ac2:	f040 80b9 	bne.w	409c38 <_dtoa_r+0x6b0>
  409ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409ac8:	429d      	cmp	r5, r3
  409aca:	f43f af7c 	beq.w	4099c6 <_dtoa_r+0x43e>
  409ace:	2200      	movs	r2, #0
  409ad0:	4b31      	ldr	r3, [pc, #196]	; (409b98 <_dtoa_r+0x610>)
  409ad2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409ad6:	f002 f8d5 	bl	40bc84 <__aeabi_dmul>
  409ada:	2200      	movs	r2, #0
  409adc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409ae0:	4b2d      	ldr	r3, [pc, #180]	; (409b98 <_dtoa_r+0x610>)
  409ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409ae6:	f002 f8cd 	bl	40bc84 <__aeabi_dmul>
  409aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409aee:	e7c5      	b.n	409a7c <_dtoa_r+0x4f4>
  409af0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  409af4:	e9d1 0100 	ldrd	r0, r1, [r1]
  409af8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409afc:	f002 f8c2 	bl	40bc84 <__aeabi_dmul>
  409b00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  409b04:	9d06      	ldr	r5, [sp, #24]
  409b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b0a:	f002 fb6b 	bl	40c1e4 <__aeabi_d2iz>
  409b0e:	4606      	mov	r6, r0
  409b10:	f002 f852 	bl	40bbb8 <__aeabi_i2d>
  409b14:	3630      	adds	r6, #48	; 0x30
  409b16:	4602      	mov	r2, r0
  409b18:	460b      	mov	r3, r1
  409b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b1e:	f001 fefd 	bl	40b91c <__aeabi_dsub>
  409b22:	f805 6b01 	strb.w	r6, [r5], #1
  409b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409b28:	42ab      	cmp	r3, r5
  409b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b2e:	f04f 0200 	mov.w	r2, #0
  409b32:	d125      	bne.n	409b80 <_dtoa_r+0x5f8>
  409b34:	4b1b      	ldr	r3, [pc, #108]	; (409ba4 <_dtoa_r+0x61c>)
  409b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  409b3a:	f001 fef1 	bl	40b920 <__adddf3>
  409b3e:	4602      	mov	r2, r0
  409b40:	460b      	mov	r3, r1
  409b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b46:	f002 fb2d 	bl	40c1a4 <__aeabi_dcmpgt>
  409b4a:	2800      	cmp	r0, #0
  409b4c:	d174      	bne.n	409c38 <_dtoa_r+0x6b0>
  409b4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  409b52:	2000      	movs	r0, #0
  409b54:	4913      	ldr	r1, [pc, #76]	; (409ba4 <_dtoa_r+0x61c>)
  409b56:	f001 fee1 	bl	40b91c <__aeabi_dsub>
  409b5a:	4602      	mov	r2, r0
  409b5c:	460b      	mov	r3, r1
  409b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b62:	f002 fb01 	bl	40c168 <__aeabi_dcmplt>
  409b66:	2800      	cmp	r0, #0
  409b68:	f43f af2d 	beq.w	4099c6 <_dtoa_r+0x43e>
  409b6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409b70:	2b30      	cmp	r3, #48	; 0x30
  409b72:	f105 32ff 	add.w	r2, r5, #4294967295
  409b76:	d001      	beq.n	409b7c <_dtoa_r+0x5f4>
  409b78:	46bb      	mov	fp, r7
  409b7a:	e04c      	b.n	409c16 <_dtoa_r+0x68e>
  409b7c:	4615      	mov	r5, r2
  409b7e:	e7f5      	b.n	409b6c <_dtoa_r+0x5e4>
  409b80:	4b05      	ldr	r3, [pc, #20]	; (409b98 <_dtoa_r+0x610>)
  409b82:	f002 f87f 	bl	40bc84 <__aeabi_dmul>
  409b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b8a:	e7bc      	b.n	409b06 <_dtoa_r+0x57e>
  409b8c:	0040cd18 	.word	0x0040cd18
  409b90:	0040ccf0 	.word	0x0040ccf0
  409b94:	3ff00000 	.word	0x3ff00000
  409b98:	40240000 	.word	0x40240000
  409b9c:	401c0000 	.word	0x401c0000
  409ba0:	40140000 	.word	0x40140000
  409ba4:	3fe00000 	.word	0x3fe00000
  409ba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409bac:	9d06      	ldr	r5, [sp, #24]
  409bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409bb2:	4630      	mov	r0, r6
  409bb4:	4639      	mov	r1, r7
  409bb6:	f002 f98f 	bl	40bed8 <__aeabi_ddiv>
  409bba:	f002 fb13 	bl	40c1e4 <__aeabi_d2iz>
  409bbe:	4680      	mov	r8, r0
  409bc0:	f001 fffa 	bl	40bbb8 <__aeabi_i2d>
  409bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  409bc8:	f002 f85c 	bl	40bc84 <__aeabi_dmul>
  409bcc:	4602      	mov	r2, r0
  409bce:	460b      	mov	r3, r1
  409bd0:	4630      	mov	r0, r6
  409bd2:	4639      	mov	r1, r7
  409bd4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  409bd8:	f001 fea0 	bl	40b91c <__aeabi_dsub>
  409bdc:	f805 6b01 	strb.w	r6, [r5], #1
  409be0:	9e06      	ldr	r6, [sp, #24]
  409be2:	1bae      	subs	r6, r5, r6
  409be4:	45b1      	cmp	r9, r6
  409be6:	4602      	mov	r2, r0
  409be8:	460b      	mov	r3, r1
  409bea:	d138      	bne.n	409c5e <_dtoa_r+0x6d6>
  409bec:	f001 fe98 	bl	40b920 <__adddf3>
  409bf0:	4606      	mov	r6, r0
  409bf2:	460f      	mov	r7, r1
  409bf4:	4602      	mov	r2, r0
  409bf6:	460b      	mov	r3, r1
  409bf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409bfc:	f002 fab4 	bl	40c168 <__aeabi_dcmplt>
  409c00:	b9c8      	cbnz	r0, 409c36 <_dtoa_r+0x6ae>
  409c02:	4632      	mov	r2, r6
  409c04:	463b      	mov	r3, r7
  409c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409c0a:	f002 faa3 	bl	40c154 <__aeabi_dcmpeq>
  409c0e:	b110      	cbz	r0, 409c16 <_dtoa_r+0x68e>
  409c10:	f018 0f01 	tst.w	r8, #1
  409c14:	d10f      	bne.n	409c36 <_dtoa_r+0x6ae>
  409c16:	4651      	mov	r1, sl
  409c18:	4620      	mov	r0, r4
  409c1a:	f000 ff3f 	bl	40aa9c <_Bfree>
  409c1e:	2300      	movs	r3, #0
  409c20:	9a20      	ldr	r2, [sp, #128]	; 0x80
  409c22:	702b      	strb	r3, [r5, #0]
  409c24:	f10b 0301 	add.w	r3, fp, #1
  409c28:	6013      	str	r3, [r2, #0]
  409c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409c2c:	2b00      	cmp	r3, #0
  409c2e:	f43f acf0 	beq.w	409612 <_dtoa_r+0x8a>
  409c32:	601d      	str	r5, [r3, #0]
  409c34:	e4ed      	b.n	409612 <_dtoa_r+0x8a>
  409c36:	465f      	mov	r7, fp
  409c38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409c3c:	2a39      	cmp	r2, #57	; 0x39
  409c3e:	f105 33ff 	add.w	r3, r5, #4294967295
  409c42:	d106      	bne.n	409c52 <_dtoa_r+0x6ca>
  409c44:	9a06      	ldr	r2, [sp, #24]
  409c46:	429a      	cmp	r2, r3
  409c48:	d107      	bne.n	409c5a <_dtoa_r+0x6d2>
  409c4a:	2330      	movs	r3, #48	; 0x30
  409c4c:	7013      	strb	r3, [r2, #0]
  409c4e:	3701      	adds	r7, #1
  409c50:	4613      	mov	r3, r2
  409c52:	781a      	ldrb	r2, [r3, #0]
  409c54:	3201      	adds	r2, #1
  409c56:	701a      	strb	r2, [r3, #0]
  409c58:	e78e      	b.n	409b78 <_dtoa_r+0x5f0>
  409c5a:	461d      	mov	r5, r3
  409c5c:	e7ec      	b.n	409c38 <_dtoa_r+0x6b0>
  409c5e:	2200      	movs	r2, #0
  409c60:	4bb4      	ldr	r3, [pc, #720]	; (409f34 <_dtoa_r+0x9ac>)
  409c62:	f002 f80f 	bl	40bc84 <__aeabi_dmul>
  409c66:	2200      	movs	r2, #0
  409c68:	2300      	movs	r3, #0
  409c6a:	4606      	mov	r6, r0
  409c6c:	460f      	mov	r7, r1
  409c6e:	f002 fa71 	bl	40c154 <__aeabi_dcmpeq>
  409c72:	2800      	cmp	r0, #0
  409c74:	d09b      	beq.n	409bae <_dtoa_r+0x626>
  409c76:	e7ce      	b.n	409c16 <_dtoa_r+0x68e>
  409c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409c7a:	2a00      	cmp	r2, #0
  409c7c:	f000 8129 	beq.w	409ed2 <_dtoa_r+0x94a>
  409c80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  409c82:	2a01      	cmp	r2, #1
  409c84:	f300 810e 	bgt.w	409ea4 <_dtoa_r+0x91c>
  409c88:	9a10      	ldr	r2, [sp, #64]	; 0x40
  409c8a:	2a00      	cmp	r2, #0
  409c8c:	f000 8106 	beq.w	409e9c <_dtoa_r+0x914>
  409c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409c94:	9e08      	ldr	r6, [sp, #32]
  409c96:	4645      	mov	r5, r8
  409c98:	9a07      	ldr	r2, [sp, #28]
  409c9a:	2101      	movs	r1, #1
  409c9c:	441a      	add	r2, r3
  409c9e:	4620      	mov	r0, r4
  409ca0:	4498      	add	r8, r3
  409ca2:	9207      	str	r2, [sp, #28]
  409ca4:	f000 ffd8 	bl	40ac58 <__i2b>
  409ca8:	4607      	mov	r7, r0
  409caa:	2d00      	cmp	r5, #0
  409cac:	dd0b      	ble.n	409cc6 <_dtoa_r+0x73e>
  409cae:	9b07      	ldr	r3, [sp, #28]
  409cb0:	2b00      	cmp	r3, #0
  409cb2:	dd08      	ble.n	409cc6 <_dtoa_r+0x73e>
  409cb4:	42ab      	cmp	r3, r5
  409cb6:	9a07      	ldr	r2, [sp, #28]
  409cb8:	bfa8      	it	ge
  409cba:	462b      	movge	r3, r5
  409cbc:	eba8 0803 	sub.w	r8, r8, r3
  409cc0:	1aed      	subs	r5, r5, r3
  409cc2:	1ad3      	subs	r3, r2, r3
  409cc4:	9307      	str	r3, [sp, #28]
  409cc6:	9b08      	ldr	r3, [sp, #32]
  409cc8:	b1fb      	cbz	r3, 409d0a <_dtoa_r+0x782>
  409cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ccc:	2b00      	cmp	r3, #0
  409cce:	f000 8104 	beq.w	409eda <_dtoa_r+0x952>
  409cd2:	2e00      	cmp	r6, #0
  409cd4:	dd11      	ble.n	409cfa <_dtoa_r+0x772>
  409cd6:	4639      	mov	r1, r7
  409cd8:	4632      	mov	r2, r6
  409cda:	4620      	mov	r0, r4
  409cdc:	f001 f852 	bl	40ad84 <__pow5mult>
  409ce0:	4652      	mov	r2, sl
  409ce2:	4601      	mov	r1, r0
  409ce4:	4607      	mov	r7, r0
  409ce6:	4620      	mov	r0, r4
  409ce8:	f000 ffbf 	bl	40ac6a <__multiply>
  409cec:	4651      	mov	r1, sl
  409cee:	900a      	str	r0, [sp, #40]	; 0x28
  409cf0:	4620      	mov	r0, r4
  409cf2:	f000 fed3 	bl	40aa9c <_Bfree>
  409cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409cf8:	469a      	mov	sl, r3
  409cfa:	9b08      	ldr	r3, [sp, #32]
  409cfc:	1b9a      	subs	r2, r3, r6
  409cfe:	d004      	beq.n	409d0a <_dtoa_r+0x782>
  409d00:	4651      	mov	r1, sl
  409d02:	4620      	mov	r0, r4
  409d04:	f001 f83e 	bl	40ad84 <__pow5mult>
  409d08:	4682      	mov	sl, r0
  409d0a:	2101      	movs	r1, #1
  409d0c:	4620      	mov	r0, r4
  409d0e:	f000 ffa3 	bl	40ac58 <__i2b>
  409d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409d14:	2b00      	cmp	r3, #0
  409d16:	4606      	mov	r6, r0
  409d18:	f340 80e1 	ble.w	409ede <_dtoa_r+0x956>
  409d1c:	461a      	mov	r2, r3
  409d1e:	4601      	mov	r1, r0
  409d20:	4620      	mov	r0, r4
  409d22:	f001 f82f 	bl	40ad84 <__pow5mult>
  409d26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409d28:	2b01      	cmp	r3, #1
  409d2a:	4606      	mov	r6, r0
  409d2c:	f340 80da 	ble.w	409ee4 <_dtoa_r+0x95c>
  409d30:	2300      	movs	r3, #0
  409d32:	9308      	str	r3, [sp, #32]
  409d34:	6933      	ldr	r3, [r6, #16]
  409d36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  409d3a:	6918      	ldr	r0, [r3, #16]
  409d3c:	f000 ff3e 	bl	40abbc <__hi0bits>
  409d40:	f1c0 0020 	rsb	r0, r0, #32
  409d44:	9b07      	ldr	r3, [sp, #28]
  409d46:	4418      	add	r0, r3
  409d48:	f010 001f 	ands.w	r0, r0, #31
  409d4c:	f000 80f0 	beq.w	409f30 <_dtoa_r+0x9a8>
  409d50:	f1c0 0320 	rsb	r3, r0, #32
  409d54:	2b04      	cmp	r3, #4
  409d56:	f340 80e2 	ble.w	409f1e <_dtoa_r+0x996>
  409d5a:	9b07      	ldr	r3, [sp, #28]
  409d5c:	f1c0 001c 	rsb	r0, r0, #28
  409d60:	4480      	add	r8, r0
  409d62:	4405      	add	r5, r0
  409d64:	4403      	add	r3, r0
  409d66:	9307      	str	r3, [sp, #28]
  409d68:	f1b8 0f00 	cmp.w	r8, #0
  409d6c:	dd05      	ble.n	409d7a <_dtoa_r+0x7f2>
  409d6e:	4651      	mov	r1, sl
  409d70:	4642      	mov	r2, r8
  409d72:	4620      	mov	r0, r4
  409d74:	f001 f854 	bl	40ae20 <__lshift>
  409d78:	4682      	mov	sl, r0
  409d7a:	9b07      	ldr	r3, [sp, #28]
  409d7c:	2b00      	cmp	r3, #0
  409d7e:	dd05      	ble.n	409d8c <_dtoa_r+0x804>
  409d80:	4631      	mov	r1, r6
  409d82:	461a      	mov	r2, r3
  409d84:	4620      	mov	r0, r4
  409d86:	f001 f84b 	bl	40ae20 <__lshift>
  409d8a:	4606      	mov	r6, r0
  409d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409d8e:	2b00      	cmp	r3, #0
  409d90:	f000 80d2 	beq.w	409f38 <_dtoa_r+0x9b0>
  409d94:	4631      	mov	r1, r6
  409d96:	4650      	mov	r0, sl
  409d98:	f001 f893 	bl	40aec2 <__mcmp>
  409d9c:	2800      	cmp	r0, #0
  409d9e:	f280 80cb 	bge.w	409f38 <_dtoa_r+0x9b0>
  409da2:	2300      	movs	r3, #0
  409da4:	4651      	mov	r1, sl
  409da6:	220a      	movs	r2, #10
  409da8:	4620      	mov	r0, r4
  409daa:	f000 fe8e 	bl	40aaca <__multadd>
  409dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409db0:	f10b 3bff 	add.w	fp, fp, #4294967295
  409db4:	4682      	mov	sl, r0
  409db6:	2b00      	cmp	r3, #0
  409db8:	f000 81aa 	beq.w	40a110 <_dtoa_r+0xb88>
  409dbc:	2300      	movs	r3, #0
  409dbe:	4639      	mov	r1, r7
  409dc0:	220a      	movs	r2, #10
  409dc2:	4620      	mov	r0, r4
  409dc4:	f000 fe81 	bl	40aaca <__multadd>
  409dc8:	9b04      	ldr	r3, [sp, #16]
  409dca:	2b00      	cmp	r3, #0
  409dcc:	4607      	mov	r7, r0
  409dce:	dc03      	bgt.n	409dd8 <_dtoa_r+0x850>
  409dd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409dd2:	2b02      	cmp	r3, #2
  409dd4:	f300 80b8 	bgt.w	409f48 <_dtoa_r+0x9c0>
  409dd8:	2d00      	cmp	r5, #0
  409dda:	dd05      	ble.n	409de8 <_dtoa_r+0x860>
  409ddc:	4639      	mov	r1, r7
  409dde:	462a      	mov	r2, r5
  409de0:	4620      	mov	r0, r4
  409de2:	f001 f81d 	bl	40ae20 <__lshift>
  409de6:	4607      	mov	r7, r0
  409de8:	9b08      	ldr	r3, [sp, #32]
  409dea:	2b00      	cmp	r3, #0
  409dec:	f000 8110 	beq.w	40a010 <_dtoa_r+0xa88>
  409df0:	6879      	ldr	r1, [r7, #4]
  409df2:	4620      	mov	r0, r4
  409df4:	f000 fe1e 	bl	40aa34 <_Balloc>
  409df8:	693a      	ldr	r2, [r7, #16]
  409dfa:	3202      	adds	r2, #2
  409dfc:	4605      	mov	r5, r0
  409dfe:	0092      	lsls	r2, r2, #2
  409e00:	f107 010c 	add.w	r1, r7, #12
  409e04:	300c      	adds	r0, #12
  409e06:	f7fd fd13 	bl	407830 <memcpy>
  409e0a:	2201      	movs	r2, #1
  409e0c:	4629      	mov	r1, r5
  409e0e:	4620      	mov	r0, r4
  409e10:	f001 f806 	bl	40ae20 <__lshift>
  409e14:	9b02      	ldr	r3, [sp, #8]
  409e16:	f8dd 8018 	ldr.w	r8, [sp, #24]
  409e1a:	9707      	str	r7, [sp, #28]
  409e1c:	f003 0301 	and.w	r3, r3, #1
  409e20:	4607      	mov	r7, r0
  409e22:	9308      	str	r3, [sp, #32]
  409e24:	4631      	mov	r1, r6
  409e26:	4650      	mov	r0, sl
  409e28:	f7ff fb22 	bl	409470 <quorem>
  409e2c:	9907      	ldr	r1, [sp, #28]
  409e2e:	4605      	mov	r5, r0
  409e30:	f100 0930 	add.w	r9, r0, #48	; 0x30
  409e34:	4650      	mov	r0, sl
  409e36:	f001 f844 	bl	40aec2 <__mcmp>
  409e3a:	463a      	mov	r2, r7
  409e3c:	9002      	str	r0, [sp, #8]
  409e3e:	4631      	mov	r1, r6
  409e40:	4620      	mov	r0, r4
  409e42:	f001 f858 	bl	40aef6 <__mdiff>
  409e46:	68c3      	ldr	r3, [r0, #12]
  409e48:	4602      	mov	r2, r0
  409e4a:	2b00      	cmp	r3, #0
  409e4c:	f040 80e2 	bne.w	40a014 <_dtoa_r+0xa8c>
  409e50:	4601      	mov	r1, r0
  409e52:	9009      	str	r0, [sp, #36]	; 0x24
  409e54:	4650      	mov	r0, sl
  409e56:	f001 f834 	bl	40aec2 <__mcmp>
  409e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409e5c:	4603      	mov	r3, r0
  409e5e:	4611      	mov	r1, r2
  409e60:	4620      	mov	r0, r4
  409e62:	9309      	str	r3, [sp, #36]	; 0x24
  409e64:	f000 fe1a 	bl	40aa9c <_Bfree>
  409e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409e6a:	2b00      	cmp	r3, #0
  409e6c:	f040 80d4 	bne.w	40a018 <_dtoa_r+0xa90>
  409e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  409e72:	2a00      	cmp	r2, #0
  409e74:	f040 80d0 	bne.w	40a018 <_dtoa_r+0xa90>
  409e78:	9a08      	ldr	r2, [sp, #32]
  409e7a:	2a00      	cmp	r2, #0
  409e7c:	f040 80cc 	bne.w	40a018 <_dtoa_r+0xa90>
  409e80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  409e84:	f000 80e8 	beq.w	40a058 <_dtoa_r+0xad0>
  409e88:	9b02      	ldr	r3, [sp, #8]
  409e8a:	2b00      	cmp	r3, #0
  409e8c:	dd01      	ble.n	409e92 <_dtoa_r+0x90a>
  409e8e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  409e92:	f108 0501 	add.w	r5, r8, #1
  409e96:	f888 9000 	strb.w	r9, [r8]
  409e9a:	e06a      	b.n	409f72 <_dtoa_r+0x9ea>
  409e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409ea2:	e6f7      	b.n	409c94 <_dtoa_r+0x70c>
  409ea4:	9b08      	ldr	r3, [sp, #32]
  409ea6:	f109 36ff 	add.w	r6, r9, #4294967295
  409eaa:	42b3      	cmp	r3, r6
  409eac:	bfbf      	itttt	lt
  409eae:	9b08      	ldrlt	r3, [sp, #32]
  409eb0:	9608      	strlt	r6, [sp, #32]
  409eb2:	1af2      	sublt	r2, r6, r3
  409eb4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  409eb6:	bfb7      	itett	lt
  409eb8:	189b      	addlt	r3, r3, r2
  409eba:	1b9e      	subge	r6, r3, r6
  409ebc:	930c      	strlt	r3, [sp, #48]	; 0x30
  409ebe:	2600      	movlt	r6, #0
  409ec0:	f1b9 0f00 	cmp.w	r9, #0
  409ec4:	bfb9      	ittee	lt
  409ec6:	eba8 0509 	sublt.w	r5, r8, r9
  409eca:	2300      	movlt	r3, #0
  409ecc:	4645      	movge	r5, r8
  409ece:	464b      	movge	r3, r9
  409ed0:	e6e2      	b.n	409c98 <_dtoa_r+0x710>
  409ed2:	9e08      	ldr	r6, [sp, #32]
  409ed4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  409ed6:	4645      	mov	r5, r8
  409ed8:	e6e7      	b.n	409caa <_dtoa_r+0x722>
  409eda:	9a08      	ldr	r2, [sp, #32]
  409edc:	e710      	b.n	409d00 <_dtoa_r+0x778>
  409ede:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409ee0:	2b01      	cmp	r3, #1
  409ee2:	dc18      	bgt.n	409f16 <_dtoa_r+0x98e>
  409ee4:	9b02      	ldr	r3, [sp, #8]
  409ee6:	b9b3      	cbnz	r3, 409f16 <_dtoa_r+0x98e>
  409ee8:	9b03      	ldr	r3, [sp, #12]
  409eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
  409eee:	b9a3      	cbnz	r3, 409f1a <_dtoa_r+0x992>
  409ef0:	9b03      	ldr	r3, [sp, #12]
  409ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  409ef6:	0d1b      	lsrs	r3, r3, #20
  409ef8:	051b      	lsls	r3, r3, #20
  409efa:	b12b      	cbz	r3, 409f08 <_dtoa_r+0x980>
  409efc:	9b07      	ldr	r3, [sp, #28]
  409efe:	3301      	adds	r3, #1
  409f00:	9307      	str	r3, [sp, #28]
  409f02:	f108 0801 	add.w	r8, r8, #1
  409f06:	2301      	movs	r3, #1
  409f08:	9308      	str	r3, [sp, #32]
  409f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409f0c:	2b00      	cmp	r3, #0
  409f0e:	f47f af11 	bne.w	409d34 <_dtoa_r+0x7ac>
  409f12:	2001      	movs	r0, #1
  409f14:	e716      	b.n	409d44 <_dtoa_r+0x7bc>
  409f16:	2300      	movs	r3, #0
  409f18:	e7f6      	b.n	409f08 <_dtoa_r+0x980>
  409f1a:	9b02      	ldr	r3, [sp, #8]
  409f1c:	e7f4      	b.n	409f08 <_dtoa_r+0x980>
  409f1e:	f43f af23 	beq.w	409d68 <_dtoa_r+0x7e0>
  409f22:	9a07      	ldr	r2, [sp, #28]
  409f24:	331c      	adds	r3, #28
  409f26:	441a      	add	r2, r3
  409f28:	4498      	add	r8, r3
  409f2a:	441d      	add	r5, r3
  409f2c:	4613      	mov	r3, r2
  409f2e:	e71a      	b.n	409d66 <_dtoa_r+0x7de>
  409f30:	4603      	mov	r3, r0
  409f32:	e7f6      	b.n	409f22 <_dtoa_r+0x99a>
  409f34:	40240000 	.word	0x40240000
  409f38:	f1b9 0f00 	cmp.w	r9, #0
  409f3c:	dc33      	bgt.n	409fa6 <_dtoa_r+0xa1e>
  409f3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  409f40:	2b02      	cmp	r3, #2
  409f42:	dd30      	ble.n	409fa6 <_dtoa_r+0xa1e>
  409f44:	f8cd 9010 	str.w	r9, [sp, #16]
  409f48:	9b04      	ldr	r3, [sp, #16]
  409f4a:	b963      	cbnz	r3, 409f66 <_dtoa_r+0x9de>
  409f4c:	4631      	mov	r1, r6
  409f4e:	2205      	movs	r2, #5
  409f50:	4620      	mov	r0, r4
  409f52:	f000 fdba 	bl	40aaca <__multadd>
  409f56:	4601      	mov	r1, r0
  409f58:	4606      	mov	r6, r0
  409f5a:	4650      	mov	r0, sl
  409f5c:	f000 ffb1 	bl	40aec2 <__mcmp>
  409f60:	2800      	cmp	r0, #0
  409f62:	f73f ad5c 	bgt.w	409a1e <_dtoa_r+0x496>
  409f66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409f68:	9d06      	ldr	r5, [sp, #24]
  409f6a:	ea6f 0b03 	mvn.w	fp, r3
  409f6e:	2300      	movs	r3, #0
  409f70:	9307      	str	r3, [sp, #28]
  409f72:	4631      	mov	r1, r6
  409f74:	4620      	mov	r0, r4
  409f76:	f000 fd91 	bl	40aa9c <_Bfree>
  409f7a:	2f00      	cmp	r7, #0
  409f7c:	f43f ae4b 	beq.w	409c16 <_dtoa_r+0x68e>
  409f80:	9b07      	ldr	r3, [sp, #28]
  409f82:	b12b      	cbz	r3, 409f90 <_dtoa_r+0xa08>
  409f84:	42bb      	cmp	r3, r7
  409f86:	d003      	beq.n	409f90 <_dtoa_r+0xa08>
  409f88:	4619      	mov	r1, r3
  409f8a:	4620      	mov	r0, r4
  409f8c:	f000 fd86 	bl	40aa9c <_Bfree>
  409f90:	4639      	mov	r1, r7
  409f92:	4620      	mov	r0, r4
  409f94:	f000 fd82 	bl	40aa9c <_Bfree>
  409f98:	e63d      	b.n	409c16 <_dtoa_r+0x68e>
  409f9a:	2600      	movs	r6, #0
  409f9c:	4637      	mov	r7, r6
  409f9e:	e7e2      	b.n	409f66 <_dtoa_r+0x9de>
  409fa0:	46bb      	mov	fp, r7
  409fa2:	4637      	mov	r7, r6
  409fa4:	e53b      	b.n	409a1e <_dtoa_r+0x496>
  409fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409fa8:	f8cd 9010 	str.w	r9, [sp, #16]
  409fac:	2b00      	cmp	r3, #0
  409fae:	f47f af13 	bne.w	409dd8 <_dtoa_r+0x850>
  409fb2:	9d06      	ldr	r5, [sp, #24]
  409fb4:	4631      	mov	r1, r6
  409fb6:	4650      	mov	r0, sl
  409fb8:	f7ff fa5a 	bl	409470 <quorem>
  409fbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  409fc0:	f805 9b01 	strb.w	r9, [r5], #1
  409fc4:	9b06      	ldr	r3, [sp, #24]
  409fc6:	9a04      	ldr	r2, [sp, #16]
  409fc8:	1aeb      	subs	r3, r5, r3
  409fca:	429a      	cmp	r2, r3
  409fcc:	f300 8083 	bgt.w	40a0d6 <_dtoa_r+0xb4e>
  409fd0:	9b06      	ldr	r3, [sp, #24]
  409fd2:	2a01      	cmp	r2, #1
  409fd4:	bfac      	ite	ge
  409fd6:	189b      	addge	r3, r3, r2
  409fd8:	3301      	addlt	r3, #1
  409fda:	4698      	mov	r8, r3
  409fdc:	2300      	movs	r3, #0
  409fde:	9307      	str	r3, [sp, #28]
  409fe0:	4651      	mov	r1, sl
  409fe2:	2201      	movs	r2, #1
  409fe4:	4620      	mov	r0, r4
  409fe6:	f000 ff1b 	bl	40ae20 <__lshift>
  409fea:	4631      	mov	r1, r6
  409fec:	4682      	mov	sl, r0
  409fee:	f000 ff68 	bl	40aec2 <__mcmp>
  409ff2:	2800      	cmp	r0, #0
  409ff4:	dc35      	bgt.n	40a062 <_dtoa_r+0xada>
  409ff6:	d102      	bne.n	409ffe <_dtoa_r+0xa76>
  409ff8:	f019 0f01 	tst.w	r9, #1
  409ffc:	d131      	bne.n	40a062 <_dtoa_r+0xada>
  409ffe:	4645      	mov	r5, r8
  40a000:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a004:	2b30      	cmp	r3, #48	; 0x30
  40a006:	f105 32ff 	add.w	r2, r5, #4294967295
  40a00a:	d1b2      	bne.n	409f72 <_dtoa_r+0x9ea>
  40a00c:	4615      	mov	r5, r2
  40a00e:	e7f7      	b.n	40a000 <_dtoa_r+0xa78>
  40a010:	4638      	mov	r0, r7
  40a012:	e6ff      	b.n	409e14 <_dtoa_r+0x88c>
  40a014:	2301      	movs	r3, #1
  40a016:	e722      	b.n	409e5e <_dtoa_r+0x8d6>
  40a018:	9a02      	ldr	r2, [sp, #8]
  40a01a:	2a00      	cmp	r2, #0
  40a01c:	db04      	blt.n	40a028 <_dtoa_r+0xaa0>
  40a01e:	d129      	bne.n	40a074 <_dtoa_r+0xaec>
  40a020:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40a022:	bb3a      	cbnz	r2, 40a074 <_dtoa_r+0xaec>
  40a024:	9a08      	ldr	r2, [sp, #32]
  40a026:	bb2a      	cbnz	r2, 40a074 <_dtoa_r+0xaec>
  40a028:	2b00      	cmp	r3, #0
  40a02a:	f77f af32 	ble.w	409e92 <_dtoa_r+0x90a>
  40a02e:	4651      	mov	r1, sl
  40a030:	2201      	movs	r2, #1
  40a032:	4620      	mov	r0, r4
  40a034:	f000 fef4 	bl	40ae20 <__lshift>
  40a038:	4631      	mov	r1, r6
  40a03a:	4682      	mov	sl, r0
  40a03c:	f000 ff41 	bl	40aec2 <__mcmp>
  40a040:	2800      	cmp	r0, #0
  40a042:	dc05      	bgt.n	40a050 <_dtoa_r+0xac8>
  40a044:	f47f af25 	bne.w	409e92 <_dtoa_r+0x90a>
  40a048:	f019 0f01 	tst.w	r9, #1
  40a04c:	f43f af21 	beq.w	409e92 <_dtoa_r+0x90a>
  40a050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a054:	f47f af1b 	bne.w	409e8e <_dtoa_r+0x906>
  40a058:	2339      	movs	r3, #57	; 0x39
  40a05a:	f888 3000 	strb.w	r3, [r8]
  40a05e:	f108 0801 	add.w	r8, r8, #1
  40a062:	4645      	mov	r5, r8
  40a064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a068:	2b39      	cmp	r3, #57	; 0x39
  40a06a:	f105 32ff 	add.w	r2, r5, #4294967295
  40a06e:	d03a      	beq.n	40a0e6 <_dtoa_r+0xb5e>
  40a070:	3301      	adds	r3, #1
  40a072:	e03f      	b.n	40a0f4 <_dtoa_r+0xb6c>
  40a074:	2b00      	cmp	r3, #0
  40a076:	f108 0501 	add.w	r5, r8, #1
  40a07a:	dd05      	ble.n	40a088 <_dtoa_r+0xb00>
  40a07c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a080:	d0ea      	beq.n	40a058 <_dtoa_r+0xad0>
  40a082:	f109 0901 	add.w	r9, r9, #1
  40a086:	e706      	b.n	409e96 <_dtoa_r+0x90e>
  40a088:	9b06      	ldr	r3, [sp, #24]
  40a08a:	9a04      	ldr	r2, [sp, #16]
  40a08c:	f805 9c01 	strb.w	r9, [r5, #-1]
  40a090:	1aeb      	subs	r3, r5, r3
  40a092:	4293      	cmp	r3, r2
  40a094:	46a8      	mov	r8, r5
  40a096:	d0a3      	beq.n	409fe0 <_dtoa_r+0xa58>
  40a098:	4651      	mov	r1, sl
  40a09a:	2300      	movs	r3, #0
  40a09c:	220a      	movs	r2, #10
  40a09e:	4620      	mov	r0, r4
  40a0a0:	f000 fd13 	bl	40aaca <__multadd>
  40a0a4:	9b07      	ldr	r3, [sp, #28]
  40a0a6:	9907      	ldr	r1, [sp, #28]
  40a0a8:	42bb      	cmp	r3, r7
  40a0aa:	4682      	mov	sl, r0
  40a0ac:	f04f 0300 	mov.w	r3, #0
  40a0b0:	f04f 020a 	mov.w	r2, #10
  40a0b4:	4620      	mov	r0, r4
  40a0b6:	d104      	bne.n	40a0c2 <_dtoa_r+0xb3a>
  40a0b8:	f000 fd07 	bl	40aaca <__multadd>
  40a0bc:	9007      	str	r0, [sp, #28]
  40a0be:	4607      	mov	r7, r0
  40a0c0:	e6b0      	b.n	409e24 <_dtoa_r+0x89c>
  40a0c2:	f000 fd02 	bl	40aaca <__multadd>
  40a0c6:	2300      	movs	r3, #0
  40a0c8:	9007      	str	r0, [sp, #28]
  40a0ca:	220a      	movs	r2, #10
  40a0cc:	4639      	mov	r1, r7
  40a0ce:	4620      	mov	r0, r4
  40a0d0:	f000 fcfb 	bl	40aaca <__multadd>
  40a0d4:	e7f3      	b.n	40a0be <_dtoa_r+0xb36>
  40a0d6:	4651      	mov	r1, sl
  40a0d8:	2300      	movs	r3, #0
  40a0da:	220a      	movs	r2, #10
  40a0dc:	4620      	mov	r0, r4
  40a0de:	f000 fcf4 	bl	40aaca <__multadd>
  40a0e2:	4682      	mov	sl, r0
  40a0e4:	e766      	b.n	409fb4 <_dtoa_r+0xa2c>
  40a0e6:	9b06      	ldr	r3, [sp, #24]
  40a0e8:	4293      	cmp	r3, r2
  40a0ea:	d105      	bne.n	40a0f8 <_dtoa_r+0xb70>
  40a0ec:	9a06      	ldr	r2, [sp, #24]
  40a0ee:	f10b 0b01 	add.w	fp, fp, #1
  40a0f2:	2331      	movs	r3, #49	; 0x31
  40a0f4:	7013      	strb	r3, [r2, #0]
  40a0f6:	e73c      	b.n	409f72 <_dtoa_r+0x9ea>
  40a0f8:	4615      	mov	r5, r2
  40a0fa:	e7b3      	b.n	40a064 <_dtoa_r+0xadc>
  40a0fc:	4b09      	ldr	r3, [pc, #36]	; (40a124 <_dtoa_r+0xb9c>)
  40a0fe:	f7ff baa5 	b.w	40964c <_dtoa_r+0xc4>
  40a102:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a104:	2b00      	cmp	r3, #0
  40a106:	f47f aa7f 	bne.w	409608 <_dtoa_r+0x80>
  40a10a:	4b07      	ldr	r3, [pc, #28]	; (40a128 <_dtoa_r+0xba0>)
  40a10c:	f7ff ba9e 	b.w	40964c <_dtoa_r+0xc4>
  40a110:	9b04      	ldr	r3, [sp, #16]
  40a112:	2b00      	cmp	r3, #0
  40a114:	f73f af4d 	bgt.w	409fb2 <_dtoa_r+0xa2a>
  40a118:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a11a:	2b02      	cmp	r3, #2
  40a11c:	f77f af49 	ble.w	409fb2 <_dtoa_r+0xa2a>
  40a120:	e712      	b.n	409f48 <_dtoa_r+0x9c0>
  40a122:	bf00      	nop
  40a124:	0040cc64 	.word	0x0040cc64
  40a128:	0040ccd8 	.word	0x0040ccd8

0040a12c <__sflush_r>:
  40a12c:	898a      	ldrh	r2, [r1, #12]
  40a12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a132:	4605      	mov	r5, r0
  40a134:	0710      	lsls	r0, r2, #28
  40a136:	460c      	mov	r4, r1
  40a138:	d45a      	bmi.n	40a1f0 <__sflush_r+0xc4>
  40a13a:	684b      	ldr	r3, [r1, #4]
  40a13c:	2b00      	cmp	r3, #0
  40a13e:	dc05      	bgt.n	40a14c <__sflush_r+0x20>
  40a140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40a142:	2b00      	cmp	r3, #0
  40a144:	dc02      	bgt.n	40a14c <__sflush_r+0x20>
  40a146:	2000      	movs	r0, #0
  40a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a14c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a14e:	2e00      	cmp	r6, #0
  40a150:	d0f9      	beq.n	40a146 <__sflush_r+0x1a>
  40a152:	2300      	movs	r3, #0
  40a154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40a158:	682f      	ldr	r7, [r5, #0]
  40a15a:	602b      	str	r3, [r5, #0]
  40a15c:	d033      	beq.n	40a1c6 <__sflush_r+0x9a>
  40a15e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40a160:	89a3      	ldrh	r3, [r4, #12]
  40a162:	075a      	lsls	r2, r3, #29
  40a164:	d505      	bpl.n	40a172 <__sflush_r+0x46>
  40a166:	6863      	ldr	r3, [r4, #4]
  40a168:	1ac0      	subs	r0, r0, r3
  40a16a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40a16c:	b10b      	cbz	r3, 40a172 <__sflush_r+0x46>
  40a16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40a170:	1ac0      	subs	r0, r0, r3
  40a172:	2300      	movs	r3, #0
  40a174:	4602      	mov	r2, r0
  40a176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40a178:	6a21      	ldr	r1, [r4, #32]
  40a17a:	4628      	mov	r0, r5
  40a17c:	47b0      	blx	r6
  40a17e:	1c43      	adds	r3, r0, #1
  40a180:	89a3      	ldrh	r3, [r4, #12]
  40a182:	d106      	bne.n	40a192 <__sflush_r+0x66>
  40a184:	6829      	ldr	r1, [r5, #0]
  40a186:	291d      	cmp	r1, #29
  40a188:	d84b      	bhi.n	40a222 <__sflush_r+0xf6>
  40a18a:	4a2b      	ldr	r2, [pc, #172]	; (40a238 <__sflush_r+0x10c>)
  40a18c:	40ca      	lsrs	r2, r1
  40a18e:	07d6      	lsls	r6, r2, #31
  40a190:	d547      	bpl.n	40a222 <__sflush_r+0xf6>
  40a192:	2200      	movs	r2, #0
  40a194:	6062      	str	r2, [r4, #4]
  40a196:	04d9      	lsls	r1, r3, #19
  40a198:	6922      	ldr	r2, [r4, #16]
  40a19a:	6022      	str	r2, [r4, #0]
  40a19c:	d504      	bpl.n	40a1a8 <__sflush_r+0x7c>
  40a19e:	1c42      	adds	r2, r0, #1
  40a1a0:	d101      	bne.n	40a1a6 <__sflush_r+0x7a>
  40a1a2:	682b      	ldr	r3, [r5, #0]
  40a1a4:	b903      	cbnz	r3, 40a1a8 <__sflush_r+0x7c>
  40a1a6:	6560      	str	r0, [r4, #84]	; 0x54
  40a1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40a1aa:	602f      	str	r7, [r5, #0]
  40a1ac:	2900      	cmp	r1, #0
  40a1ae:	d0ca      	beq.n	40a146 <__sflush_r+0x1a>
  40a1b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40a1b4:	4299      	cmp	r1, r3
  40a1b6:	d002      	beq.n	40a1be <__sflush_r+0x92>
  40a1b8:	4628      	mov	r0, r5
  40a1ba:	f001 f831 	bl	40b220 <_free_r>
  40a1be:	2000      	movs	r0, #0
  40a1c0:	6360      	str	r0, [r4, #52]	; 0x34
  40a1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a1c6:	6a21      	ldr	r1, [r4, #32]
  40a1c8:	2301      	movs	r3, #1
  40a1ca:	4628      	mov	r0, r5
  40a1cc:	47b0      	blx	r6
  40a1ce:	1c41      	adds	r1, r0, #1
  40a1d0:	d1c6      	bne.n	40a160 <__sflush_r+0x34>
  40a1d2:	682b      	ldr	r3, [r5, #0]
  40a1d4:	2b00      	cmp	r3, #0
  40a1d6:	d0c3      	beq.n	40a160 <__sflush_r+0x34>
  40a1d8:	2b1d      	cmp	r3, #29
  40a1da:	d001      	beq.n	40a1e0 <__sflush_r+0xb4>
  40a1dc:	2b16      	cmp	r3, #22
  40a1de:	d101      	bne.n	40a1e4 <__sflush_r+0xb8>
  40a1e0:	602f      	str	r7, [r5, #0]
  40a1e2:	e7b0      	b.n	40a146 <__sflush_r+0x1a>
  40a1e4:	89a3      	ldrh	r3, [r4, #12]
  40a1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a1ea:	81a3      	strh	r3, [r4, #12]
  40a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a1f0:	690f      	ldr	r7, [r1, #16]
  40a1f2:	2f00      	cmp	r7, #0
  40a1f4:	d0a7      	beq.n	40a146 <__sflush_r+0x1a>
  40a1f6:	0793      	lsls	r3, r2, #30
  40a1f8:	680e      	ldr	r6, [r1, #0]
  40a1fa:	bf08      	it	eq
  40a1fc:	694b      	ldreq	r3, [r1, #20]
  40a1fe:	600f      	str	r7, [r1, #0]
  40a200:	bf18      	it	ne
  40a202:	2300      	movne	r3, #0
  40a204:	eba6 0807 	sub.w	r8, r6, r7
  40a208:	608b      	str	r3, [r1, #8]
  40a20a:	f1b8 0f00 	cmp.w	r8, #0
  40a20e:	dd9a      	ble.n	40a146 <__sflush_r+0x1a>
  40a210:	4643      	mov	r3, r8
  40a212:	463a      	mov	r2, r7
  40a214:	6a21      	ldr	r1, [r4, #32]
  40a216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40a218:	4628      	mov	r0, r5
  40a21a:	47b0      	blx	r6
  40a21c:	2800      	cmp	r0, #0
  40a21e:	dc07      	bgt.n	40a230 <__sflush_r+0x104>
  40a220:	89a3      	ldrh	r3, [r4, #12]
  40a222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a226:	81a3      	strh	r3, [r4, #12]
  40a228:	f04f 30ff 	mov.w	r0, #4294967295
  40a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a230:	4407      	add	r7, r0
  40a232:	eba8 0800 	sub.w	r8, r8, r0
  40a236:	e7e8      	b.n	40a20a <__sflush_r+0xde>
  40a238:	20400001 	.word	0x20400001

0040a23c <_fflush_r>:
  40a23c:	b538      	push	{r3, r4, r5, lr}
  40a23e:	690b      	ldr	r3, [r1, #16]
  40a240:	4605      	mov	r5, r0
  40a242:	460c      	mov	r4, r1
  40a244:	b1db      	cbz	r3, 40a27e <_fflush_r+0x42>
  40a246:	b118      	cbz	r0, 40a250 <_fflush_r+0x14>
  40a248:	6983      	ldr	r3, [r0, #24]
  40a24a:	b90b      	cbnz	r3, 40a250 <_fflush_r+0x14>
  40a24c:	f7fd f9d6 	bl	4075fc <__sinit>
  40a250:	4b0c      	ldr	r3, [pc, #48]	; (40a284 <_fflush_r+0x48>)
  40a252:	429c      	cmp	r4, r3
  40a254:	d109      	bne.n	40a26a <_fflush_r+0x2e>
  40a256:	686c      	ldr	r4, [r5, #4]
  40a258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a25c:	b17b      	cbz	r3, 40a27e <_fflush_r+0x42>
  40a25e:	4621      	mov	r1, r4
  40a260:	4628      	mov	r0, r5
  40a262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a266:	f7ff bf61 	b.w	40a12c <__sflush_r>
  40a26a:	4b07      	ldr	r3, [pc, #28]	; (40a288 <_fflush_r+0x4c>)
  40a26c:	429c      	cmp	r4, r3
  40a26e:	d101      	bne.n	40a274 <_fflush_r+0x38>
  40a270:	68ac      	ldr	r4, [r5, #8]
  40a272:	e7f1      	b.n	40a258 <_fflush_r+0x1c>
  40a274:	4b05      	ldr	r3, [pc, #20]	; (40a28c <_fflush_r+0x50>)
  40a276:	429c      	cmp	r4, r3
  40a278:	bf08      	it	eq
  40a27a:	68ec      	ldreq	r4, [r5, #12]
  40a27c:	e7ec      	b.n	40a258 <_fflush_r+0x1c>
  40a27e:	2000      	movs	r0, #0
  40a280:	bd38      	pop	{r3, r4, r5, pc}
  40a282:	bf00      	nop
  40a284:	0040cc10 	.word	0x0040cc10
  40a288:	0040cc30 	.word	0x0040cc30
  40a28c:	0040cbf0 	.word	0x0040cbf0

0040a290 <fflush>:
  40a290:	4601      	mov	r1, r0
  40a292:	b920      	cbnz	r0, 40a29e <fflush+0xe>
  40a294:	4b04      	ldr	r3, [pc, #16]	; (40a2a8 <fflush+0x18>)
  40a296:	4905      	ldr	r1, [pc, #20]	; (40a2ac <fflush+0x1c>)
  40a298:	6818      	ldr	r0, [r3, #0]
  40a29a:	f7fd ba37 	b.w	40770c <_fwalk_reent>
  40a29e:	4b04      	ldr	r3, [pc, #16]	; (40a2b0 <fflush+0x20>)
  40a2a0:	6818      	ldr	r0, [r3, #0]
  40a2a2:	f7ff bfcb 	b.w	40a23c <_fflush_r>
  40a2a6:	bf00      	nop
  40a2a8:	0040cc50 	.word	0x0040cc50
  40a2ac:	0040a23d 	.word	0x0040a23d
  40a2b0:	20400050 	.word	0x20400050

0040a2b4 <rshift>:
  40a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a2b6:	6906      	ldr	r6, [r0, #16]
  40a2b8:	114b      	asrs	r3, r1, #5
  40a2ba:	42b3      	cmp	r3, r6
  40a2bc:	f100 0514 	add.w	r5, r0, #20
  40a2c0:	da2b      	bge.n	40a31a <rshift+0x66>
  40a2c2:	f011 011f 	ands.w	r1, r1, #31
  40a2c6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  40a2ca:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  40a2ce:	d108      	bne.n	40a2e2 <rshift+0x2e>
  40a2d0:	4629      	mov	r1, r5
  40a2d2:	42b2      	cmp	r2, r6
  40a2d4:	460b      	mov	r3, r1
  40a2d6:	d210      	bcs.n	40a2fa <rshift+0x46>
  40a2d8:	f852 3b04 	ldr.w	r3, [r2], #4
  40a2dc:	f841 3b04 	str.w	r3, [r1], #4
  40a2e0:	e7f7      	b.n	40a2d2 <rshift+0x1e>
  40a2e2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
  40a2e6:	f1c1 0e20 	rsb	lr, r1, #32
  40a2ea:	3204      	adds	r2, #4
  40a2ec:	40cc      	lsrs	r4, r1
  40a2ee:	462b      	mov	r3, r5
  40a2f0:	42b2      	cmp	r2, r6
  40a2f2:	d308      	bcc.n	40a306 <rshift+0x52>
  40a2f4:	601c      	str	r4, [r3, #0]
  40a2f6:	b104      	cbz	r4, 40a2fa <rshift+0x46>
  40a2f8:	3304      	adds	r3, #4
  40a2fa:	1b5b      	subs	r3, r3, r5
  40a2fc:	109b      	asrs	r3, r3, #2
  40a2fe:	6103      	str	r3, [r0, #16]
  40a300:	b903      	cbnz	r3, 40a304 <rshift+0x50>
  40a302:	6143      	str	r3, [r0, #20]
  40a304:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a306:	6817      	ldr	r7, [r2, #0]
  40a308:	fa07 f70e 	lsl.w	r7, r7, lr
  40a30c:	433c      	orrs	r4, r7
  40a30e:	f843 4b04 	str.w	r4, [r3], #4
  40a312:	f852 4b04 	ldr.w	r4, [r2], #4
  40a316:	40cc      	lsrs	r4, r1
  40a318:	e7ea      	b.n	40a2f0 <rshift+0x3c>
  40a31a:	462b      	mov	r3, r5
  40a31c:	e7ed      	b.n	40a2fa <rshift+0x46>

0040a31e <__hexdig_fun>:
  40a31e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40a322:	2b09      	cmp	r3, #9
  40a324:	d802      	bhi.n	40a32c <__hexdig_fun+0xe>
  40a326:	3820      	subs	r0, #32
  40a328:	b2c0      	uxtb	r0, r0
  40a32a:	4770      	bx	lr
  40a32c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40a330:	2b05      	cmp	r3, #5
  40a332:	d801      	bhi.n	40a338 <__hexdig_fun+0x1a>
  40a334:	3847      	subs	r0, #71	; 0x47
  40a336:	e7f7      	b.n	40a328 <__hexdig_fun+0xa>
  40a338:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  40a33c:	2b05      	cmp	r3, #5
  40a33e:	d801      	bhi.n	40a344 <__hexdig_fun+0x26>
  40a340:	3827      	subs	r0, #39	; 0x27
  40a342:	e7f1      	b.n	40a328 <__hexdig_fun+0xa>
  40a344:	2000      	movs	r0, #0
  40a346:	4770      	bx	lr

0040a348 <__gethex>:
  40a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a34c:	b08b      	sub	sp, #44	; 0x2c
  40a34e:	468a      	mov	sl, r1
  40a350:	9002      	str	r0, [sp, #8]
  40a352:	9816      	ldr	r0, [sp, #88]	; 0x58
  40a354:	9306      	str	r3, [sp, #24]
  40a356:	4690      	mov	r8, r2
  40a358:	f000 fac9 	bl	40a8ee <__localeconv_l>
  40a35c:	6803      	ldr	r3, [r0, #0]
  40a35e:	9303      	str	r3, [sp, #12]
  40a360:	4618      	mov	r0, r3
  40a362:	f7fe f974 	bl	40864e <strlen>
  40a366:	9b03      	ldr	r3, [sp, #12]
  40a368:	9001      	str	r0, [sp, #4]
  40a36a:	4403      	add	r3, r0
  40a36c:	f04f 0b00 	mov.w	fp, #0
  40a370:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40a374:	9307      	str	r3, [sp, #28]
  40a376:	f8da 3000 	ldr.w	r3, [sl]
  40a37a:	3302      	adds	r3, #2
  40a37c:	461f      	mov	r7, r3
  40a37e:	f813 0b01 	ldrb.w	r0, [r3], #1
  40a382:	2830      	cmp	r0, #48	; 0x30
  40a384:	d06c      	beq.n	40a460 <__gethex+0x118>
  40a386:	f7ff ffca 	bl	40a31e <__hexdig_fun>
  40a38a:	4604      	mov	r4, r0
  40a38c:	2800      	cmp	r0, #0
  40a38e:	d16a      	bne.n	40a466 <__gethex+0x11e>
  40a390:	9a01      	ldr	r2, [sp, #4]
  40a392:	9903      	ldr	r1, [sp, #12]
  40a394:	4638      	mov	r0, r7
  40a396:	f001 fa31 	bl	40b7fc <strncmp>
  40a39a:	2800      	cmp	r0, #0
  40a39c:	d166      	bne.n	40a46c <__gethex+0x124>
  40a39e:	9b01      	ldr	r3, [sp, #4]
  40a3a0:	5cf8      	ldrb	r0, [r7, r3]
  40a3a2:	18fe      	adds	r6, r7, r3
  40a3a4:	f7ff ffbb 	bl	40a31e <__hexdig_fun>
  40a3a8:	2800      	cmp	r0, #0
  40a3aa:	d062      	beq.n	40a472 <__gethex+0x12a>
  40a3ac:	4633      	mov	r3, r6
  40a3ae:	7818      	ldrb	r0, [r3, #0]
  40a3b0:	2830      	cmp	r0, #48	; 0x30
  40a3b2:	461f      	mov	r7, r3
  40a3b4:	f103 0301 	add.w	r3, r3, #1
  40a3b8:	d0f9      	beq.n	40a3ae <__gethex+0x66>
  40a3ba:	f7ff ffb0 	bl	40a31e <__hexdig_fun>
  40a3be:	fab0 f580 	clz	r5, r0
  40a3c2:	096d      	lsrs	r5, r5, #5
  40a3c4:	4634      	mov	r4, r6
  40a3c6:	f04f 0b01 	mov.w	fp, #1
  40a3ca:	463a      	mov	r2, r7
  40a3cc:	4616      	mov	r6, r2
  40a3ce:	3201      	adds	r2, #1
  40a3d0:	7830      	ldrb	r0, [r6, #0]
  40a3d2:	f7ff ffa4 	bl	40a31e <__hexdig_fun>
  40a3d6:	2800      	cmp	r0, #0
  40a3d8:	d1f8      	bne.n	40a3cc <__gethex+0x84>
  40a3da:	9a01      	ldr	r2, [sp, #4]
  40a3dc:	9903      	ldr	r1, [sp, #12]
  40a3de:	4630      	mov	r0, r6
  40a3e0:	f001 fa0c 	bl	40b7fc <strncmp>
  40a3e4:	b950      	cbnz	r0, 40a3fc <__gethex+0xb4>
  40a3e6:	b954      	cbnz	r4, 40a3fe <__gethex+0xb6>
  40a3e8:	9b01      	ldr	r3, [sp, #4]
  40a3ea:	18f4      	adds	r4, r6, r3
  40a3ec:	4622      	mov	r2, r4
  40a3ee:	4616      	mov	r6, r2
  40a3f0:	3201      	adds	r2, #1
  40a3f2:	7830      	ldrb	r0, [r6, #0]
  40a3f4:	f7ff ff93 	bl	40a31e <__hexdig_fun>
  40a3f8:	2800      	cmp	r0, #0
  40a3fa:	d1f8      	bne.n	40a3ee <__gethex+0xa6>
  40a3fc:	b10c      	cbz	r4, 40a402 <__gethex+0xba>
  40a3fe:	1ba4      	subs	r4, r4, r6
  40a400:	00a4      	lsls	r4, r4, #2
  40a402:	7833      	ldrb	r3, [r6, #0]
  40a404:	2b50      	cmp	r3, #80	; 0x50
  40a406:	d001      	beq.n	40a40c <__gethex+0xc4>
  40a408:	2b70      	cmp	r3, #112	; 0x70
  40a40a:	d140      	bne.n	40a48e <__gethex+0x146>
  40a40c:	7873      	ldrb	r3, [r6, #1]
  40a40e:	2b2b      	cmp	r3, #43	; 0x2b
  40a410:	d035      	beq.n	40a47e <__gethex+0x136>
  40a412:	2b2d      	cmp	r3, #45	; 0x2d
  40a414:	d02f      	beq.n	40a476 <__gethex+0x12e>
  40a416:	1c71      	adds	r1, r6, #1
  40a418:	f04f 0900 	mov.w	r9, #0
  40a41c:	7808      	ldrb	r0, [r1, #0]
  40a41e:	f7ff ff7e 	bl	40a31e <__hexdig_fun>
  40a422:	1e43      	subs	r3, r0, #1
  40a424:	b2db      	uxtb	r3, r3
  40a426:	2b18      	cmp	r3, #24
  40a428:	d831      	bhi.n	40a48e <__gethex+0x146>
  40a42a:	f1a0 0210 	sub.w	r2, r0, #16
  40a42e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40a432:	f7ff ff74 	bl	40a31e <__hexdig_fun>
  40a436:	1e43      	subs	r3, r0, #1
  40a438:	b2db      	uxtb	r3, r3
  40a43a:	2b18      	cmp	r3, #24
  40a43c:	d922      	bls.n	40a484 <__gethex+0x13c>
  40a43e:	f1b9 0f00 	cmp.w	r9, #0
  40a442:	d000      	beq.n	40a446 <__gethex+0xfe>
  40a444:	4252      	negs	r2, r2
  40a446:	4414      	add	r4, r2
  40a448:	f8ca 1000 	str.w	r1, [sl]
  40a44c:	b30d      	cbz	r5, 40a492 <__gethex+0x14a>
  40a44e:	f1bb 0f00 	cmp.w	fp, #0
  40a452:	bf14      	ite	ne
  40a454:	2700      	movne	r7, #0
  40a456:	2706      	moveq	r7, #6
  40a458:	4638      	mov	r0, r7
  40a45a:	b00b      	add	sp, #44	; 0x2c
  40a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a460:	f10b 0b01 	add.w	fp, fp, #1
  40a464:	e78a      	b.n	40a37c <__gethex+0x34>
  40a466:	2500      	movs	r5, #0
  40a468:	462c      	mov	r4, r5
  40a46a:	e7ae      	b.n	40a3ca <__gethex+0x82>
  40a46c:	463e      	mov	r6, r7
  40a46e:	2501      	movs	r5, #1
  40a470:	e7c7      	b.n	40a402 <__gethex+0xba>
  40a472:	4604      	mov	r4, r0
  40a474:	e7fb      	b.n	40a46e <__gethex+0x126>
  40a476:	f04f 0901 	mov.w	r9, #1
  40a47a:	1cb1      	adds	r1, r6, #2
  40a47c:	e7ce      	b.n	40a41c <__gethex+0xd4>
  40a47e:	f04f 0900 	mov.w	r9, #0
  40a482:	e7fa      	b.n	40a47a <__gethex+0x132>
  40a484:	230a      	movs	r3, #10
  40a486:	fb03 0202 	mla	r2, r3, r2, r0
  40a48a:	3a10      	subs	r2, #16
  40a48c:	e7cf      	b.n	40a42e <__gethex+0xe6>
  40a48e:	4631      	mov	r1, r6
  40a490:	e7da      	b.n	40a448 <__gethex+0x100>
  40a492:	1bf3      	subs	r3, r6, r7
  40a494:	3b01      	subs	r3, #1
  40a496:	4629      	mov	r1, r5
  40a498:	2b07      	cmp	r3, #7
  40a49a:	dc49      	bgt.n	40a530 <__gethex+0x1e8>
  40a49c:	9802      	ldr	r0, [sp, #8]
  40a49e:	f000 fac9 	bl	40aa34 <_Balloc>
  40a4a2:	9b01      	ldr	r3, [sp, #4]
  40a4a4:	f100 0914 	add.w	r9, r0, #20
  40a4a8:	f04f 0b00 	mov.w	fp, #0
  40a4ac:	f1c3 0301 	rsb	r3, r3, #1
  40a4b0:	4605      	mov	r5, r0
  40a4b2:	f8cd 9010 	str.w	r9, [sp, #16]
  40a4b6:	46da      	mov	sl, fp
  40a4b8:	9308      	str	r3, [sp, #32]
  40a4ba:	42b7      	cmp	r7, r6
  40a4bc:	d33b      	bcc.n	40a536 <__gethex+0x1ee>
  40a4be:	9804      	ldr	r0, [sp, #16]
  40a4c0:	f840 ab04 	str.w	sl, [r0], #4
  40a4c4:	eba0 0009 	sub.w	r0, r0, r9
  40a4c8:	1080      	asrs	r0, r0, #2
  40a4ca:	6128      	str	r0, [r5, #16]
  40a4cc:	0147      	lsls	r7, r0, #5
  40a4ce:	4650      	mov	r0, sl
  40a4d0:	f000 fb74 	bl	40abbc <__hi0bits>
  40a4d4:	f8d8 6000 	ldr.w	r6, [r8]
  40a4d8:	1a3f      	subs	r7, r7, r0
  40a4da:	42b7      	cmp	r7, r6
  40a4dc:	dd64      	ble.n	40a5a8 <__gethex+0x260>
  40a4de:	1bbf      	subs	r7, r7, r6
  40a4e0:	4639      	mov	r1, r7
  40a4e2:	4628      	mov	r0, r5
  40a4e4:	f000 fe6d 	bl	40b1c2 <__any_on>
  40a4e8:	4682      	mov	sl, r0
  40a4ea:	b178      	cbz	r0, 40a50c <__gethex+0x1c4>
  40a4ec:	1e7b      	subs	r3, r7, #1
  40a4ee:	1159      	asrs	r1, r3, #5
  40a4f0:	f003 021f 	and.w	r2, r3, #31
  40a4f4:	f04f 0a01 	mov.w	sl, #1
  40a4f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
  40a4fc:	fa0a f202 	lsl.w	r2, sl, r2
  40a500:	420a      	tst	r2, r1
  40a502:	d003      	beq.n	40a50c <__gethex+0x1c4>
  40a504:	4553      	cmp	r3, sl
  40a506:	dc46      	bgt.n	40a596 <__gethex+0x24e>
  40a508:	f04f 0a02 	mov.w	sl, #2
  40a50c:	4639      	mov	r1, r7
  40a50e:	4628      	mov	r0, r5
  40a510:	f7ff fed0 	bl	40a2b4 <rshift>
  40a514:	443c      	add	r4, r7
  40a516:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a51a:	429c      	cmp	r4, r3
  40a51c:	dd52      	ble.n	40a5c4 <__gethex+0x27c>
  40a51e:	4629      	mov	r1, r5
  40a520:	9802      	ldr	r0, [sp, #8]
  40a522:	f000 fabb 	bl	40aa9c <_Bfree>
  40a526:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a528:	2300      	movs	r3, #0
  40a52a:	6013      	str	r3, [r2, #0]
  40a52c:	27a3      	movs	r7, #163	; 0xa3
  40a52e:	e793      	b.n	40a458 <__gethex+0x110>
  40a530:	3101      	adds	r1, #1
  40a532:	105b      	asrs	r3, r3, #1
  40a534:	e7b0      	b.n	40a498 <__gethex+0x150>
  40a536:	1e73      	subs	r3, r6, #1
  40a538:	9305      	str	r3, [sp, #20]
  40a53a:	9a07      	ldr	r2, [sp, #28]
  40a53c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  40a540:	4293      	cmp	r3, r2
  40a542:	d018      	beq.n	40a576 <__gethex+0x22e>
  40a544:	f1bb 0f20 	cmp.w	fp, #32
  40a548:	d107      	bne.n	40a55a <__gethex+0x212>
  40a54a:	9b04      	ldr	r3, [sp, #16]
  40a54c:	f8c3 a000 	str.w	sl, [r3]
  40a550:	3304      	adds	r3, #4
  40a552:	f04f 0a00 	mov.w	sl, #0
  40a556:	9304      	str	r3, [sp, #16]
  40a558:	46d3      	mov	fp, sl
  40a55a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  40a55e:	f7ff fede 	bl	40a31e <__hexdig_fun>
  40a562:	f000 000f 	and.w	r0, r0, #15
  40a566:	fa00 f00b 	lsl.w	r0, r0, fp
  40a56a:	ea4a 0a00 	orr.w	sl, sl, r0
  40a56e:	f10b 0b04 	add.w	fp, fp, #4
  40a572:	9b05      	ldr	r3, [sp, #20]
  40a574:	e00d      	b.n	40a592 <__gethex+0x24a>
  40a576:	9b05      	ldr	r3, [sp, #20]
  40a578:	9a08      	ldr	r2, [sp, #32]
  40a57a:	4413      	add	r3, r2
  40a57c:	429f      	cmp	r7, r3
  40a57e:	d8e1      	bhi.n	40a544 <__gethex+0x1fc>
  40a580:	4618      	mov	r0, r3
  40a582:	9a01      	ldr	r2, [sp, #4]
  40a584:	9903      	ldr	r1, [sp, #12]
  40a586:	9309      	str	r3, [sp, #36]	; 0x24
  40a588:	f001 f938 	bl	40b7fc <strncmp>
  40a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a58e:	2800      	cmp	r0, #0
  40a590:	d1d8      	bne.n	40a544 <__gethex+0x1fc>
  40a592:	461e      	mov	r6, r3
  40a594:	e791      	b.n	40a4ba <__gethex+0x172>
  40a596:	1eb9      	subs	r1, r7, #2
  40a598:	4628      	mov	r0, r5
  40a59a:	f000 fe12 	bl	40b1c2 <__any_on>
  40a59e:	2800      	cmp	r0, #0
  40a5a0:	d0b2      	beq.n	40a508 <__gethex+0x1c0>
  40a5a2:	f04f 0a03 	mov.w	sl, #3
  40a5a6:	e7b1      	b.n	40a50c <__gethex+0x1c4>
  40a5a8:	da09      	bge.n	40a5be <__gethex+0x276>
  40a5aa:	1bf7      	subs	r7, r6, r7
  40a5ac:	4629      	mov	r1, r5
  40a5ae:	463a      	mov	r2, r7
  40a5b0:	9802      	ldr	r0, [sp, #8]
  40a5b2:	f000 fc35 	bl	40ae20 <__lshift>
  40a5b6:	1be4      	subs	r4, r4, r7
  40a5b8:	4605      	mov	r5, r0
  40a5ba:	f100 0914 	add.w	r9, r0, #20
  40a5be:	f04f 0a00 	mov.w	sl, #0
  40a5c2:	e7a8      	b.n	40a516 <__gethex+0x1ce>
  40a5c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
  40a5c8:	4284      	cmp	r4, r0
  40a5ca:	da6a      	bge.n	40a6a2 <__gethex+0x35a>
  40a5cc:	1b04      	subs	r4, r0, r4
  40a5ce:	42a6      	cmp	r6, r4
  40a5d0:	dc2e      	bgt.n	40a630 <__gethex+0x2e8>
  40a5d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40a5d6:	2b02      	cmp	r3, #2
  40a5d8:	d022      	beq.n	40a620 <__gethex+0x2d8>
  40a5da:	2b03      	cmp	r3, #3
  40a5dc:	d024      	beq.n	40a628 <__gethex+0x2e0>
  40a5de:	2b01      	cmp	r3, #1
  40a5e0:	d115      	bne.n	40a60e <__gethex+0x2c6>
  40a5e2:	42a6      	cmp	r6, r4
  40a5e4:	d113      	bne.n	40a60e <__gethex+0x2c6>
  40a5e6:	2e01      	cmp	r6, #1
  40a5e8:	dc0b      	bgt.n	40a602 <__gethex+0x2ba>
  40a5ea:	9a06      	ldr	r2, [sp, #24]
  40a5ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40a5f0:	6013      	str	r3, [r2, #0]
  40a5f2:	2301      	movs	r3, #1
  40a5f4:	612b      	str	r3, [r5, #16]
  40a5f6:	f8c9 3000 	str.w	r3, [r9]
  40a5fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a5fc:	2762      	movs	r7, #98	; 0x62
  40a5fe:	601d      	str	r5, [r3, #0]
  40a600:	e72a      	b.n	40a458 <__gethex+0x110>
  40a602:	1e71      	subs	r1, r6, #1
  40a604:	4628      	mov	r0, r5
  40a606:	f000 fddc 	bl	40b1c2 <__any_on>
  40a60a:	2800      	cmp	r0, #0
  40a60c:	d1ed      	bne.n	40a5ea <__gethex+0x2a2>
  40a60e:	4629      	mov	r1, r5
  40a610:	9802      	ldr	r0, [sp, #8]
  40a612:	f000 fa43 	bl	40aa9c <_Bfree>
  40a616:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a618:	2300      	movs	r3, #0
  40a61a:	6013      	str	r3, [r2, #0]
  40a61c:	2750      	movs	r7, #80	; 0x50
  40a61e:	e71b      	b.n	40a458 <__gethex+0x110>
  40a620:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a622:	2b00      	cmp	r3, #0
  40a624:	d0e1      	beq.n	40a5ea <__gethex+0x2a2>
  40a626:	e7f2      	b.n	40a60e <__gethex+0x2c6>
  40a628:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a62a:	2b00      	cmp	r3, #0
  40a62c:	d1dd      	bne.n	40a5ea <__gethex+0x2a2>
  40a62e:	e7ee      	b.n	40a60e <__gethex+0x2c6>
  40a630:	1e67      	subs	r7, r4, #1
  40a632:	f1ba 0f00 	cmp.w	sl, #0
  40a636:	d131      	bne.n	40a69c <__gethex+0x354>
  40a638:	b127      	cbz	r7, 40a644 <__gethex+0x2fc>
  40a63a:	4639      	mov	r1, r7
  40a63c:	4628      	mov	r0, r5
  40a63e:	f000 fdc0 	bl	40b1c2 <__any_on>
  40a642:	4682      	mov	sl, r0
  40a644:	117a      	asrs	r2, r7, #5
  40a646:	2301      	movs	r3, #1
  40a648:	f007 071f 	and.w	r7, r7, #31
  40a64c:	fa03 f707 	lsl.w	r7, r3, r7
  40a650:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
  40a654:	4621      	mov	r1, r4
  40a656:	421f      	tst	r7, r3
  40a658:	4628      	mov	r0, r5
  40a65a:	bf18      	it	ne
  40a65c:	f04a 0a02 	orrne.w	sl, sl, #2
  40a660:	1b36      	subs	r6, r6, r4
  40a662:	f7ff fe27 	bl	40a2b4 <rshift>
  40a666:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40a66a:	2702      	movs	r7, #2
  40a66c:	f1ba 0f00 	cmp.w	sl, #0
  40a670:	d045      	beq.n	40a6fe <__gethex+0x3b6>
  40a672:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40a676:	2b02      	cmp	r3, #2
  40a678:	d015      	beq.n	40a6a6 <__gethex+0x35e>
  40a67a:	2b03      	cmp	r3, #3
  40a67c:	d017      	beq.n	40a6ae <__gethex+0x366>
  40a67e:	2b01      	cmp	r3, #1
  40a680:	d109      	bne.n	40a696 <__gethex+0x34e>
  40a682:	f01a 0f02 	tst.w	sl, #2
  40a686:	d006      	beq.n	40a696 <__gethex+0x34e>
  40a688:	f8d9 3000 	ldr.w	r3, [r9]
  40a68c:	ea4a 0a03 	orr.w	sl, sl, r3
  40a690:	f01a 0f01 	tst.w	sl, #1
  40a694:	d10e      	bne.n	40a6b4 <__gethex+0x36c>
  40a696:	f047 0710 	orr.w	r7, r7, #16
  40a69a:	e030      	b.n	40a6fe <__gethex+0x3b6>
  40a69c:	f04f 0a01 	mov.w	sl, #1
  40a6a0:	e7d0      	b.n	40a644 <__gethex+0x2fc>
  40a6a2:	2701      	movs	r7, #1
  40a6a4:	e7e2      	b.n	40a66c <__gethex+0x324>
  40a6a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a6a8:	f1c3 0301 	rsb	r3, r3, #1
  40a6ac:	9315      	str	r3, [sp, #84]	; 0x54
  40a6ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a6b0:	2b00      	cmp	r3, #0
  40a6b2:	d0f0      	beq.n	40a696 <__gethex+0x34e>
  40a6b4:	f8d5 9010 	ldr.w	r9, [r5, #16]
  40a6b8:	f105 0314 	add.w	r3, r5, #20
  40a6bc:	ea4f 0a89 	mov.w	sl, r9, lsl #2
  40a6c0:	eb03 010a 	add.w	r1, r3, sl
  40a6c4:	2000      	movs	r0, #0
  40a6c6:	681a      	ldr	r2, [r3, #0]
  40a6c8:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a6cc:	d01c      	beq.n	40a708 <__gethex+0x3c0>
  40a6ce:	3201      	adds	r2, #1
  40a6d0:	601a      	str	r2, [r3, #0]
  40a6d2:	2f02      	cmp	r7, #2
  40a6d4:	f105 0314 	add.w	r3, r5, #20
  40a6d8:	d138      	bne.n	40a74c <__gethex+0x404>
  40a6da:	f8d8 2000 	ldr.w	r2, [r8]
  40a6de:	3a01      	subs	r2, #1
  40a6e0:	4296      	cmp	r6, r2
  40a6e2:	d10a      	bne.n	40a6fa <__gethex+0x3b2>
  40a6e4:	1171      	asrs	r1, r6, #5
  40a6e6:	2201      	movs	r2, #1
  40a6e8:	f006 061f 	and.w	r6, r6, #31
  40a6ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40a6f0:	fa02 f606 	lsl.w	r6, r2, r6
  40a6f4:	421e      	tst	r6, r3
  40a6f6:	bf18      	it	ne
  40a6f8:	4617      	movne	r7, r2
  40a6fa:	f047 0720 	orr.w	r7, r7, #32
  40a6fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a700:	601d      	str	r5, [r3, #0]
  40a702:	9b06      	ldr	r3, [sp, #24]
  40a704:	601c      	str	r4, [r3, #0]
  40a706:	e6a7      	b.n	40a458 <__gethex+0x110>
  40a708:	f843 0b04 	str.w	r0, [r3], #4
  40a70c:	4299      	cmp	r1, r3
  40a70e:	d8da      	bhi.n	40a6c6 <__gethex+0x37e>
  40a710:	68ab      	ldr	r3, [r5, #8]
  40a712:	4599      	cmp	r9, r3
  40a714:	db12      	blt.n	40a73c <__gethex+0x3f4>
  40a716:	6869      	ldr	r1, [r5, #4]
  40a718:	9802      	ldr	r0, [sp, #8]
  40a71a:	3101      	adds	r1, #1
  40a71c:	f000 f98a 	bl	40aa34 <_Balloc>
  40a720:	692a      	ldr	r2, [r5, #16]
  40a722:	3202      	adds	r2, #2
  40a724:	f105 010c 	add.w	r1, r5, #12
  40a728:	4683      	mov	fp, r0
  40a72a:	0092      	lsls	r2, r2, #2
  40a72c:	300c      	adds	r0, #12
  40a72e:	f7fd f87f 	bl	407830 <memcpy>
  40a732:	4629      	mov	r1, r5
  40a734:	9802      	ldr	r0, [sp, #8]
  40a736:	f000 f9b1 	bl	40aa9c <_Bfree>
  40a73a:	465d      	mov	r5, fp
  40a73c:	692b      	ldr	r3, [r5, #16]
  40a73e:	1c5a      	adds	r2, r3, #1
  40a740:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  40a744:	612a      	str	r2, [r5, #16]
  40a746:	2201      	movs	r2, #1
  40a748:	615a      	str	r2, [r3, #20]
  40a74a:	e7c2      	b.n	40a6d2 <__gethex+0x38a>
  40a74c:	692a      	ldr	r2, [r5, #16]
  40a74e:	4591      	cmp	r9, r2
  40a750:	da0b      	bge.n	40a76a <__gethex+0x422>
  40a752:	2101      	movs	r1, #1
  40a754:	4628      	mov	r0, r5
  40a756:	f7ff fdad 	bl	40a2b4 <rshift>
  40a75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a75e:	3401      	adds	r4, #1
  40a760:	429c      	cmp	r4, r3
  40a762:	f73f aedc 	bgt.w	40a51e <__gethex+0x1d6>
  40a766:	2701      	movs	r7, #1
  40a768:	e7c7      	b.n	40a6fa <__gethex+0x3b2>
  40a76a:	f016 061f 	ands.w	r6, r6, #31
  40a76e:	d0fa      	beq.n	40a766 <__gethex+0x41e>
  40a770:	449a      	add	sl, r3
  40a772:	f1c6 0620 	rsb	r6, r6, #32
  40a776:	f85a 0c04 	ldr.w	r0, [sl, #-4]
  40a77a:	f000 fa1f 	bl	40abbc <__hi0bits>
  40a77e:	42b0      	cmp	r0, r6
  40a780:	dbe7      	blt.n	40a752 <__gethex+0x40a>
  40a782:	e7f0      	b.n	40a766 <__gethex+0x41e>

0040a784 <L_shift>:
  40a784:	f1c2 0208 	rsb	r2, r2, #8
  40a788:	0092      	lsls	r2, r2, #2
  40a78a:	b570      	push	{r4, r5, r6, lr}
  40a78c:	f1c2 0620 	rsb	r6, r2, #32
  40a790:	6843      	ldr	r3, [r0, #4]
  40a792:	6804      	ldr	r4, [r0, #0]
  40a794:	fa03 f506 	lsl.w	r5, r3, r6
  40a798:	432c      	orrs	r4, r5
  40a79a:	40d3      	lsrs	r3, r2
  40a79c:	6004      	str	r4, [r0, #0]
  40a79e:	f840 3f04 	str.w	r3, [r0, #4]!
  40a7a2:	4288      	cmp	r0, r1
  40a7a4:	d3f4      	bcc.n	40a790 <L_shift+0xc>
  40a7a6:	bd70      	pop	{r4, r5, r6, pc}

0040a7a8 <__match>:
  40a7a8:	b530      	push	{r4, r5, lr}
  40a7aa:	6803      	ldr	r3, [r0, #0]
  40a7ac:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a7b0:	3301      	adds	r3, #1
  40a7b2:	b914      	cbnz	r4, 40a7ba <__match+0x12>
  40a7b4:	6003      	str	r3, [r0, #0]
  40a7b6:	2001      	movs	r0, #1
  40a7b8:	bd30      	pop	{r4, r5, pc}
  40a7ba:	781a      	ldrb	r2, [r3, #0]
  40a7bc:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  40a7c0:	2d19      	cmp	r5, #25
  40a7c2:	bf98      	it	ls
  40a7c4:	3220      	addls	r2, #32
  40a7c6:	42a2      	cmp	r2, r4
  40a7c8:	d0f0      	beq.n	40a7ac <__match+0x4>
  40a7ca:	2000      	movs	r0, #0
  40a7cc:	bd30      	pop	{r4, r5, pc}

0040a7ce <__hexnan>:
  40a7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a7d2:	680b      	ldr	r3, [r1, #0]
  40a7d4:	6801      	ldr	r1, [r0, #0]
  40a7d6:	115f      	asrs	r7, r3, #5
  40a7d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  40a7dc:	f013 031f 	ands.w	r3, r3, #31
  40a7e0:	b087      	sub	sp, #28
  40a7e2:	bf18      	it	ne
  40a7e4:	3704      	addne	r7, #4
  40a7e6:	2500      	movs	r5, #0
  40a7e8:	1f3e      	subs	r6, r7, #4
  40a7ea:	4682      	mov	sl, r0
  40a7ec:	4690      	mov	r8, r2
  40a7ee:	9302      	str	r3, [sp, #8]
  40a7f0:	f847 5c04 	str.w	r5, [r7, #-4]
  40a7f4:	46b1      	mov	r9, r6
  40a7f6:	4634      	mov	r4, r6
  40a7f8:	9501      	str	r5, [sp, #4]
  40a7fa:	46ab      	mov	fp, r5
  40a7fc:	784a      	ldrb	r2, [r1, #1]
  40a7fe:	1c4b      	adds	r3, r1, #1
  40a800:	9303      	str	r3, [sp, #12]
  40a802:	b342      	cbz	r2, 40a856 <__hexnan+0x88>
  40a804:	4610      	mov	r0, r2
  40a806:	9105      	str	r1, [sp, #20]
  40a808:	9204      	str	r2, [sp, #16]
  40a80a:	f7ff fd88 	bl	40a31e <__hexdig_fun>
  40a80e:	2800      	cmp	r0, #0
  40a810:	d143      	bne.n	40a89a <__hexnan+0xcc>
  40a812:	9a04      	ldr	r2, [sp, #16]
  40a814:	9905      	ldr	r1, [sp, #20]
  40a816:	2a20      	cmp	r2, #32
  40a818:	d818      	bhi.n	40a84c <__hexnan+0x7e>
  40a81a:	9b01      	ldr	r3, [sp, #4]
  40a81c:	459b      	cmp	fp, r3
  40a81e:	dd13      	ble.n	40a848 <__hexnan+0x7a>
  40a820:	454c      	cmp	r4, r9
  40a822:	d206      	bcs.n	40a832 <__hexnan+0x64>
  40a824:	2d07      	cmp	r5, #7
  40a826:	dc04      	bgt.n	40a832 <__hexnan+0x64>
  40a828:	462a      	mov	r2, r5
  40a82a:	4649      	mov	r1, r9
  40a82c:	4620      	mov	r0, r4
  40a82e:	f7ff ffa9 	bl	40a784 <L_shift>
  40a832:	4544      	cmp	r4, r8
  40a834:	d944      	bls.n	40a8c0 <__hexnan+0xf2>
  40a836:	2300      	movs	r3, #0
  40a838:	f1a4 0904 	sub.w	r9, r4, #4
  40a83c:	f844 3c04 	str.w	r3, [r4, #-4]
  40a840:	f8cd b004 	str.w	fp, [sp, #4]
  40a844:	464c      	mov	r4, r9
  40a846:	461d      	mov	r5, r3
  40a848:	9903      	ldr	r1, [sp, #12]
  40a84a:	e7d7      	b.n	40a7fc <__hexnan+0x2e>
  40a84c:	2a29      	cmp	r2, #41	; 0x29
  40a84e:	d14a      	bne.n	40a8e6 <__hexnan+0x118>
  40a850:	3102      	adds	r1, #2
  40a852:	f8ca 1000 	str.w	r1, [sl]
  40a856:	f1bb 0f00 	cmp.w	fp, #0
  40a85a:	d044      	beq.n	40a8e6 <__hexnan+0x118>
  40a85c:	454c      	cmp	r4, r9
  40a85e:	d206      	bcs.n	40a86e <__hexnan+0xa0>
  40a860:	2d07      	cmp	r5, #7
  40a862:	dc04      	bgt.n	40a86e <__hexnan+0xa0>
  40a864:	462a      	mov	r2, r5
  40a866:	4649      	mov	r1, r9
  40a868:	4620      	mov	r0, r4
  40a86a:	f7ff ff8b 	bl	40a784 <L_shift>
  40a86e:	4544      	cmp	r4, r8
  40a870:	d928      	bls.n	40a8c4 <__hexnan+0xf6>
  40a872:	4643      	mov	r3, r8
  40a874:	f854 2b04 	ldr.w	r2, [r4], #4
  40a878:	f843 2b04 	str.w	r2, [r3], #4
  40a87c:	42a6      	cmp	r6, r4
  40a87e:	d2f9      	bcs.n	40a874 <__hexnan+0xa6>
  40a880:	2200      	movs	r2, #0
  40a882:	f843 2b04 	str.w	r2, [r3], #4
  40a886:	429e      	cmp	r6, r3
  40a888:	d2fb      	bcs.n	40a882 <__hexnan+0xb4>
  40a88a:	6833      	ldr	r3, [r6, #0]
  40a88c:	b91b      	cbnz	r3, 40a896 <__hexnan+0xc8>
  40a88e:	4546      	cmp	r6, r8
  40a890:	d127      	bne.n	40a8e2 <__hexnan+0x114>
  40a892:	2301      	movs	r3, #1
  40a894:	6033      	str	r3, [r6, #0]
  40a896:	2005      	movs	r0, #5
  40a898:	e026      	b.n	40a8e8 <__hexnan+0x11a>
  40a89a:	3501      	adds	r5, #1
  40a89c:	2d08      	cmp	r5, #8
  40a89e:	f10b 0b01 	add.w	fp, fp, #1
  40a8a2:	dd06      	ble.n	40a8b2 <__hexnan+0xe4>
  40a8a4:	4544      	cmp	r4, r8
  40a8a6:	d9cf      	bls.n	40a848 <__hexnan+0x7a>
  40a8a8:	2300      	movs	r3, #0
  40a8aa:	f844 3c04 	str.w	r3, [r4, #-4]
  40a8ae:	2501      	movs	r5, #1
  40a8b0:	3c04      	subs	r4, #4
  40a8b2:	6822      	ldr	r2, [r4, #0]
  40a8b4:	f000 000f 	and.w	r0, r0, #15
  40a8b8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
  40a8bc:	6020      	str	r0, [r4, #0]
  40a8be:	e7c3      	b.n	40a848 <__hexnan+0x7a>
  40a8c0:	2508      	movs	r5, #8
  40a8c2:	e7c1      	b.n	40a848 <__hexnan+0x7a>
  40a8c4:	9b02      	ldr	r3, [sp, #8]
  40a8c6:	2b00      	cmp	r3, #0
  40a8c8:	d0df      	beq.n	40a88a <__hexnan+0xbc>
  40a8ca:	f04f 32ff 	mov.w	r2, #4294967295
  40a8ce:	f1c3 0320 	rsb	r3, r3, #32
  40a8d2:	fa22 f303 	lsr.w	r3, r2, r3
  40a8d6:	f857 2c04 	ldr.w	r2, [r7, #-4]
  40a8da:	401a      	ands	r2, r3
  40a8dc:	f847 2c04 	str.w	r2, [r7, #-4]
  40a8e0:	e7d3      	b.n	40a88a <__hexnan+0xbc>
  40a8e2:	3e04      	subs	r6, #4
  40a8e4:	e7d1      	b.n	40a88a <__hexnan+0xbc>
  40a8e6:	2004      	movs	r0, #4
  40a8e8:	b007      	add	sp, #28
  40a8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a8ee <__localeconv_l>:
  40a8ee:	30f0      	adds	r0, #240	; 0xf0
  40a8f0:	4770      	bx	lr
	...

0040a8f4 <_localeconv_r>:
  40a8f4:	4b04      	ldr	r3, [pc, #16]	; (40a908 <_localeconv_r+0x14>)
  40a8f6:	681b      	ldr	r3, [r3, #0]
  40a8f8:	6a18      	ldr	r0, [r3, #32]
  40a8fa:	4b04      	ldr	r3, [pc, #16]	; (40a90c <_localeconv_r+0x18>)
  40a8fc:	2800      	cmp	r0, #0
  40a8fe:	bf08      	it	eq
  40a900:	4618      	moveq	r0, r3
  40a902:	30f0      	adds	r0, #240	; 0xf0
  40a904:	4770      	bx	lr
  40a906:	bf00      	nop
  40a908:	20400050 	.word	0x20400050
  40a90c:	204000b4 	.word	0x204000b4

0040a910 <_lseek_r>:
  40a910:	b538      	push	{r3, r4, r5, lr}
  40a912:	4c07      	ldr	r4, [pc, #28]	; (40a930 <_lseek_r+0x20>)
  40a914:	4605      	mov	r5, r0
  40a916:	4608      	mov	r0, r1
  40a918:	4611      	mov	r1, r2
  40a91a:	2200      	movs	r2, #0
  40a91c:	6022      	str	r2, [r4, #0]
  40a91e:	461a      	mov	r2, r3
  40a920:	f7f9 f908 	bl	403b34 <_lseek>
  40a924:	1c43      	adds	r3, r0, #1
  40a926:	d102      	bne.n	40a92e <_lseek_r+0x1e>
  40a928:	6823      	ldr	r3, [r4, #0]
  40a92a:	b103      	cbz	r3, 40a92e <_lseek_r+0x1e>
  40a92c:	602b      	str	r3, [r5, #0]
  40a92e:	bd38      	pop	{r3, r4, r5, pc}
  40a930:	204308dc 	.word	0x204308dc

0040a934 <__swhatbuf_r>:
  40a934:	b570      	push	{r4, r5, r6, lr}
  40a936:	460e      	mov	r6, r1
  40a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a93c:	2900      	cmp	r1, #0
  40a93e:	b090      	sub	sp, #64	; 0x40
  40a940:	4614      	mov	r4, r2
  40a942:	461d      	mov	r5, r3
  40a944:	da07      	bge.n	40a956 <__swhatbuf_r+0x22>
  40a946:	2300      	movs	r3, #0
  40a948:	602b      	str	r3, [r5, #0]
  40a94a:	89b3      	ldrh	r3, [r6, #12]
  40a94c:	061a      	lsls	r2, r3, #24
  40a94e:	d410      	bmi.n	40a972 <__swhatbuf_r+0x3e>
  40a950:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a954:	e00e      	b.n	40a974 <__swhatbuf_r+0x40>
  40a956:	aa01      	add	r2, sp, #4
  40a958:	f000 ff70 	bl	40b83c <_fstat_r>
  40a95c:	2800      	cmp	r0, #0
  40a95e:	dbf2      	blt.n	40a946 <__swhatbuf_r+0x12>
  40a960:	9a02      	ldr	r2, [sp, #8]
  40a962:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a966:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40a96a:	425a      	negs	r2, r3
  40a96c:	415a      	adcs	r2, r3
  40a96e:	602a      	str	r2, [r5, #0]
  40a970:	e7ee      	b.n	40a950 <__swhatbuf_r+0x1c>
  40a972:	2340      	movs	r3, #64	; 0x40
  40a974:	2000      	movs	r0, #0
  40a976:	6023      	str	r3, [r4, #0]
  40a978:	b010      	add	sp, #64	; 0x40
  40a97a:	bd70      	pop	{r4, r5, r6, pc}

0040a97c <__smakebuf_r>:
  40a97c:	898b      	ldrh	r3, [r1, #12]
  40a97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40a980:	079d      	lsls	r5, r3, #30
  40a982:	4606      	mov	r6, r0
  40a984:	460c      	mov	r4, r1
  40a986:	d507      	bpl.n	40a998 <__smakebuf_r+0x1c>
  40a988:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40a98c:	6023      	str	r3, [r4, #0]
  40a98e:	6123      	str	r3, [r4, #16]
  40a990:	2301      	movs	r3, #1
  40a992:	6163      	str	r3, [r4, #20]
  40a994:	b002      	add	sp, #8
  40a996:	bd70      	pop	{r4, r5, r6, pc}
  40a998:	ab01      	add	r3, sp, #4
  40a99a:	466a      	mov	r2, sp
  40a99c:	f7ff ffca 	bl	40a934 <__swhatbuf_r>
  40a9a0:	9900      	ldr	r1, [sp, #0]
  40a9a2:	4605      	mov	r5, r0
  40a9a4:	4630      	mov	r0, r6
  40a9a6:	f7fc ff57 	bl	407858 <_malloc_r>
  40a9aa:	b948      	cbnz	r0, 40a9c0 <__smakebuf_r+0x44>
  40a9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a9b0:	059a      	lsls	r2, r3, #22
  40a9b2:	d4ef      	bmi.n	40a994 <__smakebuf_r+0x18>
  40a9b4:	f023 0303 	bic.w	r3, r3, #3
  40a9b8:	f043 0302 	orr.w	r3, r3, #2
  40a9bc:	81a3      	strh	r3, [r4, #12]
  40a9be:	e7e3      	b.n	40a988 <__smakebuf_r+0xc>
  40a9c0:	4b0d      	ldr	r3, [pc, #52]	; (40a9f8 <__smakebuf_r+0x7c>)
  40a9c2:	62b3      	str	r3, [r6, #40]	; 0x28
  40a9c4:	89a3      	ldrh	r3, [r4, #12]
  40a9c6:	6020      	str	r0, [r4, #0]
  40a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a9cc:	81a3      	strh	r3, [r4, #12]
  40a9ce:	9b00      	ldr	r3, [sp, #0]
  40a9d0:	6163      	str	r3, [r4, #20]
  40a9d2:	9b01      	ldr	r3, [sp, #4]
  40a9d4:	6120      	str	r0, [r4, #16]
  40a9d6:	b15b      	cbz	r3, 40a9f0 <__smakebuf_r+0x74>
  40a9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a9dc:	4630      	mov	r0, r6
  40a9de:	f000 ff3f 	bl	40b860 <_isatty_r>
  40a9e2:	b128      	cbz	r0, 40a9f0 <__smakebuf_r+0x74>
  40a9e4:	89a3      	ldrh	r3, [r4, #12]
  40a9e6:	f023 0303 	bic.w	r3, r3, #3
  40a9ea:	f043 0301 	orr.w	r3, r3, #1
  40a9ee:	81a3      	strh	r3, [r4, #12]
  40a9f0:	89a3      	ldrh	r3, [r4, #12]
  40a9f2:	431d      	orrs	r5, r3
  40a9f4:	81a5      	strh	r5, [r4, #12]
  40a9f6:	e7cd      	b.n	40a994 <__smakebuf_r+0x18>
  40a9f8:	0040757d 	.word	0x0040757d

0040a9fc <malloc>:
  40a9fc:	4b02      	ldr	r3, [pc, #8]	; (40aa08 <malloc+0xc>)
  40a9fe:	4601      	mov	r1, r0
  40aa00:	6818      	ldr	r0, [r3, #0]
  40aa02:	f7fc bf29 	b.w	407858 <_malloc_r>
  40aa06:	bf00      	nop
  40aa08:	20400050 	.word	0x20400050

0040aa0c <__ascii_mbtowc>:
  40aa0c:	b082      	sub	sp, #8
  40aa0e:	b901      	cbnz	r1, 40aa12 <__ascii_mbtowc+0x6>
  40aa10:	a901      	add	r1, sp, #4
  40aa12:	b142      	cbz	r2, 40aa26 <__ascii_mbtowc+0x1a>
  40aa14:	b14b      	cbz	r3, 40aa2a <__ascii_mbtowc+0x1e>
  40aa16:	7813      	ldrb	r3, [r2, #0]
  40aa18:	600b      	str	r3, [r1, #0]
  40aa1a:	7812      	ldrb	r2, [r2, #0]
  40aa1c:	1c10      	adds	r0, r2, #0
  40aa1e:	bf18      	it	ne
  40aa20:	2001      	movne	r0, #1
  40aa22:	b002      	add	sp, #8
  40aa24:	4770      	bx	lr
  40aa26:	4610      	mov	r0, r2
  40aa28:	e7fb      	b.n	40aa22 <__ascii_mbtowc+0x16>
  40aa2a:	f06f 0001 	mvn.w	r0, #1
  40aa2e:	e7f8      	b.n	40aa22 <__ascii_mbtowc+0x16>

0040aa30 <__malloc_lock>:
  40aa30:	4770      	bx	lr

0040aa32 <__malloc_unlock>:
  40aa32:	4770      	bx	lr

0040aa34 <_Balloc>:
  40aa34:	b570      	push	{r4, r5, r6, lr}
  40aa36:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40aa38:	4604      	mov	r4, r0
  40aa3a:	460e      	mov	r6, r1
  40aa3c:	b93d      	cbnz	r5, 40aa4e <_Balloc+0x1a>
  40aa3e:	2010      	movs	r0, #16
  40aa40:	f7ff ffdc 	bl	40a9fc <malloc>
  40aa44:	6260      	str	r0, [r4, #36]	; 0x24
  40aa46:	6045      	str	r5, [r0, #4]
  40aa48:	6085      	str	r5, [r0, #8]
  40aa4a:	6005      	str	r5, [r0, #0]
  40aa4c:	60c5      	str	r5, [r0, #12]
  40aa4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40aa50:	68eb      	ldr	r3, [r5, #12]
  40aa52:	b183      	cbz	r3, 40aa76 <_Balloc+0x42>
  40aa54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40aa56:	68db      	ldr	r3, [r3, #12]
  40aa58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40aa5c:	b9b8      	cbnz	r0, 40aa8e <_Balloc+0x5a>
  40aa5e:	2101      	movs	r1, #1
  40aa60:	fa01 f506 	lsl.w	r5, r1, r6
  40aa64:	1d6a      	adds	r2, r5, #5
  40aa66:	0092      	lsls	r2, r2, #2
  40aa68:	4620      	mov	r0, r4
  40aa6a:	f000 fbcb 	bl	40b204 <_calloc_r>
  40aa6e:	b160      	cbz	r0, 40aa8a <_Balloc+0x56>
  40aa70:	6046      	str	r6, [r0, #4]
  40aa72:	6085      	str	r5, [r0, #8]
  40aa74:	e00e      	b.n	40aa94 <_Balloc+0x60>
  40aa76:	2221      	movs	r2, #33	; 0x21
  40aa78:	2104      	movs	r1, #4
  40aa7a:	4620      	mov	r0, r4
  40aa7c:	f000 fbc2 	bl	40b204 <_calloc_r>
  40aa80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40aa82:	60e8      	str	r0, [r5, #12]
  40aa84:	68db      	ldr	r3, [r3, #12]
  40aa86:	2b00      	cmp	r3, #0
  40aa88:	d1e4      	bne.n	40aa54 <_Balloc+0x20>
  40aa8a:	2000      	movs	r0, #0
  40aa8c:	bd70      	pop	{r4, r5, r6, pc}
  40aa8e:	6802      	ldr	r2, [r0, #0]
  40aa90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  40aa94:	2300      	movs	r3, #0
  40aa96:	6103      	str	r3, [r0, #16]
  40aa98:	60c3      	str	r3, [r0, #12]
  40aa9a:	bd70      	pop	{r4, r5, r6, pc}

0040aa9c <_Bfree>:
  40aa9c:	b570      	push	{r4, r5, r6, lr}
  40aa9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40aaa0:	4606      	mov	r6, r0
  40aaa2:	460d      	mov	r5, r1
  40aaa4:	b93c      	cbnz	r4, 40aab6 <_Bfree+0x1a>
  40aaa6:	2010      	movs	r0, #16
  40aaa8:	f7ff ffa8 	bl	40a9fc <malloc>
  40aaac:	6270      	str	r0, [r6, #36]	; 0x24
  40aaae:	6044      	str	r4, [r0, #4]
  40aab0:	6084      	str	r4, [r0, #8]
  40aab2:	6004      	str	r4, [r0, #0]
  40aab4:	60c4      	str	r4, [r0, #12]
  40aab6:	b13d      	cbz	r5, 40aac8 <_Bfree+0x2c>
  40aab8:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40aaba:	686a      	ldr	r2, [r5, #4]
  40aabc:	68db      	ldr	r3, [r3, #12]
  40aabe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40aac2:	6029      	str	r1, [r5, #0]
  40aac4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40aac8:	bd70      	pop	{r4, r5, r6, pc}

0040aaca <__multadd>:
  40aaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40aace:	690d      	ldr	r5, [r1, #16]
  40aad0:	461f      	mov	r7, r3
  40aad2:	4606      	mov	r6, r0
  40aad4:	460c      	mov	r4, r1
  40aad6:	f101 0e14 	add.w	lr, r1, #20
  40aada:	2300      	movs	r3, #0
  40aadc:	f8de 0000 	ldr.w	r0, [lr]
  40aae0:	b281      	uxth	r1, r0
  40aae2:	fb02 7101 	mla	r1, r2, r1, r7
  40aae6:	0c0f      	lsrs	r7, r1, #16
  40aae8:	0c00      	lsrs	r0, r0, #16
  40aaea:	fb02 7000 	mla	r0, r2, r0, r7
  40aaee:	b289      	uxth	r1, r1
  40aaf0:	3301      	adds	r3, #1
  40aaf2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40aaf6:	429d      	cmp	r5, r3
  40aaf8:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40aafc:	f84e 1b04 	str.w	r1, [lr], #4
  40ab00:	dcec      	bgt.n	40aadc <__multadd+0x12>
  40ab02:	b1d7      	cbz	r7, 40ab3a <__multadd+0x70>
  40ab04:	68a3      	ldr	r3, [r4, #8]
  40ab06:	429d      	cmp	r5, r3
  40ab08:	db12      	blt.n	40ab30 <__multadd+0x66>
  40ab0a:	6861      	ldr	r1, [r4, #4]
  40ab0c:	4630      	mov	r0, r6
  40ab0e:	3101      	adds	r1, #1
  40ab10:	f7ff ff90 	bl	40aa34 <_Balloc>
  40ab14:	6922      	ldr	r2, [r4, #16]
  40ab16:	3202      	adds	r2, #2
  40ab18:	f104 010c 	add.w	r1, r4, #12
  40ab1c:	4680      	mov	r8, r0
  40ab1e:	0092      	lsls	r2, r2, #2
  40ab20:	300c      	adds	r0, #12
  40ab22:	f7fc fe85 	bl	407830 <memcpy>
  40ab26:	4621      	mov	r1, r4
  40ab28:	4630      	mov	r0, r6
  40ab2a:	f7ff ffb7 	bl	40aa9c <_Bfree>
  40ab2e:	4644      	mov	r4, r8
  40ab30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  40ab34:	3501      	adds	r5, #1
  40ab36:	615f      	str	r7, [r3, #20]
  40ab38:	6125      	str	r5, [r4, #16]
  40ab3a:	4620      	mov	r0, r4
  40ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040ab40 <__s2b>:
  40ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ab44:	460c      	mov	r4, r1
  40ab46:	4615      	mov	r5, r2
  40ab48:	461f      	mov	r7, r3
  40ab4a:	2209      	movs	r2, #9
  40ab4c:	3308      	adds	r3, #8
  40ab4e:	4606      	mov	r6, r0
  40ab50:	fb93 f3f2 	sdiv	r3, r3, r2
  40ab54:	2100      	movs	r1, #0
  40ab56:	2201      	movs	r2, #1
  40ab58:	429a      	cmp	r2, r3
  40ab5a:	db20      	blt.n	40ab9e <__s2b+0x5e>
  40ab5c:	4630      	mov	r0, r6
  40ab5e:	f7ff ff69 	bl	40aa34 <_Balloc>
  40ab62:	9b08      	ldr	r3, [sp, #32]
  40ab64:	6143      	str	r3, [r0, #20]
  40ab66:	2d09      	cmp	r5, #9
  40ab68:	f04f 0301 	mov.w	r3, #1
  40ab6c:	6103      	str	r3, [r0, #16]
  40ab6e:	dd19      	ble.n	40aba4 <__s2b+0x64>
  40ab70:	f104 0909 	add.w	r9, r4, #9
  40ab74:	46c8      	mov	r8, r9
  40ab76:	442c      	add	r4, r5
  40ab78:	f818 3b01 	ldrb.w	r3, [r8], #1
  40ab7c:	4601      	mov	r1, r0
  40ab7e:	3b30      	subs	r3, #48	; 0x30
  40ab80:	220a      	movs	r2, #10
  40ab82:	4630      	mov	r0, r6
  40ab84:	f7ff ffa1 	bl	40aaca <__multadd>
  40ab88:	45a0      	cmp	r8, r4
  40ab8a:	d1f5      	bne.n	40ab78 <__s2b+0x38>
  40ab8c:	f1a5 0408 	sub.w	r4, r5, #8
  40ab90:	444c      	add	r4, r9
  40ab92:	1b2d      	subs	r5, r5, r4
  40ab94:	1963      	adds	r3, r4, r5
  40ab96:	42bb      	cmp	r3, r7
  40ab98:	db07      	blt.n	40abaa <__s2b+0x6a>
  40ab9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ab9e:	0052      	lsls	r2, r2, #1
  40aba0:	3101      	adds	r1, #1
  40aba2:	e7d9      	b.n	40ab58 <__s2b+0x18>
  40aba4:	340a      	adds	r4, #10
  40aba6:	2509      	movs	r5, #9
  40aba8:	e7f3      	b.n	40ab92 <__s2b+0x52>
  40abaa:	f814 3b01 	ldrb.w	r3, [r4], #1
  40abae:	4601      	mov	r1, r0
  40abb0:	3b30      	subs	r3, #48	; 0x30
  40abb2:	220a      	movs	r2, #10
  40abb4:	4630      	mov	r0, r6
  40abb6:	f7ff ff88 	bl	40aaca <__multadd>
  40abba:	e7eb      	b.n	40ab94 <__s2b+0x54>

0040abbc <__hi0bits>:
  40abbc:	0c02      	lsrs	r2, r0, #16
  40abbe:	0412      	lsls	r2, r2, #16
  40abc0:	4603      	mov	r3, r0
  40abc2:	b9b2      	cbnz	r2, 40abf2 <__hi0bits+0x36>
  40abc4:	0403      	lsls	r3, r0, #16
  40abc6:	2010      	movs	r0, #16
  40abc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40abcc:	bf04      	itt	eq
  40abce:	021b      	lsleq	r3, r3, #8
  40abd0:	3008      	addeq	r0, #8
  40abd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40abd6:	bf04      	itt	eq
  40abd8:	011b      	lsleq	r3, r3, #4
  40abda:	3004      	addeq	r0, #4
  40abdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40abe0:	bf04      	itt	eq
  40abe2:	009b      	lsleq	r3, r3, #2
  40abe4:	3002      	addeq	r0, #2
  40abe6:	2b00      	cmp	r3, #0
  40abe8:	db06      	blt.n	40abf8 <__hi0bits+0x3c>
  40abea:	005b      	lsls	r3, r3, #1
  40abec:	d503      	bpl.n	40abf6 <__hi0bits+0x3a>
  40abee:	3001      	adds	r0, #1
  40abf0:	4770      	bx	lr
  40abf2:	2000      	movs	r0, #0
  40abf4:	e7e8      	b.n	40abc8 <__hi0bits+0xc>
  40abf6:	2020      	movs	r0, #32
  40abf8:	4770      	bx	lr

0040abfa <__lo0bits>:
  40abfa:	6803      	ldr	r3, [r0, #0]
  40abfc:	f013 0207 	ands.w	r2, r3, #7
  40ac00:	4601      	mov	r1, r0
  40ac02:	d00b      	beq.n	40ac1c <__lo0bits+0x22>
  40ac04:	07da      	lsls	r2, r3, #31
  40ac06:	d423      	bmi.n	40ac50 <__lo0bits+0x56>
  40ac08:	0798      	lsls	r0, r3, #30
  40ac0a:	bf49      	itett	mi
  40ac0c:	085b      	lsrmi	r3, r3, #1
  40ac0e:	089b      	lsrpl	r3, r3, #2
  40ac10:	2001      	movmi	r0, #1
  40ac12:	600b      	strmi	r3, [r1, #0]
  40ac14:	bf5c      	itt	pl
  40ac16:	600b      	strpl	r3, [r1, #0]
  40ac18:	2002      	movpl	r0, #2
  40ac1a:	4770      	bx	lr
  40ac1c:	b298      	uxth	r0, r3
  40ac1e:	b9a8      	cbnz	r0, 40ac4c <__lo0bits+0x52>
  40ac20:	0c1b      	lsrs	r3, r3, #16
  40ac22:	2010      	movs	r0, #16
  40ac24:	f013 0fff 	tst.w	r3, #255	; 0xff
  40ac28:	bf04      	itt	eq
  40ac2a:	0a1b      	lsreq	r3, r3, #8
  40ac2c:	3008      	addeq	r0, #8
  40ac2e:	071a      	lsls	r2, r3, #28
  40ac30:	bf04      	itt	eq
  40ac32:	091b      	lsreq	r3, r3, #4
  40ac34:	3004      	addeq	r0, #4
  40ac36:	079a      	lsls	r2, r3, #30
  40ac38:	bf04      	itt	eq
  40ac3a:	089b      	lsreq	r3, r3, #2
  40ac3c:	3002      	addeq	r0, #2
  40ac3e:	07da      	lsls	r2, r3, #31
  40ac40:	d402      	bmi.n	40ac48 <__lo0bits+0x4e>
  40ac42:	085b      	lsrs	r3, r3, #1
  40ac44:	d006      	beq.n	40ac54 <__lo0bits+0x5a>
  40ac46:	3001      	adds	r0, #1
  40ac48:	600b      	str	r3, [r1, #0]
  40ac4a:	4770      	bx	lr
  40ac4c:	4610      	mov	r0, r2
  40ac4e:	e7e9      	b.n	40ac24 <__lo0bits+0x2a>
  40ac50:	2000      	movs	r0, #0
  40ac52:	4770      	bx	lr
  40ac54:	2020      	movs	r0, #32
  40ac56:	4770      	bx	lr

0040ac58 <__i2b>:
  40ac58:	b510      	push	{r4, lr}
  40ac5a:	460c      	mov	r4, r1
  40ac5c:	2101      	movs	r1, #1
  40ac5e:	f7ff fee9 	bl	40aa34 <_Balloc>
  40ac62:	2201      	movs	r2, #1
  40ac64:	6144      	str	r4, [r0, #20]
  40ac66:	6102      	str	r2, [r0, #16]
  40ac68:	bd10      	pop	{r4, pc}

0040ac6a <__multiply>:
  40ac6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ac6e:	4614      	mov	r4, r2
  40ac70:	690a      	ldr	r2, [r1, #16]
  40ac72:	6923      	ldr	r3, [r4, #16]
  40ac74:	429a      	cmp	r2, r3
  40ac76:	bfb8      	it	lt
  40ac78:	460b      	movlt	r3, r1
  40ac7a:	4689      	mov	r9, r1
  40ac7c:	bfbc      	itt	lt
  40ac7e:	46a1      	movlt	r9, r4
  40ac80:	461c      	movlt	r4, r3
  40ac82:	f8d9 7010 	ldr.w	r7, [r9, #16]
  40ac86:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40ac8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40ac8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40ac92:	eb07 060a 	add.w	r6, r7, sl
  40ac96:	429e      	cmp	r6, r3
  40ac98:	bfc8      	it	gt
  40ac9a:	3101      	addgt	r1, #1
  40ac9c:	f7ff feca 	bl	40aa34 <_Balloc>
  40aca0:	f100 0514 	add.w	r5, r0, #20
  40aca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  40aca8:	462b      	mov	r3, r5
  40acaa:	2200      	movs	r2, #0
  40acac:	4543      	cmp	r3, r8
  40acae:	d316      	bcc.n	40acde <__multiply+0x74>
  40acb0:	f104 0214 	add.w	r2, r4, #20
  40acb4:	f109 0114 	add.w	r1, r9, #20
  40acb8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40acbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40acc0:	9301      	str	r3, [sp, #4]
  40acc2:	9c01      	ldr	r4, [sp, #4]
  40acc4:	4294      	cmp	r4, r2
  40acc6:	4613      	mov	r3, r2
  40acc8:	d80c      	bhi.n	40ace4 <__multiply+0x7a>
  40acca:	2e00      	cmp	r6, #0
  40accc:	dd03      	ble.n	40acd6 <__multiply+0x6c>
  40acce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40acd2:	2b00      	cmp	r3, #0
  40acd4:	d054      	beq.n	40ad80 <__multiply+0x116>
  40acd6:	6106      	str	r6, [r0, #16]
  40acd8:	b003      	add	sp, #12
  40acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40acde:	f843 2b04 	str.w	r2, [r3], #4
  40ace2:	e7e3      	b.n	40acac <__multiply+0x42>
  40ace4:	f8b3 a000 	ldrh.w	sl, [r3]
  40ace8:	3204      	adds	r2, #4
  40acea:	f1ba 0f00 	cmp.w	sl, #0
  40acee:	d020      	beq.n	40ad32 <__multiply+0xc8>
  40acf0:	46ae      	mov	lr, r5
  40acf2:	4689      	mov	r9, r1
  40acf4:	f04f 0c00 	mov.w	ip, #0
  40acf8:	f859 4b04 	ldr.w	r4, [r9], #4
  40acfc:	f8be b000 	ldrh.w	fp, [lr]
  40ad00:	b2a3      	uxth	r3, r4
  40ad02:	fb0a b303 	mla	r3, sl, r3, fp
  40ad06:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40ad0a:	f8de 4000 	ldr.w	r4, [lr]
  40ad0e:	4463      	add	r3, ip
  40ad10:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40ad14:	fb0a c40b 	mla	r4, sl, fp, ip
  40ad18:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40ad1c:	b29b      	uxth	r3, r3
  40ad1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40ad22:	454f      	cmp	r7, r9
  40ad24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40ad28:	f84e 3b04 	str.w	r3, [lr], #4
  40ad2c:	d8e4      	bhi.n	40acf8 <__multiply+0x8e>
  40ad2e:	f8ce c000 	str.w	ip, [lr]
  40ad32:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  40ad36:	f1b9 0f00 	cmp.w	r9, #0
  40ad3a:	d01f      	beq.n	40ad7c <__multiply+0x112>
  40ad3c:	682b      	ldr	r3, [r5, #0]
  40ad3e:	46ae      	mov	lr, r5
  40ad40:	468c      	mov	ip, r1
  40ad42:	f04f 0a00 	mov.w	sl, #0
  40ad46:	f8bc 4000 	ldrh.w	r4, [ip]
  40ad4a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40ad4e:	fb09 b404 	mla	r4, r9, r4, fp
  40ad52:	44a2      	add	sl, r4
  40ad54:	b29b      	uxth	r3, r3
  40ad56:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40ad5a:	f84e 3b04 	str.w	r3, [lr], #4
  40ad5e:	f85c 3b04 	ldr.w	r3, [ip], #4
  40ad62:	f8be 4000 	ldrh.w	r4, [lr]
  40ad66:	0c1b      	lsrs	r3, r3, #16
  40ad68:	fb09 4303 	mla	r3, r9, r3, r4
  40ad6c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  40ad70:	4567      	cmp	r7, ip
  40ad72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40ad76:	d8e6      	bhi.n	40ad46 <__multiply+0xdc>
  40ad78:	f8ce 3000 	str.w	r3, [lr]
  40ad7c:	3504      	adds	r5, #4
  40ad7e:	e7a0      	b.n	40acc2 <__multiply+0x58>
  40ad80:	3e01      	subs	r6, #1
  40ad82:	e7a2      	b.n	40acca <__multiply+0x60>

0040ad84 <__pow5mult>:
  40ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ad88:	4615      	mov	r5, r2
  40ad8a:	f012 0203 	ands.w	r2, r2, #3
  40ad8e:	4606      	mov	r6, r0
  40ad90:	460f      	mov	r7, r1
  40ad92:	d007      	beq.n	40ada4 <__pow5mult+0x20>
  40ad94:	3a01      	subs	r2, #1
  40ad96:	4c21      	ldr	r4, [pc, #132]	; (40ae1c <__pow5mult+0x98>)
  40ad98:	2300      	movs	r3, #0
  40ad9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40ad9e:	f7ff fe94 	bl	40aaca <__multadd>
  40ada2:	4607      	mov	r7, r0
  40ada4:	10ad      	asrs	r5, r5, #2
  40ada6:	d035      	beq.n	40ae14 <__pow5mult+0x90>
  40ada8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40adaa:	b93c      	cbnz	r4, 40adbc <__pow5mult+0x38>
  40adac:	2010      	movs	r0, #16
  40adae:	f7ff fe25 	bl	40a9fc <malloc>
  40adb2:	6270      	str	r0, [r6, #36]	; 0x24
  40adb4:	6044      	str	r4, [r0, #4]
  40adb6:	6084      	str	r4, [r0, #8]
  40adb8:	6004      	str	r4, [r0, #0]
  40adba:	60c4      	str	r4, [r0, #12]
  40adbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  40adc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40adc4:	b94c      	cbnz	r4, 40adda <__pow5mult+0x56>
  40adc6:	f240 2171 	movw	r1, #625	; 0x271
  40adca:	4630      	mov	r0, r6
  40adcc:	f7ff ff44 	bl	40ac58 <__i2b>
  40add0:	2300      	movs	r3, #0
  40add2:	f8c8 0008 	str.w	r0, [r8, #8]
  40add6:	4604      	mov	r4, r0
  40add8:	6003      	str	r3, [r0, #0]
  40adda:	f04f 0800 	mov.w	r8, #0
  40adde:	07eb      	lsls	r3, r5, #31
  40ade0:	d50a      	bpl.n	40adf8 <__pow5mult+0x74>
  40ade2:	4639      	mov	r1, r7
  40ade4:	4622      	mov	r2, r4
  40ade6:	4630      	mov	r0, r6
  40ade8:	f7ff ff3f 	bl	40ac6a <__multiply>
  40adec:	4639      	mov	r1, r7
  40adee:	4681      	mov	r9, r0
  40adf0:	4630      	mov	r0, r6
  40adf2:	f7ff fe53 	bl	40aa9c <_Bfree>
  40adf6:	464f      	mov	r7, r9
  40adf8:	106d      	asrs	r5, r5, #1
  40adfa:	d00b      	beq.n	40ae14 <__pow5mult+0x90>
  40adfc:	6820      	ldr	r0, [r4, #0]
  40adfe:	b938      	cbnz	r0, 40ae10 <__pow5mult+0x8c>
  40ae00:	4622      	mov	r2, r4
  40ae02:	4621      	mov	r1, r4
  40ae04:	4630      	mov	r0, r6
  40ae06:	f7ff ff30 	bl	40ac6a <__multiply>
  40ae0a:	6020      	str	r0, [r4, #0]
  40ae0c:	f8c0 8000 	str.w	r8, [r0]
  40ae10:	4604      	mov	r4, r0
  40ae12:	e7e4      	b.n	40adde <__pow5mult+0x5a>
  40ae14:	4638      	mov	r0, r7
  40ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ae1a:	bf00      	nop
  40ae1c:	0040cde0 	.word	0x0040cde0

0040ae20 <__lshift>:
  40ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ae24:	460c      	mov	r4, r1
  40ae26:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40ae2a:	6923      	ldr	r3, [r4, #16]
  40ae2c:	6849      	ldr	r1, [r1, #4]
  40ae2e:	eb0a 0903 	add.w	r9, sl, r3
  40ae32:	68a3      	ldr	r3, [r4, #8]
  40ae34:	4607      	mov	r7, r0
  40ae36:	4616      	mov	r6, r2
  40ae38:	f109 0501 	add.w	r5, r9, #1
  40ae3c:	42ab      	cmp	r3, r5
  40ae3e:	db31      	blt.n	40aea4 <__lshift+0x84>
  40ae40:	4638      	mov	r0, r7
  40ae42:	f7ff fdf7 	bl	40aa34 <_Balloc>
  40ae46:	2200      	movs	r2, #0
  40ae48:	4680      	mov	r8, r0
  40ae4a:	f100 0314 	add.w	r3, r0, #20
  40ae4e:	4611      	mov	r1, r2
  40ae50:	4552      	cmp	r2, sl
  40ae52:	db2a      	blt.n	40aeaa <__lshift+0x8a>
  40ae54:	6920      	ldr	r0, [r4, #16]
  40ae56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40ae5a:	f104 0114 	add.w	r1, r4, #20
  40ae5e:	f016 021f 	ands.w	r2, r6, #31
  40ae62:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  40ae66:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40ae6a:	d022      	beq.n	40aeb2 <__lshift+0x92>
  40ae6c:	f1c2 0c20 	rsb	ip, r2, #32
  40ae70:	2000      	movs	r0, #0
  40ae72:	680e      	ldr	r6, [r1, #0]
  40ae74:	4096      	lsls	r6, r2
  40ae76:	4330      	orrs	r0, r6
  40ae78:	f843 0b04 	str.w	r0, [r3], #4
  40ae7c:	f851 0b04 	ldr.w	r0, [r1], #4
  40ae80:	458e      	cmp	lr, r1
  40ae82:	fa20 f00c 	lsr.w	r0, r0, ip
  40ae86:	d8f4      	bhi.n	40ae72 <__lshift+0x52>
  40ae88:	6018      	str	r0, [r3, #0]
  40ae8a:	b108      	cbz	r0, 40ae90 <__lshift+0x70>
  40ae8c:	f109 0502 	add.w	r5, r9, #2
  40ae90:	3d01      	subs	r5, #1
  40ae92:	4638      	mov	r0, r7
  40ae94:	f8c8 5010 	str.w	r5, [r8, #16]
  40ae98:	4621      	mov	r1, r4
  40ae9a:	f7ff fdff 	bl	40aa9c <_Bfree>
  40ae9e:	4640      	mov	r0, r8
  40aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aea4:	3101      	adds	r1, #1
  40aea6:	005b      	lsls	r3, r3, #1
  40aea8:	e7c8      	b.n	40ae3c <__lshift+0x1c>
  40aeaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40aeae:	3201      	adds	r2, #1
  40aeb0:	e7ce      	b.n	40ae50 <__lshift+0x30>
  40aeb2:	3b04      	subs	r3, #4
  40aeb4:	f851 2b04 	ldr.w	r2, [r1], #4
  40aeb8:	f843 2f04 	str.w	r2, [r3, #4]!
  40aebc:	458e      	cmp	lr, r1
  40aebe:	d8f9      	bhi.n	40aeb4 <__lshift+0x94>
  40aec0:	e7e6      	b.n	40ae90 <__lshift+0x70>

0040aec2 <__mcmp>:
  40aec2:	6903      	ldr	r3, [r0, #16]
  40aec4:	690a      	ldr	r2, [r1, #16]
  40aec6:	1a9b      	subs	r3, r3, r2
  40aec8:	b530      	push	{r4, r5, lr}
  40aeca:	d10c      	bne.n	40aee6 <__mcmp+0x24>
  40aecc:	0092      	lsls	r2, r2, #2
  40aece:	3014      	adds	r0, #20
  40aed0:	3114      	adds	r1, #20
  40aed2:	1884      	adds	r4, r0, r2
  40aed4:	4411      	add	r1, r2
  40aed6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40aeda:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40aede:	4295      	cmp	r5, r2
  40aee0:	d003      	beq.n	40aeea <__mcmp+0x28>
  40aee2:	d305      	bcc.n	40aef0 <__mcmp+0x2e>
  40aee4:	2301      	movs	r3, #1
  40aee6:	4618      	mov	r0, r3
  40aee8:	bd30      	pop	{r4, r5, pc}
  40aeea:	42a0      	cmp	r0, r4
  40aeec:	d3f3      	bcc.n	40aed6 <__mcmp+0x14>
  40aeee:	e7fa      	b.n	40aee6 <__mcmp+0x24>
  40aef0:	f04f 33ff 	mov.w	r3, #4294967295
  40aef4:	e7f7      	b.n	40aee6 <__mcmp+0x24>

0040aef6 <__mdiff>:
  40aef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aefa:	460d      	mov	r5, r1
  40aefc:	4607      	mov	r7, r0
  40aefe:	4611      	mov	r1, r2
  40af00:	4628      	mov	r0, r5
  40af02:	4614      	mov	r4, r2
  40af04:	f7ff ffdd 	bl	40aec2 <__mcmp>
  40af08:	1e06      	subs	r6, r0, #0
  40af0a:	d108      	bne.n	40af1e <__mdiff+0x28>
  40af0c:	4631      	mov	r1, r6
  40af0e:	4638      	mov	r0, r7
  40af10:	f7ff fd90 	bl	40aa34 <_Balloc>
  40af14:	2301      	movs	r3, #1
  40af16:	6103      	str	r3, [r0, #16]
  40af18:	6146      	str	r6, [r0, #20]
  40af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af1e:	bfa4      	itt	ge
  40af20:	4623      	movge	r3, r4
  40af22:	462c      	movge	r4, r5
  40af24:	4638      	mov	r0, r7
  40af26:	6861      	ldr	r1, [r4, #4]
  40af28:	bfa6      	itte	ge
  40af2a:	461d      	movge	r5, r3
  40af2c:	2600      	movge	r6, #0
  40af2e:	2601      	movlt	r6, #1
  40af30:	f7ff fd80 	bl	40aa34 <_Balloc>
  40af34:	692b      	ldr	r3, [r5, #16]
  40af36:	60c6      	str	r6, [r0, #12]
  40af38:	6926      	ldr	r6, [r4, #16]
  40af3a:	f105 0914 	add.w	r9, r5, #20
  40af3e:	f104 0214 	add.w	r2, r4, #20
  40af42:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  40af46:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40af4a:	f100 0514 	add.w	r5, r0, #20
  40af4e:	f04f 0c00 	mov.w	ip, #0
  40af52:	f852 ab04 	ldr.w	sl, [r2], #4
  40af56:	f859 4b04 	ldr.w	r4, [r9], #4
  40af5a:	fa1c f18a 	uxtah	r1, ip, sl
  40af5e:	b2a3      	uxth	r3, r4
  40af60:	1ac9      	subs	r1, r1, r3
  40af62:	0c23      	lsrs	r3, r4, #16
  40af64:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  40af68:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40af6c:	b289      	uxth	r1, r1
  40af6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40af72:	45c8      	cmp	r8, r9
  40af74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40af78:	4696      	mov	lr, r2
  40af7a:	f845 3b04 	str.w	r3, [r5], #4
  40af7e:	d8e8      	bhi.n	40af52 <__mdiff+0x5c>
  40af80:	45be      	cmp	lr, r7
  40af82:	d305      	bcc.n	40af90 <__mdiff+0x9a>
  40af84:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40af88:	b18b      	cbz	r3, 40afae <__mdiff+0xb8>
  40af8a:	6106      	str	r6, [r0, #16]
  40af8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af90:	f85e 1b04 	ldr.w	r1, [lr], #4
  40af94:	fa1c f381 	uxtah	r3, ip, r1
  40af98:	141a      	asrs	r2, r3, #16
  40af9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40af9e:	b29b      	uxth	r3, r3
  40afa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40afa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  40afa8:	f845 3b04 	str.w	r3, [r5], #4
  40afac:	e7e8      	b.n	40af80 <__mdiff+0x8a>
  40afae:	3e01      	subs	r6, #1
  40afb0:	e7e8      	b.n	40af84 <__mdiff+0x8e>
	...

0040afb4 <__ulp>:
  40afb4:	4b10      	ldr	r3, [pc, #64]	; (40aff8 <__ulp+0x44>)
  40afb6:	400b      	ands	r3, r1
  40afb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  40afbc:	2b00      	cmp	r3, #0
  40afbe:	dd02      	ble.n	40afc6 <__ulp+0x12>
  40afc0:	2000      	movs	r0, #0
  40afc2:	4619      	mov	r1, r3
  40afc4:	4770      	bx	lr
  40afc6:	425b      	negs	r3, r3
  40afc8:	151b      	asrs	r3, r3, #20
  40afca:	2b13      	cmp	r3, #19
  40afcc:	f04f 0000 	mov.w	r0, #0
  40afd0:	f04f 0100 	mov.w	r1, #0
  40afd4:	dc04      	bgt.n	40afe0 <__ulp+0x2c>
  40afd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40afda:	fa42 f103 	asr.w	r1, r2, r3
  40afde:	4770      	bx	lr
  40afe0:	3b14      	subs	r3, #20
  40afe2:	2b1e      	cmp	r3, #30
  40afe4:	f04f 0201 	mov.w	r2, #1
  40afe8:	bfda      	itte	le
  40afea:	f1c3 031f 	rsble	r3, r3, #31
  40afee:	fa02 f303 	lslle.w	r3, r2, r3
  40aff2:	4613      	movgt	r3, r2
  40aff4:	4618      	mov	r0, r3
  40aff6:	4770      	bx	lr
  40aff8:	7ff00000 	.word	0x7ff00000

0040affc <__b2d>:
  40affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b000:	6907      	ldr	r7, [r0, #16]
  40b002:	f100 0914 	add.w	r9, r0, #20
  40b006:	eb09 0787 	add.w	r7, r9, r7, lsl #2
  40b00a:	f1a7 0804 	sub.w	r8, r7, #4
  40b00e:	f857 6c04 	ldr.w	r6, [r7, #-4]
  40b012:	4630      	mov	r0, r6
  40b014:	f7ff fdd2 	bl	40abbc <__hi0bits>
  40b018:	f1c0 0320 	rsb	r3, r0, #32
  40b01c:	280a      	cmp	r0, #10
  40b01e:	600b      	str	r3, [r1, #0]
  40b020:	491e      	ldr	r1, [pc, #120]	; (40b09c <__b2d+0xa0>)
  40b022:	dc17      	bgt.n	40b054 <__b2d+0x58>
  40b024:	f1c0 0e0b 	rsb	lr, r0, #11
  40b028:	45c1      	cmp	r9, r8
  40b02a:	fa26 f30e 	lsr.w	r3, r6, lr
  40b02e:	bf38      	it	cc
  40b030:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
  40b034:	ea43 0501 	orr.w	r5, r3, r1
  40b038:	bf28      	it	cs
  40b03a:	2200      	movcs	r2, #0
  40b03c:	f100 0315 	add.w	r3, r0, #21
  40b040:	fa06 f303 	lsl.w	r3, r6, r3
  40b044:	fa22 f20e 	lsr.w	r2, r2, lr
  40b048:	ea43 0402 	orr.w	r4, r3, r2
  40b04c:	4620      	mov	r0, r4
  40b04e:	4629      	mov	r1, r5
  40b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b054:	45c1      	cmp	r9, r8
  40b056:	bf3a      	itte	cc
  40b058:	f1a7 0808 	subcc.w	r8, r7, #8
  40b05c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
  40b060:	2200      	movcs	r2, #0
  40b062:	f1b0 030b 	subs.w	r3, r0, #11
  40b066:	d015      	beq.n	40b094 <__b2d+0x98>
  40b068:	409e      	lsls	r6, r3
  40b06a:	f1c3 0720 	rsb	r7, r3, #32
  40b06e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
  40b072:	fa22 f107 	lsr.w	r1, r2, r7
  40b076:	45c8      	cmp	r8, r9
  40b078:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
  40b07c:	ea46 0501 	orr.w	r5, r6, r1
  40b080:	bf8c      	ite	hi
  40b082:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
  40b086:	2100      	movls	r1, #0
  40b088:	fa02 f003 	lsl.w	r0, r2, r3
  40b08c:	40f9      	lsrs	r1, r7
  40b08e:	ea40 0401 	orr.w	r4, r0, r1
  40b092:	e7db      	b.n	40b04c <__b2d+0x50>
  40b094:	ea46 0501 	orr.w	r5, r6, r1
  40b098:	4614      	mov	r4, r2
  40b09a:	e7d7      	b.n	40b04c <__b2d+0x50>
  40b09c:	3ff00000 	.word	0x3ff00000

0040b0a0 <__d2b>:
  40b0a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40b0a4:	2101      	movs	r1, #1
  40b0a6:	461c      	mov	r4, r3
  40b0a8:	4690      	mov	r8, r2
  40b0aa:	9e08      	ldr	r6, [sp, #32]
  40b0ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b0ae:	f7ff fcc1 	bl	40aa34 <_Balloc>
  40b0b2:	f3c4 0213 	ubfx	r2, r4, #0, #20
  40b0b6:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40b0ba:	4607      	mov	r7, r0
  40b0bc:	bb34      	cbnz	r4, 40b10c <__d2b+0x6c>
  40b0be:	9201      	str	r2, [sp, #4]
  40b0c0:	f1b8 0f00 	cmp.w	r8, #0
  40b0c4:	d027      	beq.n	40b116 <__d2b+0x76>
  40b0c6:	a802      	add	r0, sp, #8
  40b0c8:	f840 8d08 	str.w	r8, [r0, #-8]!
  40b0cc:	f7ff fd95 	bl	40abfa <__lo0bits>
  40b0d0:	9900      	ldr	r1, [sp, #0]
  40b0d2:	b1f0      	cbz	r0, 40b112 <__d2b+0x72>
  40b0d4:	9a01      	ldr	r2, [sp, #4]
  40b0d6:	f1c0 0320 	rsb	r3, r0, #32
  40b0da:	fa02 f303 	lsl.w	r3, r2, r3
  40b0de:	430b      	orrs	r3, r1
  40b0e0:	40c2      	lsrs	r2, r0
  40b0e2:	617b      	str	r3, [r7, #20]
  40b0e4:	9201      	str	r2, [sp, #4]
  40b0e6:	9b01      	ldr	r3, [sp, #4]
  40b0e8:	61bb      	str	r3, [r7, #24]
  40b0ea:	2b00      	cmp	r3, #0
  40b0ec:	bf14      	ite	ne
  40b0ee:	2102      	movne	r1, #2
  40b0f0:	2101      	moveq	r1, #1
  40b0f2:	6139      	str	r1, [r7, #16]
  40b0f4:	b1c4      	cbz	r4, 40b128 <__d2b+0x88>
  40b0f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40b0fa:	4404      	add	r4, r0
  40b0fc:	6034      	str	r4, [r6, #0]
  40b0fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40b102:	6028      	str	r0, [r5, #0]
  40b104:	4638      	mov	r0, r7
  40b106:	b002      	add	sp, #8
  40b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b10c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40b110:	e7d5      	b.n	40b0be <__d2b+0x1e>
  40b112:	6179      	str	r1, [r7, #20]
  40b114:	e7e7      	b.n	40b0e6 <__d2b+0x46>
  40b116:	a801      	add	r0, sp, #4
  40b118:	f7ff fd6f 	bl	40abfa <__lo0bits>
  40b11c:	9b01      	ldr	r3, [sp, #4]
  40b11e:	617b      	str	r3, [r7, #20]
  40b120:	2101      	movs	r1, #1
  40b122:	6139      	str	r1, [r7, #16]
  40b124:	3020      	adds	r0, #32
  40b126:	e7e5      	b.n	40b0f4 <__d2b+0x54>
  40b128:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40b12c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b130:	6030      	str	r0, [r6, #0]
  40b132:	6918      	ldr	r0, [r3, #16]
  40b134:	f7ff fd42 	bl	40abbc <__hi0bits>
  40b138:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40b13c:	e7e1      	b.n	40b102 <__d2b+0x62>

0040b13e <__ratio>:
  40b13e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
  40b142:	4688      	mov	r8, r1
  40b144:	4669      	mov	r1, sp
  40b146:	4681      	mov	r9, r0
  40b148:	f7ff ff58 	bl	40affc <__b2d>
  40b14c:	460d      	mov	r5, r1
  40b14e:	4604      	mov	r4, r0
  40b150:	a901      	add	r1, sp, #4
  40b152:	4640      	mov	r0, r8
  40b154:	f7ff ff52 	bl	40affc <__b2d>
  40b158:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40b15c:	f8d8 2010 	ldr.w	r2, [r8, #16]
  40b160:	9e00      	ldr	r6, [sp, #0]
  40b162:	1a9a      	subs	r2, r3, r2
  40b164:	9b01      	ldr	r3, [sp, #4]
  40b166:	1af3      	subs	r3, r6, r3
  40b168:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  40b16c:	2b00      	cmp	r3, #0
  40b16e:	bfd6      	itet	le
  40b170:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
  40b174:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  40b178:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
  40b17c:	4602      	mov	r2, r0
  40b17e:	460b      	mov	r3, r1
  40b180:	4620      	mov	r0, r4
  40b182:	4629      	mov	r1, r5
  40b184:	f000 fea8 	bl	40bed8 <__aeabi_ddiv>
  40b188:	b002      	add	sp, #8
  40b18a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040b18e <__copybits>:
  40b18e:	3901      	subs	r1, #1
  40b190:	b510      	push	{r4, lr}
  40b192:	1149      	asrs	r1, r1, #5
  40b194:	6914      	ldr	r4, [r2, #16]
  40b196:	3101      	adds	r1, #1
  40b198:	f102 0314 	add.w	r3, r2, #20
  40b19c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40b1a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  40b1a4:	42a3      	cmp	r3, r4
  40b1a6:	4602      	mov	r2, r0
  40b1a8:	d303      	bcc.n	40b1b2 <__copybits+0x24>
  40b1aa:	2300      	movs	r3, #0
  40b1ac:	428a      	cmp	r2, r1
  40b1ae:	d305      	bcc.n	40b1bc <__copybits+0x2e>
  40b1b0:	bd10      	pop	{r4, pc}
  40b1b2:	f853 2b04 	ldr.w	r2, [r3], #4
  40b1b6:	f840 2b04 	str.w	r2, [r0], #4
  40b1ba:	e7f3      	b.n	40b1a4 <__copybits+0x16>
  40b1bc:	f842 3b04 	str.w	r3, [r2], #4
  40b1c0:	e7f4      	b.n	40b1ac <__copybits+0x1e>

0040b1c2 <__any_on>:
  40b1c2:	f100 0214 	add.w	r2, r0, #20
  40b1c6:	6900      	ldr	r0, [r0, #16]
  40b1c8:	114b      	asrs	r3, r1, #5
  40b1ca:	4298      	cmp	r0, r3
  40b1cc:	b510      	push	{r4, lr}
  40b1ce:	db11      	blt.n	40b1f4 <__any_on+0x32>
  40b1d0:	dd0a      	ble.n	40b1e8 <__any_on+0x26>
  40b1d2:	f011 011f 	ands.w	r1, r1, #31
  40b1d6:	d007      	beq.n	40b1e8 <__any_on+0x26>
  40b1d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  40b1dc:	fa24 f001 	lsr.w	r0, r4, r1
  40b1e0:	fa00 f101 	lsl.w	r1, r0, r1
  40b1e4:	428c      	cmp	r4, r1
  40b1e6:	d10b      	bne.n	40b200 <__any_on+0x3e>
  40b1e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40b1ec:	4293      	cmp	r3, r2
  40b1ee:	d803      	bhi.n	40b1f8 <__any_on+0x36>
  40b1f0:	2000      	movs	r0, #0
  40b1f2:	bd10      	pop	{r4, pc}
  40b1f4:	4603      	mov	r3, r0
  40b1f6:	e7f7      	b.n	40b1e8 <__any_on+0x26>
  40b1f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40b1fc:	2900      	cmp	r1, #0
  40b1fe:	d0f5      	beq.n	40b1ec <__any_on+0x2a>
  40b200:	2001      	movs	r0, #1
  40b202:	bd10      	pop	{r4, pc}

0040b204 <_calloc_r>:
  40b204:	b538      	push	{r3, r4, r5, lr}
  40b206:	fb02 f401 	mul.w	r4, r2, r1
  40b20a:	4621      	mov	r1, r4
  40b20c:	f7fc fb24 	bl	407858 <_malloc_r>
  40b210:	4605      	mov	r5, r0
  40b212:	b118      	cbz	r0, 40b21c <_calloc_r+0x18>
  40b214:	4622      	mov	r2, r4
  40b216:	2100      	movs	r1, #0
  40b218:	f7fc fb15 	bl	407846 <memset>
  40b21c:	4628      	mov	r0, r5
  40b21e:	bd38      	pop	{r3, r4, r5, pc}

0040b220 <_free_r>:
  40b220:	b538      	push	{r3, r4, r5, lr}
  40b222:	4605      	mov	r5, r0
  40b224:	2900      	cmp	r1, #0
  40b226:	d045      	beq.n	40b2b4 <_free_r+0x94>
  40b228:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40b22c:	1f0c      	subs	r4, r1, #4
  40b22e:	2b00      	cmp	r3, #0
  40b230:	bfb8      	it	lt
  40b232:	18e4      	addlt	r4, r4, r3
  40b234:	f7ff fbfc 	bl	40aa30 <__malloc_lock>
  40b238:	4a1f      	ldr	r2, [pc, #124]	; (40b2b8 <_free_r+0x98>)
  40b23a:	6813      	ldr	r3, [r2, #0]
  40b23c:	4610      	mov	r0, r2
  40b23e:	b933      	cbnz	r3, 40b24e <_free_r+0x2e>
  40b240:	6063      	str	r3, [r4, #4]
  40b242:	6014      	str	r4, [r2, #0]
  40b244:	4628      	mov	r0, r5
  40b246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b24a:	f7ff bbf2 	b.w	40aa32 <__malloc_unlock>
  40b24e:	42a3      	cmp	r3, r4
  40b250:	d90c      	bls.n	40b26c <_free_r+0x4c>
  40b252:	6821      	ldr	r1, [r4, #0]
  40b254:	1862      	adds	r2, r4, r1
  40b256:	4293      	cmp	r3, r2
  40b258:	bf04      	itt	eq
  40b25a:	681a      	ldreq	r2, [r3, #0]
  40b25c:	685b      	ldreq	r3, [r3, #4]
  40b25e:	6063      	str	r3, [r4, #4]
  40b260:	bf04      	itt	eq
  40b262:	1852      	addeq	r2, r2, r1
  40b264:	6022      	streq	r2, [r4, #0]
  40b266:	6004      	str	r4, [r0, #0]
  40b268:	e7ec      	b.n	40b244 <_free_r+0x24>
  40b26a:	4613      	mov	r3, r2
  40b26c:	685a      	ldr	r2, [r3, #4]
  40b26e:	b10a      	cbz	r2, 40b274 <_free_r+0x54>
  40b270:	42a2      	cmp	r2, r4
  40b272:	d9fa      	bls.n	40b26a <_free_r+0x4a>
  40b274:	6819      	ldr	r1, [r3, #0]
  40b276:	1858      	adds	r0, r3, r1
  40b278:	42a0      	cmp	r0, r4
  40b27a:	d10b      	bne.n	40b294 <_free_r+0x74>
  40b27c:	6820      	ldr	r0, [r4, #0]
  40b27e:	4401      	add	r1, r0
  40b280:	1858      	adds	r0, r3, r1
  40b282:	4282      	cmp	r2, r0
  40b284:	6019      	str	r1, [r3, #0]
  40b286:	d1dd      	bne.n	40b244 <_free_r+0x24>
  40b288:	6810      	ldr	r0, [r2, #0]
  40b28a:	6852      	ldr	r2, [r2, #4]
  40b28c:	605a      	str	r2, [r3, #4]
  40b28e:	4401      	add	r1, r0
  40b290:	6019      	str	r1, [r3, #0]
  40b292:	e7d7      	b.n	40b244 <_free_r+0x24>
  40b294:	d902      	bls.n	40b29c <_free_r+0x7c>
  40b296:	230c      	movs	r3, #12
  40b298:	602b      	str	r3, [r5, #0]
  40b29a:	e7d3      	b.n	40b244 <_free_r+0x24>
  40b29c:	6820      	ldr	r0, [r4, #0]
  40b29e:	1821      	adds	r1, r4, r0
  40b2a0:	428a      	cmp	r2, r1
  40b2a2:	bf04      	itt	eq
  40b2a4:	6811      	ldreq	r1, [r2, #0]
  40b2a6:	6852      	ldreq	r2, [r2, #4]
  40b2a8:	6062      	str	r2, [r4, #4]
  40b2aa:	bf04      	itt	eq
  40b2ac:	1809      	addeq	r1, r1, r0
  40b2ae:	6021      	streq	r1, [r4, #0]
  40b2b0:	605c      	str	r4, [r3, #4]
  40b2b2:	e7c7      	b.n	40b244 <_free_r+0x24>
  40b2b4:	bd38      	pop	{r3, r4, r5, pc}
  40b2b6:	bf00      	nop
  40b2b8:	20430764 	.word	0x20430764

0040b2bc <__ssputs_r>:
  40b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b2c0:	688e      	ldr	r6, [r1, #8]
  40b2c2:	429e      	cmp	r6, r3
  40b2c4:	4682      	mov	sl, r0
  40b2c6:	460c      	mov	r4, r1
  40b2c8:	4691      	mov	r9, r2
  40b2ca:	4698      	mov	r8, r3
  40b2cc:	d835      	bhi.n	40b33a <__ssputs_r+0x7e>
  40b2ce:	898a      	ldrh	r2, [r1, #12]
  40b2d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
  40b2d4:	d031      	beq.n	40b33a <__ssputs_r+0x7e>
  40b2d6:	6825      	ldr	r5, [r4, #0]
  40b2d8:	6909      	ldr	r1, [r1, #16]
  40b2da:	1a6f      	subs	r7, r5, r1
  40b2dc:	6965      	ldr	r5, [r4, #20]
  40b2de:	2302      	movs	r3, #2
  40b2e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40b2e4:	fb95 f5f3 	sdiv	r5, r5, r3
  40b2e8:	f108 0301 	add.w	r3, r8, #1
  40b2ec:	443b      	add	r3, r7
  40b2ee:	429d      	cmp	r5, r3
  40b2f0:	bf38      	it	cc
  40b2f2:	461d      	movcc	r5, r3
  40b2f4:	0553      	lsls	r3, r2, #21
  40b2f6:	d531      	bpl.n	40b35c <__ssputs_r+0xa0>
  40b2f8:	4629      	mov	r1, r5
  40b2fa:	f7fc faad 	bl	407858 <_malloc_r>
  40b2fe:	4606      	mov	r6, r0
  40b300:	b950      	cbnz	r0, 40b318 <__ssputs_r+0x5c>
  40b302:	230c      	movs	r3, #12
  40b304:	f8ca 3000 	str.w	r3, [sl]
  40b308:	89a3      	ldrh	r3, [r4, #12]
  40b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b30e:	81a3      	strh	r3, [r4, #12]
  40b310:	f04f 30ff 	mov.w	r0, #4294967295
  40b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b318:	463a      	mov	r2, r7
  40b31a:	6921      	ldr	r1, [r4, #16]
  40b31c:	f7fc fa88 	bl	407830 <memcpy>
  40b320:	89a3      	ldrh	r3, [r4, #12]
  40b322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40b326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b32a:	81a3      	strh	r3, [r4, #12]
  40b32c:	6126      	str	r6, [r4, #16]
  40b32e:	6165      	str	r5, [r4, #20]
  40b330:	443e      	add	r6, r7
  40b332:	1bed      	subs	r5, r5, r7
  40b334:	6026      	str	r6, [r4, #0]
  40b336:	60a5      	str	r5, [r4, #8]
  40b338:	4646      	mov	r6, r8
  40b33a:	4546      	cmp	r6, r8
  40b33c:	bf28      	it	cs
  40b33e:	4646      	movcs	r6, r8
  40b340:	4632      	mov	r2, r6
  40b342:	4649      	mov	r1, r9
  40b344:	6820      	ldr	r0, [r4, #0]
  40b346:	f000 fa9b 	bl	40b880 <memmove>
  40b34a:	68a3      	ldr	r3, [r4, #8]
  40b34c:	1b9b      	subs	r3, r3, r6
  40b34e:	60a3      	str	r3, [r4, #8]
  40b350:	6823      	ldr	r3, [r4, #0]
  40b352:	441e      	add	r6, r3
  40b354:	6026      	str	r6, [r4, #0]
  40b356:	2000      	movs	r0, #0
  40b358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b35c:	462a      	mov	r2, r5
  40b35e:	f000 faa9 	bl	40b8b4 <_realloc_r>
  40b362:	4606      	mov	r6, r0
  40b364:	2800      	cmp	r0, #0
  40b366:	d1e1      	bne.n	40b32c <__ssputs_r+0x70>
  40b368:	6921      	ldr	r1, [r4, #16]
  40b36a:	4650      	mov	r0, sl
  40b36c:	f7ff ff58 	bl	40b220 <_free_r>
  40b370:	e7c7      	b.n	40b302 <__ssputs_r+0x46>
	...

0040b374 <_svfiprintf_r>:
  40b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b378:	b09d      	sub	sp, #116	; 0x74
  40b37a:	4680      	mov	r8, r0
  40b37c:	9303      	str	r3, [sp, #12]
  40b37e:	898b      	ldrh	r3, [r1, #12]
  40b380:	061c      	lsls	r4, r3, #24
  40b382:	460d      	mov	r5, r1
  40b384:	4616      	mov	r6, r2
  40b386:	d50f      	bpl.n	40b3a8 <_svfiprintf_r+0x34>
  40b388:	690b      	ldr	r3, [r1, #16]
  40b38a:	b96b      	cbnz	r3, 40b3a8 <_svfiprintf_r+0x34>
  40b38c:	2140      	movs	r1, #64	; 0x40
  40b38e:	f7fc fa63 	bl	407858 <_malloc_r>
  40b392:	6028      	str	r0, [r5, #0]
  40b394:	6128      	str	r0, [r5, #16]
  40b396:	b928      	cbnz	r0, 40b3a4 <_svfiprintf_r+0x30>
  40b398:	230c      	movs	r3, #12
  40b39a:	f8c8 3000 	str.w	r3, [r8]
  40b39e:	f04f 30ff 	mov.w	r0, #4294967295
  40b3a2:	e0c5      	b.n	40b530 <_svfiprintf_r+0x1bc>
  40b3a4:	2340      	movs	r3, #64	; 0x40
  40b3a6:	616b      	str	r3, [r5, #20]
  40b3a8:	2300      	movs	r3, #0
  40b3aa:	9309      	str	r3, [sp, #36]	; 0x24
  40b3ac:	2320      	movs	r3, #32
  40b3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40b3b2:	2330      	movs	r3, #48	; 0x30
  40b3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40b3b8:	f04f 0b01 	mov.w	fp, #1
  40b3bc:	4637      	mov	r7, r6
  40b3be:	463c      	mov	r4, r7
  40b3c0:	f814 3b01 	ldrb.w	r3, [r4], #1
  40b3c4:	2b00      	cmp	r3, #0
  40b3c6:	d13c      	bne.n	40b442 <_svfiprintf_r+0xce>
  40b3c8:	ebb7 0a06 	subs.w	sl, r7, r6
  40b3cc:	d00b      	beq.n	40b3e6 <_svfiprintf_r+0x72>
  40b3ce:	4653      	mov	r3, sl
  40b3d0:	4632      	mov	r2, r6
  40b3d2:	4629      	mov	r1, r5
  40b3d4:	4640      	mov	r0, r8
  40b3d6:	f7ff ff71 	bl	40b2bc <__ssputs_r>
  40b3da:	3001      	adds	r0, #1
  40b3dc:	f000 80a3 	beq.w	40b526 <_svfiprintf_r+0x1b2>
  40b3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b3e2:	4453      	add	r3, sl
  40b3e4:	9309      	str	r3, [sp, #36]	; 0x24
  40b3e6:	783b      	ldrb	r3, [r7, #0]
  40b3e8:	2b00      	cmp	r3, #0
  40b3ea:	f000 809c 	beq.w	40b526 <_svfiprintf_r+0x1b2>
  40b3ee:	2300      	movs	r3, #0
  40b3f0:	f04f 32ff 	mov.w	r2, #4294967295
  40b3f4:	9304      	str	r3, [sp, #16]
  40b3f6:	9307      	str	r3, [sp, #28]
  40b3f8:	9205      	str	r2, [sp, #20]
  40b3fa:	9306      	str	r3, [sp, #24]
  40b3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40b400:	931a      	str	r3, [sp, #104]	; 0x68
  40b402:	2205      	movs	r2, #5
  40b404:	7821      	ldrb	r1, [r4, #0]
  40b406:	4850      	ldr	r0, [pc, #320]	; (40b548 <_svfiprintf_r+0x1d4>)
  40b408:	f7fc f9c2 	bl	407790 <memchr>
  40b40c:	1c67      	adds	r7, r4, #1
  40b40e:	9b04      	ldr	r3, [sp, #16]
  40b410:	b9d8      	cbnz	r0, 40b44a <_svfiprintf_r+0xd6>
  40b412:	06d9      	lsls	r1, r3, #27
  40b414:	bf44      	itt	mi
  40b416:	2220      	movmi	r2, #32
  40b418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40b41c:	071a      	lsls	r2, r3, #28
  40b41e:	bf44      	itt	mi
  40b420:	222b      	movmi	r2, #43	; 0x2b
  40b422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40b426:	7822      	ldrb	r2, [r4, #0]
  40b428:	2a2a      	cmp	r2, #42	; 0x2a
  40b42a:	d016      	beq.n	40b45a <_svfiprintf_r+0xe6>
  40b42c:	9a07      	ldr	r2, [sp, #28]
  40b42e:	2100      	movs	r1, #0
  40b430:	200a      	movs	r0, #10
  40b432:	4627      	mov	r7, r4
  40b434:	3401      	adds	r4, #1
  40b436:	783b      	ldrb	r3, [r7, #0]
  40b438:	3b30      	subs	r3, #48	; 0x30
  40b43a:	2b09      	cmp	r3, #9
  40b43c:	d951      	bls.n	40b4e2 <_svfiprintf_r+0x16e>
  40b43e:	b1c9      	cbz	r1, 40b474 <_svfiprintf_r+0x100>
  40b440:	e011      	b.n	40b466 <_svfiprintf_r+0xf2>
  40b442:	2b25      	cmp	r3, #37	; 0x25
  40b444:	d0c0      	beq.n	40b3c8 <_svfiprintf_r+0x54>
  40b446:	4627      	mov	r7, r4
  40b448:	e7b9      	b.n	40b3be <_svfiprintf_r+0x4a>
  40b44a:	4a3f      	ldr	r2, [pc, #252]	; (40b548 <_svfiprintf_r+0x1d4>)
  40b44c:	1a80      	subs	r0, r0, r2
  40b44e:	fa0b f000 	lsl.w	r0, fp, r0
  40b452:	4318      	orrs	r0, r3
  40b454:	9004      	str	r0, [sp, #16]
  40b456:	463c      	mov	r4, r7
  40b458:	e7d3      	b.n	40b402 <_svfiprintf_r+0x8e>
  40b45a:	9a03      	ldr	r2, [sp, #12]
  40b45c:	1d11      	adds	r1, r2, #4
  40b45e:	6812      	ldr	r2, [r2, #0]
  40b460:	9103      	str	r1, [sp, #12]
  40b462:	2a00      	cmp	r2, #0
  40b464:	db01      	blt.n	40b46a <_svfiprintf_r+0xf6>
  40b466:	9207      	str	r2, [sp, #28]
  40b468:	e004      	b.n	40b474 <_svfiprintf_r+0x100>
  40b46a:	4252      	negs	r2, r2
  40b46c:	f043 0302 	orr.w	r3, r3, #2
  40b470:	9207      	str	r2, [sp, #28]
  40b472:	9304      	str	r3, [sp, #16]
  40b474:	783b      	ldrb	r3, [r7, #0]
  40b476:	2b2e      	cmp	r3, #46	; 0x2e
  40b478:	d10e      	bne.n	40b498 <_svfiprintf_r+0x124>
  40b47a:	787b      	ldrb	r3, [r7, #1]
  40b47c:	2b2a      	cmp	r3, #42	; 0x2a
  40b47e:	f107 0101 	add.w	r1, r7, #1
  40b482:	d132      	bne.n	40b4ea <_svfiprintf_r+0x176>
  40b484:	9b03      	ldr	r3, [sp, #12]
  40b486:	1d1a      	adds	r2, r3, #4
  40b488:	681b      	ldr	r3, [r3, #0]
  40b48a:	9203      	str	r2, [sp, #12]
  40b48c:	2b00      	cmp	r3, #0
  40b48e:	bfb8      	it	lt
  40b490:	f04f 33ff 	movlt.w	r3, #4294967295
  40b494:	3702      	adds	r7, #2
  40b496:	9305      	str	r3, [sp, #20]
  40b498:	4c2c      	ldr	r4, [pc, #176]	; (40b54c <_svfiprintf_r+0x1d8>)
  40b49a:	7839      	ldrb	r1, [r7, #0]
  40b49c:	2203      	movs	r2, #3
  40b49e:	4620      	mov	r0, r4
  40b4a0:	f7fc f976 	bl	407790 <memchr>
  40b4a4:	b138      	cbz	r0, 40b4b6 <_svfiprintf_r+0x142>
  40b4a6:	2340      	movs	r3, #64	; 0x40
  40b4a8:	1b00      	subs	r0, r0, r4
  40b4aa:	fa03 f000 	lsl.w	r0, r3, r0
  40b4ae:	9b04      	ldr	r3, [sp, #16]
  40b4b0:	4303      	orrs	r3, r0
  40b4b2:	9304      	str	r3, [sp, #16]
  40b4b4:	3701      	adds	r7, #1
  40b4b6:	7839      	ldrb	r1, [r7, #0]
  40b4b8:	4825      	ldr	r0, [pc, #148]	; (40b550 <_svfiprintf_r+0x1dc>)
  40b4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40b4be:	2206      	movs	r2, #6
  40b4c0:	1c7e      	adds	r6, r7, #1
  40b4c2:	f7fc f965 	bl	407790 <memchr>
  40b4c6:	2800      	cmp	r0, #0
  40b4c8:	d035      	beq.n	40b536 <_svfiprintf_r+0x1c2>
  40b4ca:	4b22      	ldr	r3, [pc, #136]	; (40b554 <_svfiprintf_r+0x1e0>)
  40b4cc:	b9fb      	cbnz	r3, 40b50e <_svfiprintf_r+0x19a>
  40b4ce:	9b03      	ldr	r3, [sp, #12]
  40b4d0:	3307      	adds	r3, #7
  40b4d2:	f023 0307 	bic.w	r3, r3, #7
  40b4d6:	3308      	adds	r3, #8
  40b4d8:	9303      	str	r3, [sp, #12]
  40b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b4dc:	444b      	add	r3, r9
  40b4de:	9309      	str	r3, [sp, #36]	; 0x24
  40b4e0:	e76c      	b.n	40b3bc <_svfiprintf_r+0x48>
  40b4e2:	fb00 3202 	mla	r2, r0, r2, r3
  40b4e6:	2101      	movs	r1, #1
  40b4e8:	e7a3      	b.n	40b432 <_svfiprintf_r+0xbe>
  40b4ea:	2300      	movs	r3, #0
  40b4ec:	9305      	str	r3, [sp, #20]
  40b4ee:	4618      	mov	r0, r3
  40b4f0:	240a      	movs	r4, #10
  40b4f2:	460f      	mov	r7, r1
  40b4f4:	3101      	adds	r1, #1
  40b4f6:	783a      	ldrb	r2, [r7, #0]
  40b4f8:	3a30      	subs	r2, #48	; 0x30
  40b4fa:	2a09      	cmp	r2, #9
  40b4fc:	d903      	bls.n	40b506 <_svfiprintf_r+0x192>
  40b4fe:	2b00      	cmp	r3, #0
  40b500:	d0ca      	beq.n	40b498 <_svfiprintf_r+0x124>
  40b502:	9005      	str	r0, [sp, #20]
  40b504:	e7c8      	b.n	40b498 <_svfiprintf_r+0x124>
  40b506:	fb04 2000 	mla	r0, r4, r0, r2
  40b50a:	2301      	movs	r3, #1
  40b50c:	e7f1      	b.n	40b4f2 <_svfiprintf_r+0x17e>
  40b50e:	ab03      	add	r3, sp, #12
  40b510:	9300      	str	r3, [sp, #0]
  40b512:	462a      	mov	r2, r5
  40b514:	4b10      	ldr	r3, [pc, #64]	; (40b558 <_svfiprintf_r+0x1e4>)
  40b516:	a904      	add	r1, sp, #16
  40b518:	4640      	mov	r0, r8
  40b51a:	f7fc fa8d 	bl	407a38 <_printf_float>
  40b51e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b522:	4681      	mov	r9, r0
  40b524:	d1d9      	bne.n	40b4da <_svfiprintf_r+0x166>
  40b526:	89ab      	ldrh	r3, [r5, #12]
  40b528:	065b      	lsls	r3, r3, #25
  40b52a:	f53f af38 	bmi.w	40b39e <_svfiprintf_r+0x2a>
  40b52e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b530:	b01d      	add	sp, #116	; 0x74
  40b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b536:	ab03      	add	r3, sp, #12
  40b538:	9300      	str	r3, [sp, #0]
  40b53a:	462a      	mov	r2, r5
  40b53c:	4b06      	ldr	r3, [pc, #24]	; (40b558 <_svfiprintf_r+0x1e4>)
  40b53e:	a904      	add	r1, sp, #16
  40b540:	4640      	mov	r0, r8
  40b542:	f7fc fd27 	bl	407f94 <_printf_i>
  40b546:	e7ea      	b.n	40b51e <_svfiprintf_r+0x1aa>
  40b548:	0040cdec 	.word	0x0040cdec
  40b54c:	0040cdf2 	.word	0x0040cdf2
  40b550:	0040cdf6 	.word	0x0040cdf6
  40b554:	00407a39 	.word	0x00407a39
  40b558:	0040b2bd 	.word	0x0040b2bd

0040b55c <__sfputc_r>:
  40b55c:	6893      	ldr	r3, [r2, #8]
  40b55e:	3b01      	subs	r3, #1
  40b560:	2b00      	cmp	r3, #0
  40b562:	b410      	push	{r4}
  40b564:	6093      	str	r3, [r2, #8]
  40b566:	da08      	bge.n	40b57a <__sfputc_r+0x1e>
  40b568:	6994      	ldr	r4, [r2, #24]
  40b56a:	42a3      	cmp	r3, r4
  40b56c:	db02      	blt.n	40b574 <__sfputc_r+0x18>
  40b56e:	b2cb      	uxtb	r3, r1
  40b570:	2b0a      	cmp	r3, #10
  40b572:	d102      	bne.n	40b57a <__sfputc_r+0x1e>
  40b574:	bc10      	pop	{r4}
  40b576:	f7fd be99 	b.w	4092ac <__swbuf_r>
  40b57a:	6813      	ldr	r3, [r2, #0]
  40b57c:	1c58      	adds	r0, r3, #1
  40b57e:	6010      	str	r0, [r2, #0]
  40b580:	7019      	strb	r1, [r3, #0]
  40b582:	b2c8      	uxtb	r0, r1
  40b584:	bc10      	pop	{r4}
  40b586:	4770      	bx	lr

0040b588 <__sfputs_r>:
  40b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b58a:	4606      	mov	r6, r0
  40b58c:	460f      	mov	r7, r1
  40b58e:	4614      	mov	r4, r2
  40b590:	18d5      	adds	r5, r2, r3
  40b592:	42ac      	cmp	r4, r5
  40b594:	d101      	bne.n	40b59a <__sfputs_r+0x12>
  40b596:	2000      	movs	r0, #0
  40b598:	e007      	b.n	40b5aa <__sfputs_r+0x22>
  40b59a:	463a      	mov	r2, r7
  40b59c:	f814 1b01 	ldrb.w	r1, [r4], #1
  40b5a0:	4630      	mov	r0, r6
  40b5a2:	f7ff ffdb 	bl	40b55c <__sfputc_r>
  40b5a6:	1c43      	adds	r3, r0, #1
  40b5a8:	d1f3      	bne.n	40b592 <__sfputs_r+0xa>
  40b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040b5ac <_vfiprintf_r>:
  40b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b5b0:	b09d      	sub	sp, #116	; 0x74
  40b5b2:	460c      	mov	r4, r1
  40b5b4:	4617      	mov	r7, r2
  40b5b6:	9303      	str	r3, [sp, #12]
  40b5b8:	4606      	mov	r6, r0
  40b5ba:	b118      	cbz	r0, 40b5c4 <_vfiprintf_r+0x18>
  40b5bc:	6983      	ldr	r3, [r0, #24]
  40b5be:	b90b      	cbnz	r3, 40b5c4 <_vfiprintf_r+0x18>
  40b5c0:	f7fc f81c 	bl	4075fc <__sinit>
  40b5c4:	4b7c      	ldr	r3, [pc, #496]	; (40b7b8 <_vfiprintf_r+0x20c>)
  40b5c6:	429c      	cmp	r4, r3
  40b5c8:	d157      	bne.n	40b67a <_vfiprintf_r+0xce>
  40b5ca:	6874      	ldr	r4, [r6, #4]
  40b5cc:	89a3      	ldrh	r3, [r4, #12]
  40b5ce:	0718      	lsls	r0, r3, #28
  40b5d0:	d55d      	bpl.n	40b68e <_vfiprintf_r+0xe2>
  40b5d2:	6923      	ldr	r3, [r4, #16]
  40b5d4:	2b00      	cmp	r3, #0
  40b5d6:	d05a      	beq.n	40b68e <_vfiprintf_r+0xe2>
  40b5d8:	2300      	movs	r3, #0
  40b5da:	9309      	str	r3, [sp, #36]	; 0x24
  40b5dc:	2320      	movs	r3, #32
  40b5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40b5e2:	2330      	movs	r3, #48	; 0x30
  40b5e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40b5e8:	f04f 0b01 	mov.w	fp, #1
  40b5ec:	46b8      	mov	r8, r7
  40b5ee:	4645      	mov	r5, r8
  40b5f0:	f815 3b01 	ldrb.w	r3, [r5], #1
  40b5f4:	2b00      	cmp	r3, #0
  40b5f6:	d155      	bne.n	40b6a4 <_vfiprintf_r+0xf8>
  40b5f8:	ebb8 0a07 	subs.w	sl, r8, r7
  40b5fc:	d00b      	beq.n	40b616 <_vfiprintf_r+0x6a>
  40b5fe:	4653      	mov	r3, sl
  40b600:	463a      	mov	r2, r7
  40b602:	4621      	mov	r1, r4
  40b604:	4630      	mov	r0, r6
  40b606:	f7ff ffbf 	bl	40b588 <__sfputs_r>
  40b60a:	3001      	adds	r0, #1
  40b60c:	f000 80c4 	beq.w	40b798 <_vfiprintf_r+0x1ec>
  40b610:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b612:	4453      	add	r3, sl
  40b614:	9309      	str	r3, [sp, #36]	; 0x24
  40b616:	f898 3000 	ldrb.w	r3, [r8]
  40b61a:	2b00      	cmp	r3, #0
  40b61c:	f000 80bc 	beq.w	40b798 <_vfiprintf_r+0x1ec>
  40b620:	2300      	movs	r3, #0
  40b622:	f04f 32ff 	mov.w	r2, #4294967295
  40b626:	9304      	str	r3, [sp, #16]
  40b628:	9307      	str	r3, [sp, #28]
  40b62a:	9205      	str	r2, [sp, #20]
  40b62c:	9306      	str	r3, [sp, #24]
  40b62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40b632:	931a      	str	r3, [sp, #104]	; 0x68
  40b634:	2205      	movs	r2, #5
  40b636:	7829      	ldrb	r1, [r5, #0]
  40b638:	4860      	ldr	r0, [pc, #384]	; (40b7bc <_vfiprintf_r+0x210>)
  40b63a:	f7fc f8a9 	bl	407790 <memchr>
  40b63e:	f105 0801 	add.w	r8, r5, #1
  40b642:	9b04      	ldr	r3, [sp, #16]
  40b644:	2800      	cmp	r0, #0
  40b646:	d131      	bne.n	40b6ac <_vfiprintf_r+0x100>
  40b648:	06d9      	lsls	r1, r3, #27
  40b64a:	bf44      	itt	mi
  40b64c:	2220      	movmi	r2, #32
  40b64e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40b652:	071a      	lsls	r2, r3, #28
  40b654:	bf44      	itt	mi
  40b656:	222b      	movmi	r2, #43	; 0x2b
  40b658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40b65c:	782a      	ldrb	r2, [r5, #0]
  40b65e:	2a2a      	cmp	r2, #42	; 0x2a
  40b660:	d02c      	beq.n	40b6bc <_vfiprintf_r+0x110>
  40b662:	9a07      	ldr	r2, [sp, #28]
  40b664:	2100      	movs	r1, #0
  40b666:	200a      	movs	r0, #10
  40b668:	46a8      	mov	r8, r5
  40b66a:	3501      	adds	r5, #1
  40b66c:	f898 3000 	ldrb.w	r3, [r8]
  40b670:	3b30      	subs	r3, #48	; 0x30
  40b672:	2b09      	cmp	r3, #9
  40b674:	d96d      	bls.n	40b752 <_vfiprintf_r+0x1a6>
  40b676:	b371      	cbz	r1, 40b6d6 <_vfiprintf_r+0x12a>
  40b678:	e026      	b.n	40b6c8 <_vfiprintf_r+0x11c>
  40b67a:	4b51      	ldr	r3, [pc, #324]	; (40b7c0 <_vfiprintf_r+0x214>)
  40b67c:	429c      	cmp	r4, r3
  40b67e:	d101      	bne.n	40b684 <_vfiprintf_r+0xd8>
  40b680:	68b4      	ldr	r4, [r6, #8]
  40b682:	e7a3      	b.n	40b5cc <_vfiprintf_r+0x20>
  40b684:	4b4f      	ldr	r3, [pc, #316]	; (40b7c4 <_vfiprintf_r+0x218>)
  40b686:	429c      	cmp	r4, r3
  40b688:	bf08      	it	eq
  40b68a:	68f4      	ldreq	r4, [r6, #12]
  40b68c:	e79e      	b.n	40b5cc <_vfiprintf_r+0x20>
  40b68e:	4621      	mov	r1, r4
  40b690:	4630      	mov	r0, r6
  40b692:	f7fd fe6f 	bl	409374 <__swsetup_r>
  40b696:	2800      	cmp	r0, #0
  40b698:	d09e      	beq.n	40b5d8 <_vfiprintf_r+0x2c>
  40b69a:	f04f 30ff 	mov.w	r0, #4294967295
  40b69e:	b01d      	add	sp, #116	; 0x74
  40b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b6a4:	2b25      	cmp	r3, #37	; 0x25
  40b6a6:	d0a7      	beq.n	40b5f8 <_vfiprintf_r+0x4c>
  40b6a8:	46a8      	mov	r8, r5
  40b6aa:	e7a0      	b.n	40b5ee <_vfiprintf_r+0x42>
  40b6ac:	4a43      	ldr	r2, [pc, #268]	; (40b7bc <_vfiprintf_r+0x210>)
  40b6ae:	1a80      	subs	r0, r0, r2
  40b6b0:	fa0b f000 	lsl.w	r0, fp, r0
  40b6b4:	4318      	orrs	r0, r3
  40b6b6:	9004      	str	r0, [sp, #16]
  40b6b8:	4645      	mov	r5, r8
  40b6ba:	e7bb      	b.n	40b634 <_vfiprintf_r+0x88>
  40b6bc:	9a03      	ldr	r2, [sp, #12]
  40b6be:	1d11      	adds	r1, r2, #4
  40b6c0:	6812      	ldr	r2, [r2, #0]
  40b6c2:	9103      	str	r1, [sp, #12]
  40b6c4:	2a00      	cmp	r2, #0
  40b6c6:	db01      	blt.n	40b6cc <_vfiprintf_r+0x120>
  40b6c8:	9207      	str	r2, [sp, #28]
  40b6ca:	e004      	b.n	40b6d6 <_vfiprintf_r+0x12a>
  40b6cc:	4252      	negs	r2, r2
  40b6ce:	f043 0302 	orr.w	r3, r3, #2
  40b6d2:	9207      	str	r2, [sp, #28]
  40b6d4:	9304      	str	r3, [sp, #16]
  40b6d6:	f898 3000 	ldrb.w	r3, [r8]
  40b6da:	2b2e      	cmp	r3, #46	; 0x2e
  40b6dc:	d110      	bne.n	40b700 <_vfiprintf_r+0x154>
  40b6de:	f898 3001 	ldrb.w	r3, [r8, #1]
  40b6e2:	2b2a      	cmp	r3, #42	; 0x2a
  40b6e4:	f108 0101 	add.w	r1, r8, #1
  40b6e8:	d137      	bne.n	40b75a <_vfiprintf_r+0x1ae>
  40b6ea:	9b03      	ldr	r3, [sp, #12]
  40b6ec:	1d1a      	adds	r2, r3, #4
  40b6ee:	681b      	ldr	r3, [r3, #0]
  40b6f0:	9203      	str	r2, [sp, #12]
  40b6f2:	2b00      	cmp	r3, #0
  40b6f4:	bfb8      	it	lt
  40b6f6:	f04f 33ff 	movlt.w	r3, #4294967295
  40b6fa:	f108 0802 	add.w	r8, r8, #2
  40b6fe:	9305      	str	r3, [sp, #20]
  40b700:	4d31      	ldr	r5, [pc, #196]	; (40b7c8 <_vfiprintf_r+0x21c>)
  40b702:	f898 1000 	ldrb.w	r1, [r8]
  40b706:	2203      	movs	r2, #3
  40b708:	4628      	mov	r0, r5
  40b70a:	f7fc f841 	bl	407790 <memchr>
  40b70e:	b140      	cbz	r0, 40b722 <_vfiprintf_r+0x176>
  40b710:	2340      	movs	r3, #64	; 0x40
  40b712:	1b40      	subs	r0, r0, r5
  40b714:	fa03 f000 	lsl.w	r0, r3, r0
  40b718:	9b04      	ldr	r3, [sp, #16]
  40b71a:	4303      	orrs	r3, r0
  40b71c:	9304      	str	r3, [sp, #16]
  40b71e:	f108 0801 	add.w	r8, r8, #1
  40b722:	f898 1000 	ldrb.w	r1, [r8]
  40b726:	4829      	ldr	r0, [pc, #164]	; (40b7cc <_vfiprintf_r+0x220>)
  40b728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40b72c:	2206      	movs	r2, #6
  40b72e:	f108 0701 	add.w	r7, r8, #1
  40b732:	f7fc f82d 	bl	407790 <memchr>
  40b736:	2800      	cmp	r0, #0
  40b738:	d034      	beq.n	40b7a4 <_vfiprintf_r+0x1f8>
  40b73a:	4b25      	ldr	r3, [pc, #148]	; (40b7d0 <_vfiprintf_r+0x224>)
  40b73c:	bb03      	cbnz	r3, 40b780 <_vfiprintf_r+0x1d4>
  40b73e:	9b03      	ldr	r3, [sp, #12]
  40b740:	3307      	adds	r3, #7
  40b742:	f023 0307 	bic.w	r3, r3, #7
  40b746:	3308      	adds	r3, #8
  40b748:	9303      	str	r3, [sp, #12]
  40b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b74c:	444b      	add	r3, r9
  40b74e:	9309      	str	r3, [sp, #36]	; 0x24
  40b750:	e74c      	b.n	40b5ec <_vfiprintf_r+0x40>
  40b752:	fb00 3202 	mla	r2, r0, r2, r3
  40b756:	2101      	movs	r1, #1
  40b758:	e786      	b.n	40b668 <_vfiprintf_r+0xbc>
  40b75a:	2300      	movs	r3, #0
  40b75c:	9305      	str	r3, [sp, #20]
  40b75e:	4618      	mov	r0, r3
  40b760:	250a      	movs	r5, #10
  40b762:	4688      	mov	r8, r1
  40b764:	3101      	adds	r1, #1
  40b766:	f898 2000 	ldrb.w	r2, [r8]
  40b76a:	3a30      	subs	r2, #48	; 0x30
  40b76c:	2a09      	cmp	r2, #9
  40b76e:	d903      	bls.n	40b778 <_vfiprintf_r+0x1cc>
  40b770:	2b00      	cmp	r3, #0
  40b772:	d0c5      	beq.n	40b700 <_vfiprintf_r+0x154>
  40b774:	9005      	str	r0, [sp, #20]
  40b776:	e7c3      	b.n	40b700 <_vfiprintf_r+0x154>
  40b778:	fb05 2000 	mla	r0, r5, r0, r2
  40b77c:	2301      	movs	r3, #1
  40b77e:	e7f0      	b.n	40b762 <_vfiprintf_r+0x1b6>
  40b780:	ab03      	add	r3, sp, #12
  40b782:	9300      	str	r3, [sp, #0]
  40b784:	4622      	mov	r2, r4
  40b786:	4b13      	ldr	r3, [pc, #76]	; (40b7d4 <_vfiprintf_r+0x228>)
  40b788:	a904      	add	r1, sp, #16
  40b78a:	4630      	mov	r0, r6
  40b78c:	f7fc f954 	bl	407a38 <_printf_float>
  40b790:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b794:	4681      	mov	r9, r0
  40b796:	d1d8      	bne.n	40b74a <_vfiprintf_r+0x19e>
  40b798:	89a3      	ldrh	r3, [r4, #12]
  40b79a:	065b      	lsls	r3, r3, #25
  40b79c:	f53f af7d 	bmi.w	40b69a <_vfiprintf_r+0xee>
  40b7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b7a2:	e77c      	b.n	40b69e <_vfiprintf_r+0xf2>
  40b7a4:	ab03      	add	r3, sp, #12
  40b7a6:	9300      	str	r3, [sp, #0]
  40b7a8:	4622      	mov	r2, r4
  40b7aa:	4b0a      	ldr	r3, [pc, #40]	; (40b7d4 <_vfiprintf_r+0x228>)
  40b7ac:	a904      	add	r1, sp, #16
  40b7ae:	4630      	mov	r0, r6
  40b7b0:	f7fc fbf0 	bl	407f94 <_printf_i>
  40b7b4:	e7ec      	b.n	40b790 <_vfiprintf_r+0x1e4>
  40b7b6:	bf00      	nop
  40b7b8:	0040cc10 	.word	0x0040cc10
  40b7bc:	0040cdec 	.word	0x0040cdec
  40b7c0:	0040cc30 	.word	0x0040cc30
  40b7c4:	0040cbf0 	.word	0x0040cbf0
  40b7c8:	0040cdf2 	.word	0x0040cdf2
  40b7cc:	0040cdf6 	.word	0x0040cdf6
  40b7d0:	00407a39 	.word	0x00407a39
  40b7d4:	0040b589 	.word	0x0040b589

0040b7d8 <_read_r>:
  40b7d8:	b538      	push	{r3, r4, r5, lr}
  40b7da:	4c07      	ldr	r4, [pc, #28]	; (40b7f8 <_read_r+0x20>)
  40b7dc:	4605      	mov	r5, r0
  40b7de:	4608      	mov	r0, r1
  40b7e0:	4611      	mov	r1, r2
  40b7e2:	2200      	movs	r2, #0
  40b7e4:	6022      	str	r2, [r4, #0]
  40b7e6:	461a      	mov	r2, r3
  40b7e8:	f7fa f896 	bl	405918 <_read>
  40b7ec:	1c43      	adds	r3, r0, #1
  40b7ee:	d102      	bne.n	40b7f6 <_read_r+0x1e>
  40b7f0:	6823      	ldr	r3, [r4, #0]
  40b7f2:	b103      	cbz	r3, 40b7f6 <_read_r+0x1e>
  40b7f4:	602b      	str	r3, [r5, #0]
  40b7f6:	bd38      	pop	{r3, r4, r5, pc}
  40b7f8:	204308dc 	.word	0x204308dc

0040b7fc <strncmp>:
  40b7fc:	b510      	push	{r4, lr}
  40b7fe:	b16a      	cbz	r2, 40b81c <strncmp+0x20>
  40b800:	3901      	subs	r1, #1
  40b802:	1884      	adds	r4, r0, r2
  40b804:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b808:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  40b80c:	4293      	cmp	r3, r2
  40b80e:	d103      	bne.n	40b818 <strncmp+0x1c>
  40b810:	42a0      	cmp	r0, r4
  40b812:	d001      	beq.n	40b818 <strncmp+0x1c>
  40b814:	2b00      	cmp	r3, #0
  40b816:	d1f5      	bne.n	40b804 <strncmp+0x8>
  40b818:	1a98      	subs	r0, r3, r2
  40b81a:	bd10      	pop	{r4, pc}
  40b81c:	4610      	mov	r0, r2
  40b81e:	bd10      	pop	{r4, pc}

0040b820 <__ascii_wctomb>:
  40b820:	b149      	cbz	r1, 40b836 <__ascii_wctomb+0x16>
  40b822:	2aff      	cmp	r2, #255	; 0xff
  40b824:	bf85      	ittet	hi
  40b826:	238a      	movhi	r3, #138	; 0x8a
  40b828:	6003      	strhi	r3, [r0, #0]
  40b82a:	700a      	strbls	r2, [r1, #0]
  40b82c:	f04f 30ff 	movhi.w	r0, #4294967295
  40b830:	bf98      	it	ls
  40b832:	2001      	movls	r0, #1
  40b834:	4770      	bx	lr
  40b836:	4608      	mov	r0, r1
  40b838:	4770      	bx	lr
	...

0040b83c <_fstat_r>:
  40b83c:	b538      	push	{r3, r4, r5, lr}
  40b83e:	4c07      	ldr	r4, [pc, #28]	; (40b85c <_fstat_r+0x20>)
  40b840:	2300      	movs	r3, #0
  40b842:	4605      	mov	r5, r0
  40b844:	4608      	mov	r0, r1
  40b846:	4611      	mov	r1, r2
  40b848:	6023      	str	r3, [r4, #0]
  40b84a:	f7f8 f96c 	bl	403b26 <_fstat>
  40b84e:	1c43      	adds	r3, r0, #1
  40b850:	d102      	bne.n	40b858 <_fstat_r+0x1c>
  40b852:	6823      	ldr	r3, [r4, #0]
  40b854:	b103      	cbz	r3, 40b858 <_fstat_r+0x1c>
  40b856:	602b      	str	r3, [r5, #0]
  40b858:	bd38      	pop	{r3, r4, r5, pc}
  40b85a:	bf00      	nop
  40b85c:	204308dc 	.word	0x204308dc

0040b860 <_isatty_r>:
  40b860:	b538      	push	{r3, r4, r5, lr}
  40b862:	4c06      	ldr	r4, [pc, #24]	; (40b87c <_isatty_r+0x1c>)
  40b864:	2300      	movs	r3, #0
  40b866:	4605      	mov	r5, r0
  40b868:	4608      	mov	r0, r1
  40b86a:	6023      	str	r3, [r4, #0]
  40b86c:	f7f8 f960 	bl	403b30 <_isatty>
  40b870:	1c43      	adds	r3, r0, #1
  40b872:	d102      	bne.n	40b87a <_isatty_r+0x1a>
  40b874:	6823      	ldr	r3, [r4, #0]
  40b876:	b103      	cbz	r3, 40b87a <_isatty_r+0x1a>
  40b878:	602b      	str	r3, [r5, #0]
  40b87a:	bd38      	pop	{r3, r4, r5, pc}
  40b87c:	204308dc 	.word	0x204308dc

0040b880 <memmove>:
  40b880:	4288      	cmp	r0, r1
  40b882:	b510      	push	{r4, lr}
  40b884:	eb01 0302 	add.w	r3, r1, r2
  40b888:	d803      	bhi.n	40b892 <memmove+0x12>
  40b88a:	1e42      	subs	r2, r0, #1
  40b88c:	4299      	cmp	r1, r3
  40b88e:	d10c      	bne.n	40b8aa <memmove+0x2a>
  40b890:	bd10      	pop	{r4, pc}
  40b892:	4298      	cmp	r0, r3
  40b894:	d2f9      	bcs.n	40b88a <memmove+0xa>
  40b896:	1881      	adds	r1, r0, r2
  40b898:	1ad2      	subs	r2, r2, r3
  40b89a:	42d3      	cmn	r3, r2
  40b89c:	d100      	bne.n	40b8a0 <memmove+0x20>
  40b89e:	bd10      	pop	{r4, pc}
  40b8a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b8a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40b8a8:	e7f7      	b.n	40b89a <memmove+0x1a>
  40b8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b8ae:	f802 4f01 	strb.w	r4, [r2, #1]!
  40b8b2:	e7eb      	b.n	40b88c <memmove+0xc>

0040b8b4 <_realloc_r>:
  40b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b8b6:	4607      	mov	r7, r0
  40b8b8:	4614      	mov	r4, r2
  40b8ba:	460e      	mov	r6, r1
  40b8bc:	b921      	cbnz	r1, 40b8c8 <_realloc_r+0x14>
  40b8be:	4611      	mov	r1, r2
  40b8c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  40b8c4:	f7fb bfc8 	b.w	407858 <_malloc_r>
  40b8c8:	b922      	cbnz	r2, 40b8d4 <_realloc_r+0x20>
  40b8ca:	f7ff fca9 	bl	40b220 <_free_r>
  40b8ce:	4625      	mov	r5, r4
  40b8d0:	4628      	mov	r0, r5
  40b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b8d4:	f000 f814 	bl	40b900 <_malloc_usable_size_r>
  40b8d8:	4284      	cmp	r4, r0
  40b8da:	d90f      	bls.n	40b8fc <_realloc_r+0x48>
  40b8dc:	4621      	mov	r1, r4
  40b8de:	4638      	mov	r0, r7
  40b8e0:	f7fb ffba 	bl	407858 <_malloc_r>
  40b8e4:	4605      	mov	r5, r0
  40b8e6:	2800      	cmp	r0, #0
  40b8e8:	d0f2      	beq.n	40b8d0 <_realloc_r+0x1c>
  40b8ea:	4631      	mov	r1, r6
  40b8ec:	4622      	mov	r2, r4
  40b8ee:	f7fb ff9f 	bl	407830 <memcpy>
  40b8f2:	4631      	mov	r1, r6
  40b8f4:	4638      	mov	r0, r7
  40b8f6:	f7ff fc93 	bl	40b220 <_free_r>
  40b8fa:	e7e9      	b.n	40b8d0 <_realloc_r+0x1c>
  40b8fc:	4635      	mov	r5, r6
  40b8fe:	e7e7      	b.n	40b8d0 <_realloc_r+0x1c>

0040b900 <_malloc_usable_size_r>:
  40b900:	f851 0c04 	ldr.w	r0, [r1, #-4]
  40b904:	2800      	cmp	r0, #0
  40b906:	f1a0 0004 	sub.w	r0, r0, #4
  40b90a:	bfbc      	itt	lt
  40b90c:	580b      	ldrlt	r3, [r1, r0]
  40b90e:	18c0      	addlt	r0, r0, r3
  40b910:	4770      	bx	lr
	...

0040b914 <__aeabi_drsub>:
  40b914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40b918:	e002      	b.n	40b920 <__adddf3>
  40b91a:	bf00      	nop

0040b91c <__aeabi_dsub>:
  40b91c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040b920 <__adddf3>:
  40b920:	b530      	push	{r4, r5, lr}
  40b922:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40b926:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40b92a:	ea94 0f05 	teq	r4, r5
  40b92e:	bf08      	it	eq
  40b930:	ea90 0f02 	teqeq	r0, r2
  40b934:	bf1f      	itttt	ne
  40b936:	ea54 0c00 	orrsne.w	ip, r4, r0
  40b93a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40b93e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40b942:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b946:	f000 80e2 	beq.w	40bb0e <__adddf3+0x1ee>
  40b94a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40b94e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40b952:	bfb8      	it	lt
  40b954:	426d      	neglt	r5, r5
  40b956:	dd0c      	ble.n	40b972 <__adddf3+0x52>
  40b958:	442c      	add	r4, r5
  40b95a:	ea80 0202 	eor.w	r2, r0, r2
  40b95e:	ea81 0303 	eor.w	r3, r1, r3
  40b962:	ea82 0000 	eor.w	r0, r2, r0
  40b966:	ea83 0101 	eor.w	r1, r3, r1
  40b96a:	ea80 0202 	eor.w	r2, r0, r2
  40b96e:	ea81 0303 	eor.w	r3, r1, r3
  40b972:	2d36      	cmp	r5, #54	; 0x36
  40b974:	bf88      	it	hi
  40b976:	bd30      	pophi	{r4, r5, pc}
  40b978:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b97c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b980:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40b984:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40b988:	d002      	beq.n	40b990 <__adddf3+0x70>
  40b98a:	4240      	negs	r0, r0
  40b98c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b990:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40b994:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b998:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40b99c:	d002      	beq.n	40b9a4 <__adddf3+0x84>
  40b99e:	4252      	negs	r2, r2
  40b9a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b9a4:	ea94 0f05 	teq	r4, r5
  40b9a8:	f000 80a7 	beq.w	40bafa <__adddf3+0x1da>
  40b9ac:	f1a4 0401 	sub.w	r4, r4, #1
  40b9b0:	f1d5 0e20 	rsbs	lr, r5, #32
  40b9b4:	db0d      	blt.n	40b9d2 <__adddf3+0xb2>
  40b9b6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40b9ba:	fa22 f205 	lsr.w	r2, r2, r5
  40b9be:	1880      	adds	r0, r0, r2
  40b9c0:	f141 0100 	adc.w	r1, r1, #0
  40b9c4:	fa03 f20e 	lsl.w	r2, r3, lr
  40b9c8:	1880      	adds	r0, r0, r2
  40b9ca:	fa43 f305 	asr.w	r3, r3, r5
  40b9ce:	4159      	adcs	r1, r3
  40b9d0:	e00e      	b.n	40b9f0 <__adddf3+0xd0>
  40b9d2:	f1a5 0520 	sub.w	r5, r5, #32
  40b9d6:	f10e 0e20 	add.w	lr, lr, #32
  40b9da:	2a01      	cmp	r2, #1
  40b9dc:	fa03 fc0e 	lsl.w	ip, r3, lr
  40b9e0:	bf28      	it	cs
  40b9e2:	f04c 0c02 	orrcs.w	ip, ip, #2
  40b9e6:	fa43 f305 	asr.w	r3, r3, r5
  40b9ea:	18c0      	adds	r0, r0, r3
  40b9ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40b9f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b9f4:	d507      	bpl.n	40ba06 <__adddf3+0xe6>
  40b9f6:	f04f 0e00 	mov.w	lr, #0
  40b9fa:	f1dc 0c00 	rsbs	ip, ip, #0
  40b9fe:	eb7e 0000 	sbcs.w	r0, lr, r0
  40ba02:	eb6e 0101 	sbc.w	r1, lr, r1
  40ba06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ba0a:	d31b      	bcc.n	40ba44 <__adddf3+0x124>
  40ba0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40ba10:	d30c      	bcc.n	40ba2c <__adddf3+0x10c>
  40ba12:	0849      	lsrs	r1, r1, #1
  40ba14:	ea5f 0030 	movs.w	r0, r0, rrx
  40ba18:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40ba1c:	f104 0401 	add.w	r4, r4, #1
  40ba20:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40ba24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ba28:	f080 809a 	bcs.w	40bb60 <__adddf3+0x240>
  40ba2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ba30:	bf08      	it	eq
  40ba32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ba36:	f150 0000 	adcs.w	r0, r0, #0
  40ba3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ba3e:	ea41 0105 	orr.w	r1, r1, r5
  40ba42:	bd30      	pop	{r4, r5, pc}
  40ba44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40ba48:	4140      	adcs	r0, r0
  40ba4a:	eb41 0101 	adc.w	r1, r1, r1
  40ba4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ba52:	f1a4 0401 	sub.w	r4, r4, #1
  40ba56:	d1e9      	bne.n	40ba2c <__adddf3+0x10c>
  40ba58:	f091 0f00 	teq	r1, #0
  40ba5c:	bf04      	itt	eq
  40ba5e:	4601      	moveq	r1, r0
  40ba60:	2000      	moveq	r0, #0
  40ba62:	fab1 f381 	clz	r3, r1
  40ba66:	bf08      	it	eq
  40ba68:	3320      	addeq	r3, #32
  40ba6a:	f1a3 030b 	sub.w	r3, r3, #11
  40ba6e:	f1b3 0220 	subs.w	r2, r3, #32
  40ba72:	da0c      	bge.n	40ba8e <__adddf3+0x16e>
  40ba74:	320c      	adds	r2, #12
  40ba76:	dd08      	ble.n	40ba8a <__adddf3+0x16a>
  40ba78:	f102 0c14 	add.w	ip, r2, #20
  40ba7c:	f1c2 020c 	rsb	r2, r2, #12
  40ba80:	fa01 f00c 	lsl.w	r0, r1, ip
  40ba84:	fa21 f102 	lsr.w	r1, r1, r2
  40ba88:	e00c      	b.n	40baa4 <__adddf3+0x184>
  40ba8a:	f102 0214 	add.w	r2, r2, #20
  40ba8e:	bfd8      	it	le
  40ba90:	f1c2 0c20 	rsble	ip, r2, #32
  40ba94:	fa01 f102 	lsl.w	r1, r1, r2
  40ba98:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ba9c:	bfdc      	itt	le
  40ba9e:	ea41 010c 	orrle.w	r1, r1, ip
  40baa2:	4090      	lslle	r0, r2
  40baa4:	1ae4      	subs	r4, r4, r3
  40baa6:	bfa2      	ittt	ge
  40baa8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40baac:	4329      	orrge	r1, r5
  40baae:	bd30      	popge	{r4, r5, pc}
  40bab0:	ea6f 0404 	mvn.w	r4, r4
  40bab4:	3c1f      	subs	r4, #31
  40bab6:	da1c      	bge.n	40baf2 <__adddf3+0x1d2>
  40bab8:	340c      	adds	r4, #12
  40baba:	dc0e      	bgt.n	40bada <__adddf3+0x1ba>
  40babc:	f104 0414 	add.w	r4, r4, #20
  40bac0:	f1c4 0220 	rsb	r2, r4, #32
  40bac4:	fa20 f004 	lsr.w	r0, r0, r4
  40bac8:	fa01 f302 	lsl.w	r3, r1, r2
  40bacc:	ea40 0003 	orr.w	r0, r0, r3
  40bad0:	fa21 f304 	lsr.w	r3, r1, r4
  40bad4:	ea45 0103 	orr.w	r1, r5, r3
  40bad8:	bd30      	pop	{r4, r5, pc}
  40bada:	f1c4 040c 	rsb	r4, r4, #12
  40bade:	f1c4 0220 	rsb	r2, r4, #32
  40bae2:	fa20 f002 	lsr.w	r0, r0, r2
  40bae6:	fa01 f304 	lsl.w	r3, r1, r4
  40baea:	ea40 0003 	orr.w	r0, r0, r3
  40baee:	4629      	mov	r1, r5
  40baf0:	bd30      	pop	{r4, r5, pc}
  40baf2:	fa21 f004 	lsr.w	r0, r1, r4
  40baf6:	4629      	mov	r1, r5
  40baf8:	bd30      	pop	{r4, r5, pc}
  40bafa:	f094 0f00 	teq	r4, #0
  40bafe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40bb02:	bf06      	itte	eq
  40bb04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40bb08:	3401      	addeq	r4, #1
  40bb0a:	3d01      	subne	r5, #1
  40bb0c:	e74e      	b.n	40b9ac <__adddf3+0x8c>
  40bb0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40bb12:	bf18      	it	ne
  40bb14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bb18:	d029      	beq.n	40bb6e <__adddf3+0x24e>
  40bb1a:	ea94 0f05 	teq	r4, r5
  40bb1e:	bf08      	it	eq
  40bb20:	ea90 0f02 	teqeq	r0, r2
  40bb24:	d005      	beq.n	40bb32 <__adddf3+0x212>
  40bb26:	ea54 0c00 	orrs.w	ip, r4, r0
  40bb2a:	bf04      	itt	eq
  40bb2c:	4619      	moveq	r1, r3
  40bb2e:	4610      	moveq	r0, r2
  40bb30:	bd30      	pop	{r4, r5, pc}
  40bb32:	ea91 0f03 	teq	r1, r3
  40bb36:	bf1e      	ittt	ne
  40bb38:	2100      	movne	r1, #0
  40bb3a:	2000      	movne	r0, #0
  40bb3c:	bd30      	popne	{r4, r5, pc}
  40bb3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40bb42:	d105      	bne.n	40bb50 <__adddf3+0x230>
  40bb44:	0040      	lsls	r0, r0, #1
  40bb46:	4149      	adcs	r1, r1
  40bb48:	bf28      	it	cs
  40bb4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40bb4e:	bd30      	pop	{r4, r5, pc}
  40bb50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40bb54:	bf3c      	itt	cc
  40bb56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40bb5a:	bd30      	popcc	{r4, r5, pc}
  40bb5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bb60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40bb64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bb68:	f04f 0000 	mov.w	r0, #0
  40bb6c:	bd30      	pop	{r4, r5, pc}
  40bb6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40bb72:	bf1a      	itte	ne
  40bb74:	4619      	movne	r1, r3
  40bb76:	4610      	movne	r0, r2
  40bb78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40bb7c:	bf1c      	itt	ne
  40bb7e:	460b      	movne	r3, r1
  40bb80:	4602      	movne	r2, r0
  40bb82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bb86:	bf06      	itte	eq
  40bb88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40bb8c:	ea91 0f03 	teqeq	r1, r3
  40bb90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40bb94:	bd30      	pop	{r4, r5, pc}
  40bb96:	bf00      	nop

0040bb98 <__aeabi_ui2d>:
  40bb98:	f090 0f00 	teq	r0, #0
  40bb9c:	bf04      	itt	eq
  40bb9e:	2100      	moveq	r1, #0
  40bba0:	4770      	bxeq	lr
  40bba2:	b530      	push	{r4, r5, lr}
  40bba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bba8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bbac:	f04f 0500 	mov.w	r5, #0
  40bbb0:	f04f 0100 	mov.w	r1, #0
  40bbb4:	e750      	b.n	40ba58 <__adddf3+0x138>
  40bbb6:	bf00      	nop

0040bbb8 <__aeabi_i2d>:
  40bbb8:	f090 0f00 	teq	r0, #0
  40bbbc:	bf04      	itt	eq
  40bbbe:	2100      	moveq	r1, #0
  40bbc0:	4770      	bxeq	lr
  40bbc2:	b530      	push	{r4, r5, lr}
  40bbc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bbc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bbcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40bbd0:	bf48      	it	mi
  40bbd2:	4240      	negmi	r0, r0
  40bbd4:	f04f 0100 	mov.w	r1, #0
  40bbd8:	e73e      	b.n	40ba58 <__adddf3+0x138>
  40bbda:	bf00      	nop

0040bbdc <__aeabi_f2d>:
  40bbdc:	0042      	lsls	r2, r0, #1
  40bbde:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40bbe2:	ea4f 0131 	mov.w	r1, r1, rrx
  40bbe6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40bbea:	bf1f      	itttt	ne
  40bbec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40bbf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40bbf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40bbf8:	4770      	bxne	lr
  40bbfa:	f092 0f00 	teq	r2, #0
  40bbfe:	bf14      	ite	ne
  40bc00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40bc04:	4770      	bxeq	lr
  40bc06:	b530      	push	{r4, r5, lr}
  40bc08:	f44f 7460 	mov.w	r4, #896	; 0x380
  40bc0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bc10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40bc14:	e720      	b.n	40ba58 <__adddf3+0x138>
  40bc16:	bf00      	nop

0040bc18 <__aeabi_ul2d>:
  40bc18:	ea50 0201 	orrs.w	r2, r0, r1
  40bc1c:	bf08      	it	eq
  40bc1e:	4770      	bxeq	lr
  40bc20:	b530      	push	{r4, r5, lr}
  40bc22:	f04f 0500 	mov.w	r5, #0
  40bc26:	e00a      	b.n	40bc3e <__aeabi_l2d+0x16>

0040bc28 <__aeabi_l2d>:
  40bc28:	ea50 0201 	orrs.w	r2, r0, r1
  40bc2c:	bf08      	it	eq
  40bc2e:	4770      	bxeq	lr
  40bc30:	b530      	push	{r4, r5, lr}
  40bc32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40bc36:	d502      	bpl.n	40bc3e <__aeabi_l2d+0x16>
  40bc38:	4240      	negs	r0, r0
  40bc3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40bc3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bc42:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bc46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40bc4a:	f43f aedc 	beq.w	40ba06 <__adddf3+0xe6>
  40bc4e:	f04f 0203 	mov.w	r2, #3
  40bc52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bc56:	bf18      	it	ne
  40bc58:	3203      	addne	r2, #3
  40bc5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bc5e:	bf18      	it	ne
  40bc60:	3203      	addne	r2, #3
  40bc62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40bc66:	f1c2 0320 	rsb	r3, r2, #32
  40bc6a:	fa00 fc03 	lsl.w	ip, r0, r3
  40bc6e:	fa20 f002 	lsr.w	r0, r0, r2
  40bc72:	fa01 fe03 	lsl.w	lr, r1, r3
  40bc76:	ea40 000e 	orr.w	r0, r0, lr
  40bc7a:	fa21 f102 	lsr.w	r1, r1, r2
  40bc7e:	4414      	add	r4, r2
  40bc80:	e6c1      	b.n	40ba06 <__adddf3+0xe6>
  40bc82:	bf00      	nop

0040bc84 <__aeabi_dmul>:
  40bc84:	b570      	push	{r4, r5, r6, lr}
  40bc86:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40bc8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40bc8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40bc92:	bf1d      	ittte	ne
  40bc94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40bc98:	ea94 0f0c 	teqne	r4, ip
  40bc9c:	ea95 0f0c 	teqne	r5, ip
  40bca0:	f000 f8de 	bleq	40be60 <__aeabi_dmul+0x1dc>
  40bca4:	442c      	add	r4, r5
  40bca6:	ea81 0603 	eor.w	r6, r1, r3
  40bcaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40bcae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40bcb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40bcb6:	bf18      	it	ne
  40bcb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40bcbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bcc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40bcc4:	d038      	beq.n	40bd38 <__aeabi_dmul+0xb4>
  40bcc6:	fba0 ce02 	umull	ip, lr, r0, r2
  40bcca:	f04f 0500 	mov.w	r5, #0
  40bcce:	fbe1 e502 	umlal	lr, r5, r1, r2
  40bcd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40bcd6:	fbe0 e503 	umlal	lr, r5, r0, r3
  40bcda:	f04f 0600 	mov.w	r6, #0
  40bcde:	fbe1 5603 	umlal	r5, r6, r1, r3
  40bce2:	f09c 0f00 	teq	ip, #0
  40bce6:	bf18      	it	ne
  40bce8:	f04e 0e01 	orrne.w	lr, lr, #1
  40bcec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40bcf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40bcf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40bcf8:	d204      	bcs.n	40bd04 <__aeabi_dmul+0x80>
  40bcfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40bcfe:	416d      	adcs	r5, r5
  40bd00:	eb46 0606 	adc.w	r6, r6, r6
  40bd04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40bd08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40bd0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40bd10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40bd14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40bd18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bd1c:	bf88      	it	hi
  40bd1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bd22:	d81e      	bhi.n	40bd62 <__aeabi_dmul+0xde>
  40bd24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40bd28:	bf08      	it	eq
  40bd2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40bd2e:	f150 0000 	adcs.w	r0, r0, #0
  40bd32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bd36:	bd70      	pop	{r4, r5, r6, pc}
  40bd38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40bd3c:	ea46 0101 	orr.w	r1, r6, r1
  40bd40:	ea40 0002 	orr.w	r0, r0, r2
  40bd44:	ea81 0103 	eor.w	r1, r1, r3
  40bd48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40bd4c:	bfc2      	ittt	gt
  40bd4e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bd52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bd56:	bd70      	popgt	{r4, r5, r6, pc}
  40bd58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bd5c:	f04f 0e00 	mov.w	lr, #0
  40bd60:	3c01      	subs	r4, #1
  40bd62:	f300 80ab 	bgt.w	40bebc <__aeabi_dmul+0x238>
  40bd66:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40bd6a:	bfde      	ittt	le
  40bd6c:	2000      	movle	r0, #0
  40bd6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40bd72:	bd70      	pople	{r4, r5, r6, pc}
  40bd74:	f1c4 0400 	rsb	r4, r4, #0
  40bd78:	3c20      	subs	r4, #32
  40bd7a:	da35      	bge.n	40bde8 <__aeabi_dmul+0x164>
  40bd7c:	340c      	adds	r4, #12
  40bd7e:	dc1b      	bgt.n	40bdb8 <__aeabi_dmul+0x134>
  40bd80:	f104 0414 	add.w	r4, r4, #20
  40bd84:	f1c4 0520 	rsb	r5, r4, #32
  40bd88:	fa00 f305 	lsl.w	r3, r0, r5
  40bd8c:	fa20 f004 	lsr.w	r0, r0, r4
  40bd90:	fa01 f205 	lsl.w	r2, r1, r5
  40bd94:	ea40 0002 	orr.w	r0, r0, r2
  40bd98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40bd9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40bda0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bda4:	fa21 f604 	lsr.w	r6, r1, r4
  40bda8:	eb42 0106 	adc.w	r1, r2, r6
  40bdac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bdb0:	bf08      	it	eq
  40bdb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bdb6:	bd70      	pop	{r4, r5, r6, pc}
  40bdb8:	f1c4 040c 	rsb	r4, r4, #12
  40bdbc:	f1c4 0520 	rsb	r5, r4, #32
  40bdc0:	fa00 f304 	lsl.w	r3, r0, r4
  40bdc4:	fa20 f005 	lsr.w	r0, r0, r5
  40bdc8:	fa01 f204 	lsl.w	r2, r1, r4
  40bdcc:	ea40 0002 	orr.w	r0, r0, r2
  40bdd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bdd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bdd8:	f141 0100 	adc.w	r1, r1, #0
  40bddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bde0:	bf08      	it	eq
  40bde2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bde6:	bd70      	pop	{r4, r5, r6, pc}
  40bde8:	f1c4 0520 	rsb	r5, r4, #32
  40bdec:	fa00 f205 	lsl.w	r2, r0, r5
  40bdf0:	ea4e 0e02 	orr.w	lr, lr, r2
  40bdf4:	fa20 f304 	lsr.w	r3, r0, r4
  40bdf8:	fa01 f205 	lsl.w	r2, r1, r5
  40bdfc:	ea43 0302 	orr.w	r3, r3, r2
  40be00:	fa21 f004 	lsr.w	r0, r1, r4
  40be04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40be08:	fa21 f204 	lsr.w	r2, r1, r4
  40be0c:	ea20 0002 	bic.w	r0, r0, r2
  40be10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40be14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40be18:	bf08      	it	eq
  40be1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40be1e:	bd70      	pop	{r4, r5, r6, pc}
  40be20:	f094 0f00 	teq	r4, #0
  40be24:	d10f      	bne.n	40be46 <__aeabi_dmul+0x1c2>
  40be26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40be2a:	0040      	lsls	r0, r0, #1
  40be2c:	eb41 0101 	adc.w	r1, r1, r1
  40be30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40be34:	bf08      	it	eq
  40be36:	3c01      	subeq	r4, #1
  40be38:	d0f7      	beq.n	40be2a <__aeabi_dmul+0x1a6>
  40be3a:	ea41 0106 	orr.w	r1, r1, r6
  40be3e:	f095 0f00 	teq	r5, #0
  40be42:	bf18      	it	ne
  40be44:	4770      	bxne	lr
  40be46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40be4a:	0052      	lsls	r2, r2, #1
  40be4c:	eb43 0303 	adc.w	r3, r3, r3
  40be50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40be54:	bf08      	it	eq
  40be56:	3d01      	subeq	r5, #1
  40be58:	d0f7      	beq.n	40be4a <__aeabi_dmul+0x1c6>
  40be5a:	ea43 0306 	orr.w	r3, r3, r6
  40be5e:	4770      	bx	lr
  40be60:	ea94 0f0c 	teq	r4, ip
  40be64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40be68:	bf18      	it	ne
  40be6a:	ea95 0f0c 	teqne	r5, ip
  40be6e:	d00c      	beq.n	40be8a <__aeabi_dmul+0x206>
  40be70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40be74:	bf18      	it	ne
  40be76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40be7a:	d1d1      	bne.n	40be20 <__aeabi_dmul+0x19c>
  40be7c:	ea81 0103 	eor.w	r1, r1, r3
  40be80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40be84:	f04f 0000 	mov.w	r0, #0
  40be88:	bd70      	pop	{r4, r5, r6, pc}
  40be8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40be8e:	bf06      	itte	eq
  40be90:	4610      	moveq	r0, r2
  40be92:	4619      	moveq	r1, r3
  40be94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40be98:	d019      	beq.n	40bece <__aeabi_dmul+0x24a>
  40be9a:	ea94 0f0c 	teq	r4, ip
  40be9e:	d102      	bne.n	40bea6 <__aeabi_dmul+0x222>
  40bea0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40bea4:	d113      	bne.n	40bece <__aeabi_dmul+0x24a>
  40bea6:	ea95 0f0c 	teq	r5, ip
  40beaa:	d105      	bne.n	40beb8 <__aeabi_dmul+0x234>
  40beac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40beb0:	bf1c      	itt	ne
  40beb2:	4610      	movne	r0, r2
  40beb4:	4619      	movne	r1, r3
  40beb6:	d10a      	bne.n	40bece <__aeabi_dmul+0x24a>
  40beb8:	ea81 0103 	eor.w	r1, r1, r3
  40bebc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bec0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40bec4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bec8:	f04f 0000 	mov.w	r0, #0
  40becc:	bd70      	pop	{r4, r5, r6, pc}
  40bece:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40bed2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40bed6:	bd70      	pop	{r4, r5, r6, pc}

0040bed8 <__aeabi_ddiv>:
  40bed8:	b570      	push	{r4, r5, r6, lr}
  40beda:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40bede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40bee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40bee6:	bf1d      	ittte	ne
  40bee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40beec:	ea94 0f0c 	teqne	r4, ip
  40bef0:	ea95 0f0c 	teqne	r5, ip
  40bef4:	f000 f8a7 	bleq	40c046 <__aeabi_ddiv+0x16e>
  40bef8:	eba4 0405 	sub.w	r4, r4, r5
  40befc:	ea81 0e03 	eor.w	lr, r1, r3
  40bf00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40bf04:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bf08:	f000 8088 	beq.w	40c01c <__aeabi_ddiv+0x144>
  40bf0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40bf10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40bf14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40bf18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40bf1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40bf20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40bf24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40bf28:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40bf2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40bf30:	429d      	cmp	r5, r3
  40bf32:	bf08      	it	eq
  40bf34:	4296      	cmpeq	r6, r2
  40bf36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40bf3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40bf3e:	d202      	bcs.n	40bf46 <__aeabi_ddiv+0x6e>
  40bf40:	085b      	lsrs	r3, r3, #1
  40bf42:	ea4f 0232 	mov.w	r2, r2, rrx
  40bf46:	1ab6      	subs	r6, r6, r2
  40bf48:	eb65 0503 	sbc.w	r5, r5, r3
  40bf4c:	085b      	lsrs	r3, r3, #1
  40bf4e:	ea4f 0232 	mov.w	r2, r2, rrx
  40bf52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40bf56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40bf5a:	ebb6 0e02 	subs.w	lr, r6, r2
  40bf5e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bf62:	bf22      	ittt	cs
  40bf64:	1ab6      	subcs	r6, r6, r2
  40bf66:	4675      	movcs	r5, lr
  40bf68:	ea40 000c 	orrcs.w	r0, r0, ip
  40bf6c:	085b      	lsrs	r3, r3, #1
  40bf6e:	ea4f 0232 	mov.w	r2, r2, rrx
  40bf72:	ebb6 0e02 	subs.w	lr, r6, r2
  40bf76:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bf7a:	bf22      	ittt	cs
  40bf7c:	1ab6      	subcs	r6, r6, r2
  40bf7e:	4675      	movcs	r5, lr
  40bf80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40bf84:	085b      	lsrs	r3, r3, #1
  40bf86:	ea4f 0232 	mov.w	r2, r2, rrx
  40bf8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40bf8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bf92:	bf22      	ittt	cs
  40bf94:	1ab6      	subcs	r6, r6, r2
  40bf96:	4675      	movcs	r5, lr
  40bf98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40bf9c:	085b      	lsrs	r3, r3, #1
  40bf9e:	ea4f 0232 	mov.w	r2, r2, rrx
  40bfa2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bfa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bfaa:	bf22      	ittt	cs
  40bfac:	1ab6      	subcs	r6, r6, r2
  40bfae:	4675      	movcs	r5, lr
  40bfb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40bfb4:	ea55 0e06 	orrs.w	lr, r5, r6
  40bfb8:	d018      	beq.n	40bfec <__aeabi_ddiv+0x114>
  40bfba:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40bfbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40bfc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40bfc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40bfca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40bfce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40bfd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40bfd6:	d1c0      	bne.n	40bf5a <__aeabi_ddiv+0x82>
  40bfd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bfdc:	d10b      	bne.n	40bff6 <__aeabi_ddiv+0x11e>
  40bfde:	ea41 0100 	orr.w	r1, r1, r0
  40bfe2:	f04f 0000 	mov.w	r0, #0
  40bfe6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40bfea:	e7b6      	b.n	40bf5a <__aeabi_ddiv+0x82>
  40bfec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bff0:	bf04      	itt	eq
  40bff2:	4301      	orreq	r1, r0
  40bff4:	2000      	moveq	r0, #0
  40bff6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bffa:	bf88      	it	hi
  40bffc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c000:	f63f aeaf 	bhi.w	40bd62 <__aeabi_dmul+0xde>
  40c004:	ebb5 0c03 	subs.w	ip, r5, r3
  40c008:	bf04      	itt	eq
  40c00a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c00e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c012:	f150 0000 	adcs.w	r0, r0, #0
  40c016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c01a:	bd70      	pop	{r4, r5, r6, pc}
  40c01c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c020:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c024:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c028:	bfc2      	ittt	gt
  40c02a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c02e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c032:	bd70      	popgt	{r4, r5, r6, pc}
  40c034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c038:	f04f 0e00 	mov.w	lr, #0
  40c03c:	3c01      	subs	r4, #1
  40c03e:	e690      	b.n	40bd62 <__aeabi_dmul+0xde>
  40c040:	ea45 0e06 	orr.w	lr, r5, r6
  40c044:	e68d      	b.n	40bd62 <__aeabi_dmul+0xde>
  40c046:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c04a:	ea94 0f0c 	teq	r4, ip
  40c04e:	bf08      	it	eq
  40c050:	ea95 0f0c 	teqeq	r5, ip
  40c054:	f43f af3b 	beq.w	40bece <__aeabi_dmul+0x24a>
  40c058:	ea94 0f0c 	teq	r4, ip
  40c05c:	d10a      	bne.n	40c074 <__aeabi_ddiv+0x19c>
  40c05e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c062:	f47f af34 	bne.w	40bece <__aeabi_dmul+0x24a>
  40c066:	ea95 0f0c 	teq	r5, ip
  40c06a:	f47f af25 	bne.w	40beb8 <__aeabi_dmul+0x234>
  40c06e:	4610      	mov	r0, r2
  40c070:	4619      	mov	r1, r3
  40c072:	e72c      	b.n	40bece <__aeabi_dmul+0x24a>
  40c074:	ea95 0f0c 	teq	r5, ip
  40c078:	d106      	bne.n	40c088 <__aeabi_ddiv+0x1b0>
  40c07a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c07e:	f43f aefd 	beq.w	40be7c <__aeabi_dmul+0x1f8>
  40c082:	4610      	mov	r0, r2
  40c084:	4619      	mov	r1, r3
  40c086:	e722      	b.n	40bece <__aeabi_dmul+0x24a>
  40c088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c08c:	bf18      	it	ne
  40c08e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c092:	f47f aec5 	bne.w	40be20 <__aeabi_dmul+0x19c>
  40c096:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c09a:	f47f af0d 	bne.w	40beb8 <__aeabi_dmul+0x234>
  40c09e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c0a2:	f47f aeeb 	bne.w	40be7c <__aeabi_dmul+0x1f8>
  40c0a6:	e712      	b.n	40bece <__aeabi_dmul+0x24a>

0040c0a8 <__gedf2>:
  40c0a8:	f04f 3cff 	mov.w	ip, #4294967295
  40c0ac:	e006      	b.n	40c0bc <__cmpdf2+0x4>
  40c0ae:	bf00      	nop

0040c0b0 <__ledf2>:
  40c0b0:	f04f 0c01 	mov.w	ip, #1
  40c0b4:	e002      	b.n	40c0bc <__cmpdf2+0x4>
  40c0b6:	bf00      	nop

0040c0b8 <__cmpdf2>:
  40c0b8:	f04f 0c01 	mov.w	ip, #1
  40c0bc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c0c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c0c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c0c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c0cc:	bf18      	it	ne
  40c0ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c0d2:	d01b      	beq.n	40c10c <__cmpdf2+0x54>
  40c0d4:	b001      	add	sp, #4
  40c0d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c0da:	bf0c      	ite	eq
  40c0dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c0e0:	ea91 0f03 	teqne	r1, r3
  40c0e4:	bf02      	ittt	eq
  40c0e6:	ea90 0f02 	teqeq	r0, r2
  40c0ea:	2000      	moveq	r0, #0
  40c0ec:	4770      	bxeq	lr
  40c0ee:	f110 0f00 	cmn.w	r0, #0
  40c0f2:	ea91 0f03 	teq	r1, r3
  40c0f6:	bf58      	it	pl
  40c0f8:	4299      	cmppl	r1, r3
  40c0fa:	bf08      	it	eq
  40c0fc:	4290      	cmpeq	r0, r2
  40c0fe:	bf2c      	ite	cs
  40c100:	17d8      	asrcs	r0, r3, #31
  40c102:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c106:	f040 0001 	orr.w	r0, r0, #1
  40c10a:	4770      	bx	lr
  40c10c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c114:	d102      	bne.n	40c11c <__cmpdf2+0x64>
  40c116:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c11a:	d107      	bne.n	40c12c <__cmpdf2+0x74>
  40c11c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c124:	d1d6      	bne.n	40c0d4 <__cmpdf2+0x1c>
  40c126:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c12a:	d0d3      	beq.n	40c0d4 <__cmpdf2+0x1c>
  40c12c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c130:	4770      	bx	lr
  40c132:	bf00      	nop

0040c134 <__aeabi_cdrcmple>:
  40c134:	4684      	mov	ip, r0
  40c136:	4610      	mov	r0, r2
  40c138:	4662      	mov	r2, ip
  40c13a:	468c      	mov	ip, r1
  40c13c:	4619      	mov	r1, r3
  40c13e:	4663      	mov	r3, ip
  40c140:	e000      	b.n	40c144 <__aeabi_cdcmpeq>
  40c142:	bf00      	nop

0040c144 <__aeabi_cdcmpeq>:
  40c144:	b501      	push	{r0, lr}
  40c146:	f7ff ffb7 	bl	40c0b8 <__cmpdf2>
  40c14a:	2800      	cmp	r0, #0
  40c14c:	bf48      	it	mi
  40c14e:	f110 0f00 	cmnmi.w	r0, #0
  40c152:	bd01      	pop	{r0, pc}

0040c154 <__aeabi_dcmpeq>:
  40c154:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c158:	f7ff fff4 	bl	40c144 <__aeabi_cdcmpeq>
  40c15c:	bf0c      	ite	eq
  40c15e:	2001      	moveq	r0, #1
  40c160:	2000      	movne	r0, #0
  40c162:	f85d fb08 	ldr.w	pc, [sp], #8
  40c166:	bf00      	nop

0040c168 <__aeabi_dcmplt>:
  40c168:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c16c:	f7ff ffea 	bl	40c144 <__aeabi_cdcmpeq>
  40c170:	bf34      	ite	cc
  40c172:	2001      	movcc	r0, #1
  40c174:	2000      	movcs	r0, #0
  40c176:	f85d fb08 	ldr.w	pc, [sp], #8
  40c17a:	bf00      	nop

0040c17c <__aeabi_dcmple>:
  40c17c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c180:	f7ff ffe0 	bl	40c144 <__aeabi_cdcmpeq>
  40c184:	bf94      	ite	ls
  40c186:	2001      	movls	r0, #1
  40c188:	2000      	movhi	r0, #0
  40c18a:	f85d fb08 	ldr.w	pc, [sp], #8
  40c18e:	bf00      	nop

0040c190 <__aeabi_dcmpge>:
  40c190:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c194:	f7ff ffce 	bl	40c134 <__aeabi_cdrcmple>
  40c198:	bf94      	ite	ls
  40c19a:	2001      	movls	r0, #1
  40c19c:	2000      	movhi	r0, #0
  40c19e:	f85d fb08 	ldr.w	pc, [sp], #8
  40c1a2:	bf00      	nop

0040c1a4 <__aeabi_dcmpgt>:
  40c1a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c1a8:	f7ff ffc4 	bl	40c134 <__aeabi_cdrcmple>
  40c1ac:	bf34      	ite	cc
  40c1ae:	2001      	movcc	r0, #1
  40c1b0:	2000      	movcs	r0, #0
  40c1b2:	f85d fb08 	ldr.w	pc, [sp], #8
  40c1b6:	bf00      	nop

0040c1b8 <__aeabi_dcmpun>:
  40c1b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c1bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c1c0:	d102      	bne.n	40c1c8 <__aeabi_dcmpun+0x10>
  40c1c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c1c6:	d10a      	bne.n	40c1de <__aeabi_dcmpun+0x26>
  40c1c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c1cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c1d0:	d102      	bne.n	40c1d8 <__aeabi_dcmpun+0x20>
  40c1d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c1d6:	d102      	bne.n	40c1de <__aeabi_dcmpun+0x26>
  40c1d8:	f04f 0000 	mov.w	r0, #0
  40c1dc:	4770      	bx	lr
  40c1de:	f04f 0001 	mov.w	r0, #1
  40c1e2:	4770      	bx	lr

0040c1e4 <__aeabi_d2iz>:
  40c1e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c1e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c1ec:	d215      	bcs.n	40c21a <__aeabi_d2iz+0x36>
  40c1ee:	d511      	bpl.n	40c214 <__aeabi_d2iz+0x30>
  40c1f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c1f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c1f8:	d912      	bls.n	40c220 <__aeabi_d2iz+0x3c>
  40c1fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c1fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c202:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c206:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c20a:	fa23 f002 	lsr.w	r0, r3, r2
  40c20e:	bf18      	it	ne
  40c210:	4240      	negne	r0, r0
  40c212:	4770      	bx	lr
  40c214:	f04f 0000 	mov.w	r0, #0
  40c218:	4770      	bx	lr
  40c21a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c21e:	d105      	bne.n	40c22c <__aeabi_d2iz+0x48>
  40c220:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c224:	bf08      	it	eq
  40c226:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c22a:	4770      	bx	lr
  40c22c:	f04f 0000 	mov.w	r0, #0
  40c230:	4770      	bx	lr
  40c232:	bf00      	nop

0040c234 <__aeabi_d2uiz>:
  40c234:	004a      	lsls	r2, r1, #1
  40c236:	d211      	bcs.n	40c25c <__aeabi_d2uiz+0x28>
  40c238:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c23c:	d211      	bcs.n	40c262 <__aeabi_d2uiz+0x2e>
  40c23e:	d50d      	bpl.n	40c25c <__aeabi_d2uiz+0x28>
  40c240:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c248:	d40e      	bmi.n	40c268 <__aeabi_d2uiz+0x34>
  40c24a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c24e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c256:	fa23 f002 	lsr.w	r0, r3, r2
  40c25a:	4770      	bx	lr
  40c25c:	f04f 0000 	mov.w	r0, #0
  40c260:	4770      	bx	lr
  40c262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c266:	d102      	bne.n	40c26e <__aeabi_d2uiz+0x3a>
  40c268:	f04f 30ff 	mov.w	r0, #4294967295
  40c26c:	4770      	bx	lr
  40c26e:	f04f 0000 	mov.w	r0, #0
  40c272:	4770      	bx	lr

0040c274 <__aeabi_d2f>:
  40c274:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c278:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40c27c:	bf24      	itt	cs
  40c27e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40c282:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40c286:	d90d      	bls.n	40c2a4 <__aeabi_d2f+0x30>
  40c288:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40c28c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40c290:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40c294:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40c298:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40c29c:	bf08      	it	eq
  40c29e:	f020 0001 	biceq.w	r0, r0, #1
  40c2a2:	4770      	bx	lr
  40c2a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40c2a8:	d121      	bne.n	40c2ee <__aeabi_d2f+0x7a>
  40c2aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40c2ae:	bfbc      	itt	lt
  40c2b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40c2b4:	4770      	bxlt	lr
  40c2b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c2ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40c2be:	f1c2 0218 	rsb	r2, r2, #24
  40c2c2:	f1c2 0c20 	rsb	ip, r2, #32
  40c2c6:	fa10 f30c 	lsls.w	r3, r0, ip
  40c2ca:	fa20 f002 	lsr.w	r0, r0, r2
  40c2ce:	bf18      	it	ne
  40c2d0:	f040 0001 	orrne.w	r0, r0, #1
  40c2d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c2d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40c2dc:	fa03 fc0c 	lsl.w	ip, r3, ip
  40c2e0:	ea40 000c 	orr.w	r0, r0, ip
  40c2e4:	fa23 f302 	lsr.w	r3, r3, r2
  40c2e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40c2ec:	e7cc      	b.n	40c288 <__aeabi_d2f+0x14>
  40c2ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40c2f2:	d107      	bne.n	40c304 <__aeabi_d2f+0x90>
  40c2f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40c2f8:	bf1e      	ittt	ne
  40c2fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40c2fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40c302:	4770      	bxne	lr
  40c304:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40c308:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40c30c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40c310:	4770      	bx	lr
  40c312:	bf00      	nop
  40c314:	742e6425 	.word	0x742e6425
  40c318:	00007478 	.word	0x00007478
  40c31c:	6165520a 	.word	0x6165520a
  40c320:	676e6964 	.word	0x676e6964
  40c324:	6f726620 	.word	0x6f726620
  40c328:	6966206d 	.word	0x6966206d
  40c32c:	2720656c 	.word	0x2720656c
  40c330:	00277325 	.word	0x00277325
  40c334:	656c500a 	.word	0x656c500a
  40c338:	20657361 	.word	0x20657361
  40c33c:	65736e69 	.word	0x65736e69
  40c340:	61207472 	.word	0x61207472
  40c344:	54414620 	.word	0x54414620
  40c348:	73797320 	.word	0x73797320
  40c34c:	206d6574 	.word	0x206d6574
  40c350:	63204453 	.word	0x63204453
  40c354:	20647261 	.word	0x20647261
  40c358:	202e202e 	.word	0x202e202e
  40c35c:	000d0a2e 	.word	0x000d0a2e
  40c360:	6f727245 	.word	0x6f727245
  40c364:	704f2072 	.word	0x704f2072
  40c368:	6e696e65 	.word	0x6e696e65
  40c36c:	69462067 	.word	0x69462067
  40c370:	2e20656c 	.word	0x2e20656c
  40c374:	2e202e20 	.word	0x2e202e20
  40c378:	00000000 	.word	0x00000000
  40c37c:	75746552 	.word	0x75746552
  40c380:	6e696e72 	.word	0x6e696e72
  40c384:	6f742067 	.word	0x6f742067
  40c388:	72657420 	.word	0x72657420
  40c38c:	616e696d 	.word	0x616e696d
  40c390:	6f6d206c 	.word	0x6f6d206c
  40c394:	2e206564 	.word	0x2e206564
  40c398:	2e202e20 	.word	0x2e202e20
  40c39c:	00000a20 	.word	0x00000a20
  40c3a0:	6578450a 	.word	0x6578450a
  40c3a4:	69747563 	.word	0x69747563
  40c3a8:	6620676e 	.word	0x6620676e
  40c3ac:	206d6f72 	.word	0x206d6f72
  40c3b0:	20656874 	.word	0x20656874
  40c3b4:	43204453 	.word	0x43204453
  40c3b8:	20647261 	.word	0x20647261
  40c3bc:	202e202e 	.word	0x202e202e
  40c3c0:	0000202e 	.word	0x0000202e
  40c3c4:	203e3e0a 	.word	0x203e3e0a
  40c3c8:	00007325 	.word	0x00007325
  40c3cc:	69460a0a 	.word	0x69460a0a
  40c3d0:	6873696e 	.word	0x6873696e
  40c3d4:	70206465 	.word	0x70206465
  40c3d8:	69737261 	.word	0x69737261
  40c3dc:	6620676e 	.word	0x6620676e
  40c3e0:	206d6f72 	.word	0x206d6f72
  40c3e4:	20656874 	.word	0x20656874
  40c3e8:	43204453 	.word	0x43204453
  40c3ec:	2c647261 	.word	0x2c647261
  40c3f0:	74657220 	.word	0x74657220
  40c3f4:	696e7275 	.word	0x696e7275
  40c3f8:	7420676e 	.word	0x7420676e
  40c3fc:	6574206f 	.word	0x6574206f
  40c400:	6e696d72 	.word	0x6e696d72
  40c404:	6d206c61 	.word	0x6d206c61
  40c408:	2065646f 	.word	0x2065646f
  40c40c:	202e202e 	.word	0x202e202e
  40c410:	000a202e 	.word	0x000a202e
  40c414:	2d09090a 	.word	0x2d09090a
  40c418:	5020202d 	.word	0x5020202d
  40c41c:	20313050 	.word	0x20313050
  40c420:	2035202d 	.word	0x2035202d
  40c424:	73697841 	.word	0x73697841
  40c428:	434e4320 	.word	0x434e4320
  40c42c:	6e6f4320 	.word	0x6e6f4320
  40c430:	6c6f7274 	.word	0x6c6f7274
  40c434:	2072656c 	.word	0x2072656c
  40c438:	002d2d20 	.word	0x002d2d20
  40c43c:	343a3831 	.word	0x343a3831
  40c440:	33333a36 	.word	0x33333a36
  40c444:	00000000 	.word	0x00000000
  40c448:	20727041 	.word	0x20727041
  40c44c:	32203920 	.word	0x32203920
  40c450:	00303230 	.word	0x00303230
  40c454:	2d2d0909 	.word	0x2d2d0909
  40c458:	6d6f4320 	.word	0x6d6f4320
  40c45c:	656c6970 	.word	0x656c6970
  40c460:	25203a64 	.word	0x25203a64
  40c464:	73252073 	.word	0x73252073
  40c468:	0a2d2d20 	.word	0x0a2d2d20
  40c46c:	0000000d 	.word	0x0000000d
  40c470:	003e3e0a 	.word	0x003e3e0a
  40c474:	74617453 	.word	0x74617453
  40c478:	500a3a65 	.word	0x500a3a65
  40c47c:	7469736f 	.word	0x7469736f
  40c480:	3a6e6f69 	.word	0x3a6e6f69
  40c484:	66255820 	.word	0x66255820
  40c488:	66255920 	.word	0x66255920
  40c48c:	66255a20 	.word	0x66255a20
  40c490:	66254120 	.word	0x66254120
  40c494:	66254320 	.word	0x66254320
  40c498:	616c500a 	.word	0x616c500a
  40c49c:	203a656e 	.word	0x203a656e
  40c4a0:	25206425 	.word	0x25206425
  40c4a4:	65560a64 	.word	0x65560a64
  40c4a8:	63697472 	.word	0x63697472
  40c4ac:	203a6c61 	.word	0x203a6c61
  40c4b0:	00006425 	.word	0x00006425
  40c4b4:	6546200a 	.word	0x6546200a
  40c4b8:	61726465 	.word	0x61726465
  40c4bc:	203a6574 	.word	0x203a6574
  40c4c0:	66322e25 	.word	0x66322e25
  40c4c4:	00000000 	.word	0x00000000
  40c4c8:	694d200a 	.word	0x694d200a
  40c4cc:	6d696c6c 	.word	0x6d696c6c
  40c4d0:	72657465 	.word	0x72657465
  40c4d4:	646f4d20 	.word	0x646f4d20
  40c4d8:	00000065 	.word	0x00000065
  40c4dc:	6e49200a 	.word	0x6e49200a
  40c4e0:	73656863 	.word	0x73656863
  40c4e4:	646f4d20 	.word	0x646f4d20
  40c4e8:	00000065 	.word	0x00000065
  40c4ec:	6241200a 	.word	0x6241200a
  40c4f0:	756c6f73 	.word	0x756c6f73
  40c4f4:	4d206574 	.word	0x4d206574
  40c4f8:	0065646f 	.word	0x0065646f
  40c4fc:	6e49200a 	.word	0x6e49200a
  40c500:	6d657263 	.word	0x6d657263
  40c504:	61746e65 	.word	0x61746e65
  40c508:	6f4d206c 	.word	0x6f4d206c
  40c50c:	00206564 	.word	0x00206564
  40c510:	4f525245 	.word	0x4f525245
  40c514:	4e203a52 	.word	0x4e203a52
  40c518:	6120746f 	.word	0x6120746f
  40c51c:	6f204720 	.word	0x6f204720
  40c520:	204d2072 	.word	0x204d2072
  40c524:	6d6d6f43 	.word	0x6d6d6f43
  40c528:	0a646e61 	.word	0x0a646e61
  40c52c:	0a207325 	.word	0x0a207325
  40c530:	00000000 	.word	0x00000000
  40c534:	58203147 	.word	0x58203147
  40c538:	30592030 	.word	0x30592030
  40c53c:	20305a20 	.word	0x20305a20
  40c540:	43203041 	.word	0x43203041
  40c544:	35462030 	.word	0x35462030
  40c548:	00003030 	.word	0x00003030
  40c54c:	73696854 	.word	0x73696854
  40c550:	632d4720 	.word	0x632d4720
  40c554:	2065646f 	.word	0x2065646f
  40c558:	20746f6e 	.word	0x20746f6e
  40c55c:	70707573 	.word	0x70707573
  40c560:	6574726f 	.word	0x6574726f
  40c564:	00002164 	.word	0x00002164
  40c568:	73696854 	.word	0x73696854
  40c56c:	646f6320 	.word	0x646f6320
  40c570:	6f6e2065 	.word	0x6f6e2065
  40c574:	75732074 	.word	0x75732074
  40c578:	726f7070 	.word	0x726f7070
  40c57c:	21646574 	.word	0x21646574
  40c580:	00000000 	.word	0x00000000

0040c584 <ExCvt>:
  40c584:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
  40c594:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
  40c5a4:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
  40c5b4:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
  40c5c4:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
  40c5d4:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
  40c5e4:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
  40c5f4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0040c604 <vst.5938>:
  40c604:	02000400 00800100 00200040 00080010     ........@. .....
  40c614:	00020004 00000000                       ........

0040c61c <cst.5939>:
  40c61c:	40008000 10002000 40000800 10002000     ...@. .....@. ..
  40c62c:	04000800 00000200 2c2b2a22 3d3c3b3a     ........"*+,:;<=
  40c63c:	5d5b3f3e 00007f7c 4d90feeb 534f4453     >?[]|......MSDOS
  40c64c:	00302e35 4e204f4e 20454d41 46202020     5.0.NO NAME    F
  40c65c:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
  40c66c:	46202020 20205441 00202020 682f2e2e        FAT     .../h
  40c67c:	732f6c61 682f6372 635f6c61 6e656c61     al/src/hal_calen
  40c68c:	2e726164 00000063 682f2e2e 732f6c61     dar.c...../hal/s
  40c69c:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
  40c6ac:	732f6c61 682f6372 6d5f6c61 735f6963     al/src/hal_mci_s
  40c6bc:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
  40c6cc:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
  40c6dc:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
  40c6ec:	72656d69 0000632e 682f2e2e 732f6c61     imer.c..../hal/s
  40c6fc:	682f6372 755f6c61 74726173 6e79735f     rc/hal_usart_syn
  40c70c:	00632e63 682f2e2e 752f6c61 736c6974     c.c.../hal/utils
  40c71c:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
  40c72c:	00000063 682f2e2e 682f6c70 69636d73     c...../hpl/hsmci
  40c73c:	6c70682f 6d73685f 632e6963 00000000     /hpl_hsmci.c....

0040c74c <_ext_irq>:
  40c74c:	00000000 00080800 00080800 00080800     ................
	...
  40c764:	00080800 00000001 00002000 00002000     ......... ... ..
  40c774:	00002000 00000000 00000000 00002000     . ........... ..
  40c784:	00000002 80002000 80002000 80002000     ..... ... ... ..
	...
  40c79c:	80002000 00000003 44000000 44000000     . .........D...D
  40c7ac:	44000000 00000000 04000000 40000000     ...D...........@

0040c7bc <_pio_irq_n>:
  40c7bc:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  40c7cc:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  40c7dc:	00000000                                ....

0040c7e0 <_pwms>:
  40c7e0:	40020000 0000001f 00010001 00000001     ...@............
  40c7f0:	00000001 000000ff 00000000 00000004     ................
	...
  40c80c:	00000004 0040c878 00000000 2043070c     ....x.@.......C 
  40c81c:	4005c000 0000003c 00010001 00000001     ...@<...........
  40c82c:	00000001 000000ff 00000000 00000004     ................
	...
  40c848:	00000002 0040c858 00000000 20430700     ....X.@.......C 

0040c858 <_ch_cfg1>:
  40c858:	00000000 00000006 0000092e 00000001     ................
  40c868:	00000002 00000006 0000092e 00000001     ................

0040c878 <_ch_cfg0>:
  40c878:	00000000 00000006 0000092e 00000001     ................
  40c888:	00000001 00000006 0000092e 00000001     ................
  40c898:	00000002 00000006 0000092e 00000001     ................
  40c8a8:	00000003 00000006 0000092e 00000001     ................
  40c8b8:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  40c8c8:	632e6d77 00000000 682f2e2e 722f6c70     wm.c....../hpl/r
  40c8d8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
  40c8e8:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
  40c8f8:	0000632e                                .c..

0040c8fc <_usarts>:
  40c8fc:	00000001 001009c0 00010a2c 682f2e2e     ........,...../h
  40c90c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  40c91c:	632e7472 00000000                       rt.c....

0040c924 <sd_mmc_trans_units>:
  40c924:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040c940 <sd_trans_multipliers>:
  40c940:	00000000 0000000a 0000000c 0000000d     ................
  40c950:	0000000f 00000014 00000019 0000001e     ................
  40c960:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40c970:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040c980 <mmc_trans_multipliers>:
  40c980:	00000000 0000000a 0000000c 0000000d     ................
  40c990:	0000000f 00000014 0000001a 0000001e     ................
  40c9a0:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40c9b0:	00000037 0000003c 00000046 00000050     7...<...F...P...
  40c9c0:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
  40c9d0:	0000632e                                .c..

0040c9d4 <npio2_hw>:
  40c9d4:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40c9e4:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40c9f4:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40ca04:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40ca14:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40ca24:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40ca34:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40ca44:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040ca54 <two_over_pi>:
  40ca54:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40ca64:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40ca74:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40ca84:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40ca94:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40caa4:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40cab4:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40cac4:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40cad4:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40cae4:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40caf4:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40cb04:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40cb14:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40cb24:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40cb34:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40cb44:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40cb54:	0060e27b 00c08c6b 00000000              {.`.k.......

0040cb60 <PIo2>:
  40cb60:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40cb70:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40cb80:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40cb90:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040cba0 <init_jk>:
  40cba0:	00000002 00000003 00000004 00000006     ................

0040cbb0 <atanhi>:
  40cbb0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40cbc0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0040cbd0 <atanlo>:
  40cbd0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40cbe0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040cbf0 <__sf_fake_stderr>:
	...

0040cc10 <__sf_fake_stdin>:
	...

0040cc30 <__sf_fake_stdout>:
	...

0040cc50 <_global_impure_ptr>:
  40cc50:	20400054 00464e49 00666e69 004e414e     T.@ INF.inf.NAN.
  40cc60:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  40cc70:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  40cc80:	63626139 00666564                       9abcdef.

0040cc88 <fpi.6129>:
  40cc88:	00000035 fffffbce 000003cb 00000001     5...............
  40cc98:	00000000                                ....

0040cc9c <fpinan.6165>:
  40cc9c:	00000034 fffffbce 000003cb 00000001     4...............
  40ccac:	00000000                                ....

0040ccb0 <tinytens>:
  40ccb0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  40ccc0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  40ccd0:	64ac6f43 11680628 69666e49 7974696e     Co.d(.h.Infinity
  40cce0:	4e614e00 50004300 5849534f 00002e00     .NaN.C.POSIX....

0040ccf0 <__mprec_bigtens>:
  40ccf0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40cd00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40cd10:	7f73bf3c 75154fdd                       <.s..O.u

0040cd18 <__mprec_tens>:
  40cd18:	00000000 3ff00000 00000000 40240000     .......?......$@
  40cd28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40cd38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40cd48:	00000000 412e8480 00000000 416312d0     .......A......cA
  40cd58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40cd68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40cd78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40cd88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40cd98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40cda8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40cdb8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40cdc8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40cdd8:	79d99db4 44ea7843                       ...yCx.D

0040cde0 <p05.6047>:
  40cde0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  40cdf0:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

0040cdfd <_ctype_>:
  40cdfd:	20202000 20202020 28282020 20282828     .         ((((( 
  40ce0d:	20202020 20202020 20202020 20202020                     
  40ce1d:	10108820 10101010 10101010 10101010      ...............
  40ce2d:	04040410 04040404 10040404 10101010     ................
  40ce3d:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40ce4d:	01010101 01010101 01010101 10101010     ................
  40ce5d:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40ce6d:	02020202 02020202 02020202 10101010     ................
  40ce7d:	00000020 00000000 00000000 00000000      ...............
	...

0040cf00 <_init>:
  40cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf02:	bf00      	nop
  40cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cf06:	bc08      	pop	{r3}
  40cf08:	469e      	mov	lr, r3
  40cf0a:	4770      	bx	lr

0040cf0c <__init_array_start>:
  40cf0c:	0040018d 	.word	0x0040018d

0040cf10 <_fini>:
  40cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf12:	bf00      	nop
  40cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cf16:	bc08      	pop	{r3}
  40cf18:	469e      	mov	lr, r3
  40cf1a:	4770      	bx	lr

0040cf1c <__fini_array_start>:
  40cf1c:	00400169 	.word	0x00400169
